require("dotenv").config();
require("express-async-errors");
const express = require("express");
const session = require("express-session");
const app = express();
const path = require("path");
const https = require("https"); //Za produkciju
const { logger, logEvents } = require("./middleware/logger");
const errorHandler = require("./middleware/errorHandler");
const cookieParser = require("cookie-parser");
const cors = require("cors");
const corsOptions = require("./config/corsOptions");
const connectDB = require("./config/dbConn");
const mongoose = require("mongoose");
const PORT = process.env.PORT || 3500;
const fs = require("fs");
const multer = require("multer");
const openai = require("./config/openaiConfig"); //
// const { Configuration, OpenAIApi } = require('openai');
// const { Configuration } = require('openai');
const pdfService = require("./pdf-service");
// const { LLMChain } = require("langchain/chains");
// const { OpenAI } = require("openai");
const OpenAI = require("openai");
// const { PromptTemplate } = require("@langchain/core");
const { z } = require("zod");
const { zodFunction, zodResponseFormat } = require("openai/helpers/zod");
const PDFDocument = require("pdfkit");
const nodemailer = require("nodemailer");
const User = require("./models/User");
const Prompt = require("./models/Promptovi");
const crypto = require("crypto");
const Paket = require("./models/Paket");
const Ciljevi = require("./models/Ciljevi");
const ChatKonverzacija = require("./models/ChatKonverzacija");
const Namirnice = require("./models/Namirnice");
const Blog = require("./models/Blog");

const ejs = require("ejs");
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;

console.log("Tip => ", process.env.NODE_ENV); //development

// const User = require("./models/User");
const jwt = require("jsonwebtoken");

connectDB();

app.use(logger);

// app.use(
//   session({
//     secret: process.env.SESSION_SECRET,
//     resave: false,
//     saveUninitialized: false,
//     cookie: { secure: true },
//   })
// );

// app.use(passport.initialize());
// app.use(passport.session());

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    // cookie: { secure: true },
  })
);

function isLogedIn(req, res, next) {
  req.user ? next() : res.sendStatus(401);
}

//ejs
app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: false, extended: true }));
app.set("views", path.join(__dirname, "views"));
app.use("/", express.static(path.join(__dirname, "public"))); //Za static fajlove

//Premesti u rute
//Ovo baca na gui za izbor mejlova
// app.get(
//   "/auth/google",
//   passport.authenticate("google", { scope: ["email", "profile"] })
// );

//Kada se autentifikujemo dobro onda se ide na ovu stranicu
// passport.use(
//   new GoogleStrategy(
//     {
//       clientID: process.env.CLIENT_ID,
//       clientSecret: process.env.CLIENT_SECRET,
//       callbackURL: "http://localhost:5000/google/callback",
//       passReqToCallback: true,
//     },
//     //Ova funkcija sluzi da se napravi novi user i da se pronadje
//     async (request, accessToken, refreshToken, profile, done) => {
//       const email = profile.emails[0].value;
//       const foundUser = await User.findOne({ email }).exec();

//       console.log(email);

//       if (!foundUser) {
//         // If the user does not exist, create a new user
//         foundUser = await User.create({
//           // googleId: profile.id,
//           // username: profile.displayName,
//           email: profile.emails[0].value,
//         });
//       }
//       return done(null, user);

//       // return done(null);
//     }
//   )
// );
// passport.use(
//   new GoogleStrategy(
//     {
//       clientID: process.env.CLIENT_ID,
//       clientSecret: process.env.CLIENT_SECRET,
//       callbackURL: "http://localhost:5000/google/callback",
//       passReqToCallback: true,
//     },
//     async function (request, accessToken, refreshToken, profile, done) {
//       try {
//         // Check if the user already exists in the database
//         const existingUser = await User.findOne({
//           googleId: profile.id,
//         }).exec();

//         if (existingUser) {
//           // User exists, generate access and refresh tokens
//           const accessToken = jwt.sign(
//             {
//               UserInfo: {
//                 id: existingUser._id,
//                 email: existingUser.email,
//                 roles: existingUser.roles,
//               },
//             },
//             process.env.ACCESS_TOKEN_SECRET,
//             { expiresIn: "15m" }
//           );

//           const refreshToken = jwt.sign(
//             { email: existingUser.email },
//             process.env.REFRESH_TOKEN_SECRET,
//             { expiresIn: "7d" }
//           );

//           // Return user with tokens
//           return done(null, { accessToken, refreshToken });
//         } else {
//           // If user doesn't exist, create a new user in the database
//           const newUser = new User({
//             googleId: profile.id,
//             email: profile.emails[0].value,
//             name: profile.displayName,
//             roles: ["user"], // Default role for new users
//           });

//           await newUser.save();

//           // Generate tokens for the newly created user
//           const accessToken = jwt.sign(
//             {
//               UserInfo: {
//                 id: newUser._id,
//                 email: newUser.email,
//                 roles: newUser.roles,
//               },
//             },
//             process.env.ACCESS_TOKEN_SECRET,
//             { expiresIn: "15m" }
//           );

//           const refreshToken = jwt.sign(
//             { email: newUser.email },
//             process.env.REFRESH_TOKEN_SECRET,
//             { expiresIn: "7d" }
//           );

//           // Return the new user with tokens
//           return done(null, { accessToken, refreshToken });
//         }
//       } catch (err) {
//         console.error(err);
//         return done(err, false, { message: "Server error" });
//       }
//     }
//   )
// );

// app.get(
//   "/google/callback",
//   passport.authenticate("google", {
//     successRedirect: "/succcesLogin",
//     failureRedirect: "/failLogin",
//   })
// );

// app.get(
//   "/google/callback",
//   passport.authenticate("google", { session: false }),
//   (req, res) => {
//     if (req.user && req.user.accessToken && req.user.refreshToken) {
//       // Set refreshToken in a cookie and send the accessToken as a JSON response
//       res.cookie("jwt", req.user.refreshToken, {
//         httpOnly: true,
//         secure: true, // ensure HTTPS is used in production
//         sameSite: "None",
//         maxAge: 7 * 24 * 60 * 60 * 1000,
//       });

//       return res.json({ accessToken: req.user.accessToken });
//     }

//     res.status(400).json({ message: "Authentication failed" });
//   }
// );

// passport.serializeUser(function (done) {
//   done(null);
// });

// passport.deserializeUser(function (done) {
//   done(null);
// });

// app.get("/succcesLogin", (req, res) => {
//   res.status(200).json({ message: "Ulogovani ste!" });
// });

// app.get("/failLogin", isLogedIn, (req, res) => {
//   res.status(400).json({ message: "Nije uspesno logovanje sa googlom" });
// });

//
// const corsOptions = {
//   origin: 'https://nutritrans.rs/',  // Explicitly define the frontend address
//   credentials: true,  // This allows cookies to be sent with requests
//   optionsSuccessStatus: 200,  // Legacy browser support
// };

app.use(cors(corsOptions));

app.use(express.json({ limit: "50mb" }));

app.use(cookieParser());

app.use("/files", express.static("files")); //Za PDF-ove

//Za PDF-ove
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./files");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now();
    cb(null, uniqueSuffix + file.originalname);
  },
});

//Google
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID_PRODUCTION,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET_PRODUCTION,
      callbackURL: "/auth/google/callback", //ili sa full pathom... http://localhost:5000/auth/google/callback
    },
    async (accessToken, refreshToken, profile, done) => {
      // console.log("Google user => ", profile); //Dobijeni podaci od googla

      try {
        let user = await User.findOne({ mail: profile.emails[0].value });

        // let lastname_ = profile.name.familyName;
        // let name_ = profile.name.givenName;
        // let mail_ = profile.emails[0].value;

        // console.log("Ime: ", name_);
        // console.log("Prezime: ", lastname_);
        // console.log("Mail: ", mail_);

        const firstName = profile.name.givenName;
        const lastName = profile.name.familyName;

        const formattedFirstName =
          firstName.charAt(0).toUpperCase() + firstName.slice(1);
        const formattedLastName =
          lastName.charAt(0).toUpperCase() + lastName.slice(1);

        if (!user) {
          //Keriranje usera
          user = await User.create({
            googleId: profile.id,
            mail: profile.emails[0].value,
            name: formattedFirstName,
            lastName: formattedLastName,
            primcilj: "Mr≈°avljenje",
            roles: ["Klijent"],
            actlvl: 1.2, //Ovaj se mozda ne koristi...
            nivoAkt: 1.2, //
            selectedIshrana: "Tvoja ishrana",
            selectedIshranaNaziv: "Tvoja ishrana",
            allergiesEnabled: "ne",
            allergyChoice: "no",
            pus: "ne",
            alk: "ne",
            isVerifiedGoogle: true, //isVerified
          });

          //Creating base paket
          const paketObjekat = {
            orgderId: "",
            naziv_paketa: "Starter", // Svi novi useri ce imati starter paket
            cena: 0,
            valuta: "RSD",
            status_placanja: "Plaƒáeno",
            status: "Aktivan",
            tip: "",
            broj: {
              full: "1",
              base: "0",
            },
            datum_kreiranja: new Date(),
            datum_isteka: new Date(
              new Date().setMonth(new Date().getMonth() + 1)
            ),
            datum_placanja: new Date(),
            // datum_otkazivanja:,
            idUser: user._id, //Proveri da li radi?
            transakcioni_id: "",
            metoda_placanja: "",
            TransId: "",
            recurringID: "",
            userMail: user.mail,
          };

          // console.log('user._id - GOOGLE: ', user._id);

          //Radi ok!
          const paket = await Paket.create(paketObjekat);

          const verificationToken = jwt.sign(
            { userId: user._id },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
          );

          //Promeni pri produkciji na https://nutritrans.rs:5000
          // const verificationLink = `http://localhost:5000/verify-email?token=${verificationToken}`;
          const verificationLink = `https://nutritrans.rs:5000/verify-email?token=${verificationToken}`;

          const transporter = nodemailer.createTransport({
            service: "gmail",
            host: "smtp.gmail.email",
            port: 587,
            secure: false,
            auth: {
              user: "office@nutritrans.com",
              pass: "jezq ddqo aynu qucx",
            },
          });

          const mailOptions = {
            //work here
            from: "office@nutritrans.com",
            to: profile.emails[0].value,
            subject: "Registracija profila",
            // html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
            //           <h1 style="color: #333;">Dobrodo≈°li na Nutri Trans!</h1>
            //           <p style="color: #555;">Da biste uspe≈°no zavr≈°ili registraciju, kliknite na dugme ispod da biste aktivirali svoj nalog.</p>
            //           <a href="${verificationLink}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px;">Aktivirajte svoj nalog</a>
            //           <p style="color: #555; margin-top: 20px;">Molimo vas da ne odgovarate na ovaj email. Hvala.</p>
            //       </div>`,
            html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 40px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); max-width: 600px; margin: auto;">
                      <img src="https://nutritrans.rs:5000/logoo.png" alt="Nutrition Transformation Logo" style="max-width: 150px; margin-bottom: 20px;">
                      <h1 style="color: #333; font-size: 28px;">üéâ Dobrodo≈°li na Nutri Trans! üéâ</h1>
                      <p style="color: #555; font-size: 18px;">Da biste uspe≈°no zavr≈°ili registraciju, kliknite na dugme ispod da biste aktivirali svoj nalog.</p>
                      
                      <a href="${verificationLink}" style="display: inline-block; background-color: #4CAF50; color: white; padding: 14px 28px; font-size: 18px; text-decoration: none; border-radius: 8px; font-weight: bold; margin-top: 20px;">‚úÖ Aktivirajte svoj nalog</a>
                      
                      <p style="color: #777; font-size: 14px; margin-top: 30px;">Ako niste kreirali ovaj nalog, slobodno ignori≈°ite ovaj email.</p>
                      
                      <p style="color: #999; font-size: 12px; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj email. Hvala na poverenju! üöÄ</p>
                  </div>
                  `,
          };

          transporter.sendMail(mailOptions, (err, info) => {
            if (err) {
              console.error("Gre≈°ka pri slanju email-a:", err);
            } else {
              console.log("Email za verifikaciju poslat:", info.response);

              // Drugi email - saljemo pdf...
              const secondMailOptions = {
                from: "office@nutritrans.com",
                to: profile.emails[0].value,
                subject: "Propratne informacije",
                html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 40px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); max-width: 600px; margin: auto;">
                      <img src="https://nutritrans.rs:5000/logoo.png" alt="Nutrition Transformation Logo" style="max-width: 150px; margin-bottom: 20px;">
                      <h1 style="color: #333; font-size: 28px;">üìÉ Uputstvo za Nutri Trans! üìÉ</h1>
                      <p style="color: #555; font-size: 18px;">U prilogu Vam ≈°aljemo PDF dokument vezan za Nutri Trans aplikaciju. Molimo Vas da ga pregledate i javite nam ako imate bilo kakvih pitanja ili potrebna dodatna poja≈°njenja.</p>
                      
                      <p style="color: #999; font-size: 12px; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj email. Hvala na poverenju! üöÄ</p>
                  </div>`,
                attachments: [
                  {
                    filename: "vodic.pdf",
                    path: "./vodic.pdf",
                    contentType: "application/pdf",
                  },
                ],
              };

              transporter.sendMail(secondMailOptions, (err, info) => {
                if (err) {
                  console.error("Gre≈°ka pri slanju drugog email-a:", err);
                } else {
                  console.log(
                    "Drugi email poslat sa PDF prilogom:",
                    info.response
                  );
                }
              });
            }
          });
        }

        done(null, user);
      } catch (err) {
        console.error(err);
        done(err, null);
      }
    }
  )
);

//Za saving user data inside the session
passport.serializeUser((user, done) => {
  console.log("serialize user", user);
  done(null, user.id);
});

//Za retriving user data from the session
passport.deserializeUser(async (id, done) => {
  try {
    const user = await User.findById(id); //Kako by id, mozda da ga trazim po mailu?
    console.log("DEserialize user", user);
    done(null, user);
  } catch (err) {
    done(err, null);
  }
});

app.get(
  "/auth/google",
  passport.authenticate("google", { scope: ["profile", "email"] }) //Retrivujemo???
);

//Vraca se na callback???
app.get(
  "/auth/google/callback",
  passport.authenticate("google", {
    failureRedirect: `${process.env.FRONTEND_URL}/`,
  }), //Ako je fail
  (req, res) => {
    //Ako je success?
    const accessToken = jwt.sign(
      {
        UserInfo: {
          id: req.user._id,
          email: req.user.mail,
          name: req.user.name,
          roles: req.user.roles,
        },
      },
      process.env.ACCESS_TOKEN_SECRET,
      { expiresIn: "30h" }
    );

    // const refreshToken = jwt.sign(
    //   { id: req.user._id },
    //   process.env.REFRESH_TOKEN_SECRET,
    //   {
    //     expiresIn: "7d",
    //   }
    // );

    const refreshToken = jwt.sign(
      { email: req.user.mail },
      process.env.REFRESH_TOKEN_SECRET,
      { expiresIn: "7d" }
    );

    res.cookie("jwt", refreshToken, {
      httpOnly: true, //accessible only by web server
      secure: false, //true je za https - false je za http
      same_site: "None", //cross-site cookie - iz sa sameSite u same_site
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    res.redirect(
      `${process.env.FRONTEND_URL}/auth/callback?accessToken=${accessToken}`
    );
    // res.json({ accessToken });
  }
);

// app.get("/auth/user", (req, res) => {
//   if (req.isAuthenticated()) {
//     res.json(req.user);
//   } else {
//     res.status(401).json({ message: "Niste prijavljeni" });
//   }
// });

// app.get("/auth/logout", (req, res) => {
//   req.logout((err) => {
//     if (err) {
//       console.error(err);
//     }
//     res.redirect("/");
//   });
// });

//Test ===
// app.get(
//   "/auth/google/callback",
//   passport.authenticate("google", { failureRedirect: "/googleFail" }), //Ako je fail
//   (req, res) => {
//     res.redirect("/googleSuccess");
//   }
// );

// app.get("/googleSuccess", (req, res) => {
//   res.json({ message: "Rout GOOD" });
// });

// app.get("/googleFail", (req, res) => {
//   res.json({ message: "Rout BAD" });
// });
//Test ===

require("./pdfDetails");
const PdfSchema = mongoose.model("PdfDetails"); //Kolekcija za bazu
const upload = multer({ storage: storage });

// app.post("/upload-files", upload.single("file"), async (req, res) => {
//   console.log(req.file);
//   const title = req.body.title;
//   const fileName = req.file.filename;
//   try {
//     await PdfSchema.create({ title: title, pdf: fileName });
//     res.send({ status: "ok" });
//   } catch (error) {
//     res.json({ status: error });
//   }
// });

//Vraca sve fajlove klijentu
// app.get("/get-files/:id", async (req, res) => {
//   const { id } = req.params;
//   try {
//     PdfSchema.find({ idKlijenta: id }).then((data) => {
//       res.send({ status: "ok", data: data });
//     });
//   } catch (error) {}
// });

//Vraca sve fajlove klijentu i updejtuje stanja
app.get("/get-files/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const data = await PdfSchema.find({ idKlijenta: id });

    for (let document of data) {
      if (document.datumKraj) {
        const today = new Date();

        const datumKrajParts = document.datumKraj.split(".");
        const datumKrajFormatted = new Date(
          `${datumKrajParts[2]}-${datumKrajParts[1]}-${datumKrajParts[0]}`
        );

        if (datumKrajFormatted < today) {
          // A≈æuriraj status u bazi podataka
          const updatedDocument = await PdfSchema.findByIdAndUpdate(
            document._id,
            { status: "Neaktivan" },
            { new: true }
          );

          // if (updatedDocument) {
          //   console.log(
          //     `Document with ID ${document._id} updated to 'Neaktivan'`
          //   );
          // } else {
          //   console.log(`Failed to update document with ID ${document._id}`);
          // }
        }
      }
    }

    // Ponovo uƒçitajte sve podatke nakon a≈æuriranja statusa
    const updatedData = await PdfSchema.find({ idKlijenta: id });

    // Vraƒáanje odgovora sa a≈æuriranim podacima
    res.send({ status: "ok", data: updatedData });
  } catch (error) {
    console.error(error);
    res.status(500).send({ status: "error", message: "Do≈°lo je do gre≈°ke" });
  }
});

//Vraca samo poslednja 2 fajla ( izvestaja ) klijentu
app.get("/get-files/two/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const data = await PdfSchema.find({ idKlijenta: id })
      .sort({ _id: -1 })
      .limit(1); // Vraƒáa poslednja dva zapisa, bilo je 2 sad prebaceno na 1

    res.send({ status: "ok", data: data });
  } catch (error) {
    res.status(500).send({
      status: "error",
      message: "Nesto se desilo lose sa uzimanjem poslednja 2 iz baze!",
    });
  }
});

// Download file
app.get("/files/:filename", (req, res) => {
  const filePath = path.join(__dirname, "files", req.params.filename);
  res.download(filePath, req.params.filename, (err) => {
    if (err) {
      console.error("Error downloading file:", err);
      res.status(500).send("Error downloading file.");
    }
  });
});

// API to delete a file and its reference from MongoDB
app.delete("/delete-file/:id", async (req, res) => {
  try {
    // Find the document by ID in the database
    const pdf = await PdfSchema.findById(req.params.id);
    const filePath = path.join(__dirname, "files", pdf.pdf);

    // Remove the file from the file system
    fs.unlink(filePath, async (err) => {
      if (err) {
        console.error("Error deleting file:", err);
        return res
          .status(500)
          .send({ status: "error", message: "File deletion failed" });
      }

      // Remove the document from the database
      await PdfSchema.findByIdAndDelete(req.params.id);
      res.send({ status: "ok", message: "File deleted successfully" });
    });
  } catch (error) {
    console.error("Error deleting PDF:", error);
    res.status(500).send({ status: "error", message: "File not found" });
  }
});

//Vraca sve pakete klijentu
// app.get("/get-pakete/:id", async (req, res) => {
//   const { id } = req.params;
//   try {
//     Paket.find({ idUser: id }).then((data) => {
//       res.send({ status: "ok", data: data });
//     });
//   } catch (error) {}
// });

//Azurira
app.get("/get-pakete/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const today = new Date();
    const paketi = await Paket.find({ idUser: id }); //tip: "Godi≈°nje"

    // Proveri i a≈æuriraj pakete
    const updatedPaketi = await Promise.all(
      paketi.map(async (paket) => {
        if (!(today >= paket.datum_placanja && today <= paket.datum_isteka)) {
          paket.status = "Neaktivan";
          await paket.save();
        }
        return paket;
      })
    );

    res.send({ status: "ok", data: updatedPaketi });
  } catch (error) {
    console.error("Error ne mogu da se fetuju paketi:", error);
    res.status(500).send({ status: "error", message: "Server error" });
  }
});

//Samo sa statusom neaktivan
// app.get("/get-pakete/:id", async (req, res) => {
//   const { id } = req.params;

//   try {
//     const pakets = await Paket.find({
//       idUser: id,
//       status: "Neaktivan"
//     });
//     res.send({ status: "ok", data: pakets });
//   } catch (error) {
//     console.error(error);
//     res.status(500).send({ status: "error", message: "Error fetching pakets" });
//   }
// });

app.get("/date", (req, res) => {
  res.status(200).json({
    date: new Date().toISOString(),
  });
});

//Manuelno dodeljivanje paketa od strane admina
app.post("/add-paket", async (req, res) => {
  try {
    const { idUser, mail, imePaketa, brJelovnika, tipPaketa, cena } = req.body;

    const datumIsteka =
      tipPaketa === "Meseƒçno"
        ? new Date(new Date().setMonth(new Date().getMonth() + 1))
        : new Date(new Date().setFullYear(new Date().getFullYear() + 1));

    const newPaket = new Paket({
      orderId: "",
      naziv_paketa: imePaketa,
      cena: parseInt(cena),
      valuta: "RSD",
      status_placanja: "Plaƒáeno",
      status: "Aktivan",
      tip: tipPaketa || "",
      broj: {
        full: brJelovnika,
        base: "0",
      },
      datum_kreiranja: new Date(),
      datum_isteka: datumIsteka,
      datum_placanja: new Date(),
      idUser,
      transakcioni_id: "",
      metoda_placanja: "",
      TransId: "",
      recurringID: "",
      userMail: mail,
    });

    await newPaket.save();

    res.status(201).json({
      success: true,
      message: "Paket uspe≈°no dodat!",
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({
      success: false,
      message: "Do≈°lo je do gre≈°ke prilikom dodavanja paketa",
      error: error.message,
    });
  }
});

app.post("/delete-paket", async (req, res) => {
  const { id } = req.body;

  try {
    const rezultat = await Paket.findByIdAndDelete(id);

    if (rezultat) {
      res.status(200).json({ success: true, message: "Paket obrisan" });
    } else {
      res.status(404).json({ success: false, message: "Paket nije pronaƒëen" });
    }
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ success: false, message: "Gre≈°ka prilikom brisanja paketa" });
  }
});

app.post("/update-paket-izvestaji-full", async (req, res) => {
  const { idIzv, inputValue } = req.body;

  try {
    const izvestaj = await Paket.findById(idIzv);

    if (izvestaj) {
      izvestaj.broj.full = inputValue;

      await izvestaj.save();

      res
        .status(200)
        .json({ success: true, message: "Paket uspe≈°no a≈æuriran" });
    } else {
      res.status(404).json({ success: false, message: "Paket nije pronaƒëen" });
    }
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ success: false, message: "Gre≈°ka prilikom a≈æuriranja paketa" });
  }
});

// <!-- <script>
// var status = '<%- JSON.stringify(status) %>';

// if (JSON.parse(status) == "verified") {
//   if (confirm("Do u want to login?")) {
//     window.location.href = "http://localhost:3000/";
//   }
// }
// </script> -->

// app.use("/", express.static(path.join(__dirname, "public")));
// app.use("/css", express.static("dist"));

app.use("/", require("./routes/root"));
app.use("/auth", require("./routes/authRoutes"));
app.use("/users", require("./routes/userRoutes"));
app.use("/ciljevi", require("./routes/ciljeciRoutes"));
app.use("/fizickeAktivnosti", require("./routes/fizickeAktivnostiRoute"));
app.use("/ishrane", require("./routes/ishranaRoutes"));
app.use("/namirnice", require("./routes/namirniceRoutes"));
app.use("/mojDnevnik", require("./routes/mojDnevnikRoutes"));
app.use("/prompts", require("./routes/promptRoutes"));
app.use("/chatKonv", require("./routes/chatKonvRoutes"));
app.use("/blog", require("./routes/blogRoutes"));
app.use("/tag", require("./routes/tagRoutes"));

//AI
const client = new OpenAI({
  apiKey: process.env.OPEN_AI_KEY,
});
// app.use("/openai", require("./routes/openaiRoutes")); //Ako hocemo preko rutera

// app.use("/openai", async (req, res) => {
//   const { title } = req.body;

//   //Jedan text prompt
//   const description = await openai.chat.completions.create({
//     model: "gpt-4o-2024-08-06",
//     messages: [
//       {
//         role: "user",
//         content: `${title}`,
//       },
//     ],
//     max_tokens: 1000, // Povecaj jos ako treba
//   });

//   // console.log("Object:", description.choices[0].message.content);

//   res.status(200).json({
//     description: description.choices[0].message.content,
//   });
// });

//Za admin chat
app.post("/adminChat", async (req, res) => {
  try {
    const { title } = req.body;

    if (!title) {
      return res.status(400).json({ error: "Potreno pitanje" });
    }

    const description = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: `"${title}"`,
        },
      ],
    });

    let odgovor = description.choices[0]?.message?.content?.trim();
    odgovor = odgovor.replace(/[#!&*√º!_?-@**]/g, "");

    // console.log("OpenAI Response:", description.data);
    res.status(200).json({
      description: odgovor,
    });
  } catch (error) {
    console.error("Error generating description:", error);
    res
      .status(500)
      .json({ error: "An error occurred while generating the description" });
  }
});

//Prompt
// Kreiraj mi sedmodnevni plan ishrane sa ciljem Poveƒáanje mi≈°iƒáne mase. Moja dnevna kalorijska vrednost iznosi 2665.52. Koji pokrivaju samo obroke: doruƒçak, u≈æina, ruƒçak, u≈æina, veƒçera, a namirnice koje ≈æelim da koristim su: Narand≈æa,Limun,Grejpfrut,Mandarina,Kukuruz,Malina,Borovnica,Kupina,Ribizla,Breskva,≈†ljiva,Tre≈°nja,Kajsija,Vi≈°nja,Banana,Mango,Ananas,Papaja,Kivi,Jabuka,Kru≈°ka,Lubenica,Dinja,Spanaƒá,Blitva,Kelj,Zelena Salata,Rukola,Matovilac,Celer,≈†argarepa,Cvekla,Krompir,Batat,Rotkva,Bundeva,Tikvica,Krastavac,Crni luk,Beli luk,Praziluk,Paradajz,Paprika,ƒåili papriƒçice,Gra≈°ak,Pasulj,Soƒçivo,Leblebija,Soja,Badem,Orasi,Le≈°nici,Indijski orah,Kikiriki,Suncokret,Lan,Susam,Semenke bundeve,Kravlje,Kozje,Sojino,Bademovo,Obiƒçni,Grƒçki,Voƒáni,Gauda,Edamer,Feta,Parmezan,Mozzarela,Rikota,Kisela Pavlaka,Slatka Pavlaka,Maslac,Govedina,Teletina,Svinjetina,Jagnjetina,Konjetina,Piletina,ƒÜuretina,Paƒçetina,Gu≈°ƒçetina,≈†aran,Som,Pastrmka,Smuƒë,Deverika,Keƒçiga,≈†tuka,Losos,Tuna,Sku≈°a,Bakalar,≈†kampi,Lignje,≈†unka,Slanina,Kobasice,Salama,Pa≈°teta,Mesni Narezak,Pileƒáa,Prepeliƒçja,Maslinovo,Suncokretovo,Kokosovo,Laneno,Ulje repice,Mleƒçni maslac (puter),Margarin,Voƒáni sokovi,Povrƒáni sokovi,Smutiji,Crna kafa,Zeleni ƒçaj,Crni ƒçaj,Biljni ƒçaj,Kefir,Kiselo mleko. Volim naminice: , dok ne ≈æelim da ukljuƒçim . Ispi≈°i mi prvo neki kratak nutricionistiƒçki opis pa ispod plan ishrane dan ispod dana i na kraju jedan mali zakljuƒçak. Nemoj da ispisuje≈° ove karaktere: #, &, *,**, -,√º, !, _, ?,",'. Ispi≈°i mi dan za danom Dan 1, Dan 2...
//Jedan nacin - Original
app.use("/openai", async (req, res) => {
  const { title, metaData: newData } = req.body;

  // Jedan text prompt
  const description = await openai.chat.completions.create({
    model: "gpt-4o-2024-08-06",
    messages: [
      {
        role: "user",
        content: `${title}`,
      },
    ],
    max_tokens: 3000, // Poveƒáaj jo≈° ako treba
  });

  const content = description.choices[0].message.content;
  const content_ = description.choices[0].message.content;

  // Generisanje PDF-a
  const fileName = `${newData.primcilj}_${Date.now()}_${Math.floor(
    Math.random() * 100000000000
  )}.pdf`; // Ime datoteke
  const filePath = `./files/${fileName}`;

  // Koristi prazan buffer za ƒçuvanje chunk-ova
  const chunks = [];

  pdfService.buildPDF(
    content,
    newData,
    (chunk) => chunks.push(chunk), // Sakupljaj chunk-ove
    async () => {
      // ƒåuvanje PDF-a na disk
      await fs.promises.writeFile(filePath, Buffer.concat(chunks));

      // Upisivanje u bazu podataka
      try {
        await PdfSchema.create({
          title: newData.primcilj,
          pdf: fileName,
          idKlijenta: newData.id,
          datumKreir: new Date(),
        });
        res.json({
          status: "ok",
          message: "PDF je uspe≈°no generisan i saƒçuvan.",
          fileName,
          mojPrompt: content_,
        });
      } catch (error) {
        console.error("Error saving to database:", error);
        res.status(500).json({
          status: "error",
          message: "Gre≈°ka prilikom ƒçuvanja u bazu.",
        });
      }
    }
  );
});

//
// const joke = z.object({
//   setup: z.string().describe("The setup of the joke"),
//   punchline: z.string().describe("The punchline to the joke"),
//   rating: z.number().optional().describe("How funny the joke is, from 1 to 10"),
// });

// // Kreiranje modela sa strukturiranim izlazom
// const structuredLlm = openai.withStructuredOutput(joke);

// // Middleware za generisanje ≈°ale
// app.use('/joke', async (req, res) => {
//   try {
//     // Pozivamo model da generi≈°emo ≈°alu o maƒçkama
//     const result = await structuredLlm.invoke("Tell me a joke about cats");

//     // Validacija rezultata pomoƒáu Zod-a
//     const parsedResult = joke.parse(result); // Parsiranje rezultata sa zod validacijom

//     // Vraƒáamo uspe≈°an odgovor sa ≈°alom
//     res.json(parsedResult);  // Vraƒáamo strukturirani rezultat

//   } catch (error) {
//     // Ako doƒëe do gre≈°ke tokom poziva modela ili validacije
//     console.error('Error generating joke:', error);
//     res.status(500).json({ error: 'An error occurred while generating the joke' });
//   }
// });

//Kreiranje obroka po danima
const MealSchema = z.object({
  opis: z.string(),
  sastojci: z.string(),
  instrukcije: z.string(),
  kalorije: z.number(),
  // cena: z.number(),
  nutritivna_vrednost: z.string(), //Added
  Makronutrijenti: z.object({
    Proteini: z.number(),
    Ugljeni_hidrati: z.number(),
    Masti: z.number(),
  }),
});

//Kreiranje dana
const generateDaySchema = (chosenObroci) => {
  const daySchemaDefinition = { dan: z.string() };

  if (chosenObroci.includes("doruƒçak"))
    daySchemaDefinition.dorucak = MealSchema;
  if (chosenObroci.includes("u≈æina1")) daySchemaDefinition.uzina1 = MealSchema;
  if (chosenObroci.includes("ruƒçak")) daySchemaDefinition.rucak = MealSchema;
  if (chosenObroci.includes("u≈æina2")) daySchemaDefinition.uzina2 = MealSchema;
  if (chosenObroci.includes("veƒçera")) daySchemaDefinition.vecera = MealSchema;

  return z.object(daySchemaDefinition);
};

app.post("/generate-plan", async (req, res) => {
  const { brojDana, obroci } = req.body;

  if (!brojDana || typeof brojDana !== "number") {
    return res
      .status(400)
      .json({ message: "Molimo unesite validan broj dana." });
  }

  const validObroci = ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];
  const chosenObroci =
    Array.isArray(obroci) &&
    obroci.every((obrok) => validObroci.includes(obrok))
      ? obroci
      : ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];

  const obrociPrompt = chosenObroci
    .map((obrok) => {
      switch (obrok) {
        case "doruƒçak":
          return "doruƒçak";
        case "u≈æina1":
          return "u≈æina";
        case "ruƒçak":
          return "ruƒçak";
        case "u≈æina2":
          return "druga u≈æina";
        case "veƒçera":
          return "veƒçera";
        default:
          return obrok;
      }
    })
    .join(", ");

  const DaySchema = generateDaySchema(chosenObroci);
  const FullWeekSchema = z.object({
    days: z.array(DaySchema),
  });

  try {
    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "Ti si korisni nutricionista. Generi≈°i plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu. Nazivi dana treba da budu 'Dan 1', 'Dan 2', i tako dalje, a ne imena dana u nedelji.",
        },
        {
          role: "user",
          content: `Napravi plan ishrane za ${brojDana} dana sa sledeƒáim obrocima: ${obrociPrompt}. Nemoj ukljuƒçivati obroke koji nisu navedeni.`,
        },
      ],
      response_format: zodResponseFormat(FullWeekSchema, "mealPlan"),
    });

    const message = completion.choices[0]?.message;
    if (message?.parsed) {
      console.log("Generisani plan ishrane:", message.parsed);
      res.json(message.parsed);
    } else {
      console.log("Odbijeno:", message.refusal);
      res.json({ message: "Odbijeno", refusal: message.refusal });
    }
  } catch (error) {
    console.error("Gre≈°ka:", error);
    res.status(500).json({
      status: "error",
      message: "Gre≈°ka u generisanju plana ishrane.",
    });
  }
});

//Ovo radi samo ga optimizuj!
app.use("/op", async (req, res) => {
  const description = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      { role: "system", content: "Ti si asistent za planiranje ishrane." },
      {
        role: "user",
        content: `Kreiraj mi trodnevni plan ishrane sa ciljem Mr≈°avljenje. Moja dnevna kalorijska vrednost iznosi 2566.3. Namirnice koje preferiram u ishrani: meso, mleko. Namirnice koje ne preferiram u ishrani: hleb.
        
        Struktura plana ishrane treba biti sledeƒáa:
        - Naslov: Trodnevni Plan Ishrane za Mr≈°avljenje
        - Uvod: Kratki uvodni tekst o planu ishrane 
        - Dan 1:
          - Doruƒçak:
            - Opis: opis doruƒçka
            - Sastojci: sastojci doruƒçka
            - Instrukcije: instrukcije pripreme doruƒçka
            - Kalorije: broj kalorija tog doruƒçka
          - U≈æina 1:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Ruƒçak:
            - Opis: opis ruƒçka
            - Sastojci: sastojci ruƒçka
            - Instrukcije: instrukcije pripreme ruƒçka
            - Kalorije: broj kalorija te ruƒçka
          - U≈æina 2:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Veƒçera:
            - Opis: opis veƒçere
            - Sastojci: sastojci veƒçere
            - Instrukcije: instrukcije pripreme veƒçere
            - Kalorije: broj kalorija te veƒçere
            
        - Dan 2:
          - Doruƒçak:
            - Opis: opis doruƒçka
            - Sastojci: sastojci doruƒçka
            - Instrukcije: instrukcije pripreme doruƒçka
            - Kalorije: broj kalorija tog doruƒçka
          - U≈æina 1:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Ruƒçak:
            - Opis: opis ruƒçka
            - Sastojci: sastojci ruƒçka
            - Instrukcije: instrukcije pripreme ruƒçka
            - Kalorije: broj kalorija te ruƒçka
          - U≈æina 2:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Veƒçera:
            - Opis: opis veƒçere
            - Sastojci: sastojci veƒçere
            - Instrukcije: instrukcije pripreme veƒçere
            - Kalorije: broj kalorija te veƒçere

        - Dan 3:
          - Doruƒçak:
            - Opis: opis doruƒçka
            - Sastojci: sastojci doruƒçka
            - Instrukcije: instrukcije pripreme doruƒçka
            - Kalorije: broj kalorija tog doruƒçka
          - U≈æina 1:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Ruƒçak:
            - Opis: opis ruƒçka
            - Sastojci: sastojci ruƒçka
            - Instrukcije: instrukcije pripreme ruƒçka
            - Kalorije: broj kalorija te ruƒçka
          - U≈æina 2:
            - Opis: opis u≈æine
            - Sastojci: sastojci u≈æine
            - Instrukcije: instrukcije pripreme u≈æine
            - Kalorije: broj kalorija te u≈æine
          - Veƒçera:
            - Opis: opis veƒçere
            - Sastojci: sastojci veƒçere
            - Instrukcije: instrukcije pripreme veƒçere
            - Kalorije: broj kalorija te veƒçere

        - Zakljuƒçak: Zavr≈°na motivacija za plan ishrane
        
        Svaki obrok treba da bude opisan detaljno, sa navedenim sastojcima, koracima za pripremu (instrukcijama), i taƒçnim brojem kalorija po obroku. Koristi taƒçno navedenu strukturu i stavi kljuƒçne reƒçi kao 'Naslov:', 'Uvod:', 'Opis:', 'Sastojci:', 'Instrukcije:', 'Kalorije:' taƒçno u ovom formatu sa dvotaƒçkom.
        Ne sme≈° menjati ovu strukturu ni redosled elemenata. Svaki obrok treba biti detaljan i ukljuƒçivati taƒçan broj kalorija. Svaki deo mora biti taƒçno kao ≈°to je opisano.`,
      },
    ],
    max_tokens: 3500,
  });

  let content = description.choices[0].message.content;
  content = content.replace(/[#!&*√º!_?-]/g, ""); //Ovde sam dodao -

  console.log("DATA:", content);
  // Main meal plan schema
  const mealPlan = {
    naslov: "",
    uvod: "",
    dani: [],
    zakljucak: "",
  };

  // Parsing functions for each section
  function parseTitle(line) {
    if (line.startsWith("Naslov:")) {
      mealPlan.naslov = line.replace("Naslov:", "").trim();
    }
  }

  function parseIntroduction(line) {
    if (line.startsWith("Uvod:")) {
      mealPlan.uvod = line.replace("Uvod:", "").trim();
    }
  }

  function startNewDay(dayNumber) {
    return {
      dan: `Dan ${dayNumber}`,
      obroci: {
        dorucak: { opis: "", sastojci: [], instrukcije: "", kalorije: 0 },
        uzina1: { opis: "", sastojci: [], instrukcije: "", kalorije: 0 },
        rucak: { opis: "", sastojci: [], instrukcije: "", kalorije: 0 },
        uzina2: { opis: "", sastojci: [], instrukcije: "", kalorije: 0 },
        vecera: { opis: "", sastojci: [], instrukcije: "", kalorije: 0 },
      },
    };
  }

  function parseMealDetail(line, meal) {
    if (line.startsWith("Opis:")) {
      meal.opis = line.replace("Opis:", "").trim();
    } else if (line.startsWith("Sastojci:")) {
      meal.sastojci = line
        .replace("Sastojci:", "")
        .split(",")
        .map((item) => item.trim());
    } else if (line.startsWith("Instrukcije:")) {
      meal.instrukcije = line.replace("Instrukcije:", "").trim();
    } else if (line.startsWith("Kalorije:")) {
      meal.kalorije = parseInt(line.replace("Kalorije:", "").trim()) || 0;
    }
  }

  function parseConclusion(line) {
    if (line.startsWith("Zakljuƒçak:")) {
      mealPlan.zakljucak = line.replace("Zakljuƒçak:", "").trim();
    }
  }

  // Parsing the content line by line
  let currentDay = null;
  let currentMeal = null;

  const lines = content.split("\n").map((line) => line.trim());
  lines.forEach((line) => {
    parseTitle(line);
    parseIntroduction(line);

    if (line.startsWith("Dan")) {
      const dayNumber = mealPlan.dani.length + 1;
      currentDay = startNewDay(dayNumber);
      mealPlan.dani.push(currentDay);
      currentMeal = null;
    } else if (line.includes("Doruƒçak:")) {
      currentMeal = currentDay.obroci.dorucak;
    } else if (line.includes("U≈æina 1:")) {
      currentMeal = currentDay.obroci.uzina1;
    } else if (line.includes("Ruƒçak:")) {
      currentMeal = currentDay.obroci.rucak;
    } else if (line.includes("U≈æina 2:")) {
      currentMeal = currentDay.obroci.uzina2;
    } else if (line.includes("Veƒçera:")) {
      currentMeal = currentDay.obroci.vecera;
    } else if (currentMeal) {
      parseMealDetail(line, currentMeal);
    }

    parseConclusion(line);
  });

  res.status(200).json({ planIshrane: mealPlan });
});

//
app.use("/ministest", async (req, res) => {
  res.send({ Test: "Success" });
});

//Holisticki pristup
const holPristupShema = z.object({
  fizickoZdravlje: z.string().min(1, "Fiziƒçko zdravlje mora biti opisano"),
  zdraveNavike: z.string().min(1, "Zdrave navike moraju biti opisane"),
  preventivnaNega: z.string().min(1, "Preventivna nega mora biti opisana"),
  odrzavanjeBilansa: z.string().min(1, "Odr≈æavanje bilansa mora biti opisano"),
});

// Ruta za holistiƒçki pristup
app.get("/hol", async (req, res) => {
  try {
    const holPristupResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "You are an AI that provides detailed and clearly structured explanations on holistic approaches to health and wellness.",
        },
        {
          role: "user",
          content: `Molim te da pru≈æi≈° jasan i organizovan opis holistiƒçkog pristupa zdravlju, podeljen u posebne odeljke:
                    1. Fiziƒçko zdravlje: Kratak opis
                    2. Zdrave navike: Kratak opis
                    3. Preventivna nega: Kratak opis
                    4. Odr≈æavanje bilansa: Kratak opis
            Neka odgovori budu jasno strukturirani sa taƒçno definisanim odeljcima: 
            '1. Fiziƒçko zdravlje:', 
            '2. Zdrave navike:', 
            '3. Preventivna nega:', 
            '4. Odr≈æavanje bilansa:' sa dvotaƒçkom na kraju svakog naslova.`,
        },
      ],
    });

    // Generisani odgovor
    let odgovor = holPristupResult.choices[0].message.content;
    odgovor = odgovor.replace(/[#!&*√º!_?-@**]/g, "");

    console.log("odgovor:", odgovor);

    // Provera da li su svi odeljci prisutni u odgovoru
    if (
      !odgovor.includes("1. Fiziƒçko zdravlje:") ||
      !odgovor.includes("2. Zdrave navike:") ||
      !odgovor.includes("3. Preventivna nega:") ||
      !odgovor.includes("4. Odr≈æavanje bilansa:")
    ) {
      return res
        .status(400)
        .json({ error: "Odgovor nije u ispravnom formatu." });
    }

    //Defoltno ako nema defoltne vrenosti
    const defaultHol = {
      fizickoZdravlje:
        "Fiziƒçko zdravlje se odnosi na dobrobit i funkcionalnost na≈°eg tela. To ukljuƒçuje stanje na≈°ih unutra≈°njih organa, mi≈°iƒáa, kostiju, kao i na≈°u telesnu kondiciju i snagu. Holistiƒçki pristup fiziƒçkom zdravlju prepoznaje da su svi ovi aspekti meƒëusobno povezani i da su svi od su≈°tinskog znaƒçaja za sveukupno zdravlje. To znaƒçi da se fokusiramo ne samo na leƒçenje simptoma, veƒá i na razumijevanje i tretiranje uzroka.",
      zdraveNavike:
        "Zdrave navike su pona≈°anja koja ƒçesto praktikujemo i koja pozitivno utiƒçu na na≈°e fiziƒçko, emocionalno i mentalno zdravlje. To mo≈æe ukljuƒçivati redovnu fiziƒçku aktivnost, uravnote≈æenu ishranu, dovoljno sna, hidrataciju, kao i izbegavanje ≈°tetnih navika poput pu≈°enja ili prekomernog konzumiranja alkohola. Holistiƒçki pristup zdravim navikama prepoznaje da su sve ove aktivnosti povezane i da promena jedne navike mo≈æe imati ≈°irok spektar uticaja na na≈°e zdravlje.",
      preventivnaNega:
        "Preventivna nega je pristup zdravlju koji se fokusira na spreƒçavanje bolesti i stanja pre nego ≈°to se pojave, umesto da se bave samo njihovim leƒçenjem. To mo≈æe ukljuƒçivati redovne lekarske preglede, vakcinaciju, skrining za odreƒëene bolesti, kao i voƒëenje zdravog ≈æivotnog stila. Holistiƒçki pristup prepoznaje va≈ænost preventivne nege u odr≈æavanju dugoroƒçnog zdravlja i dobrobiti.",
      odrzavanjeBilansa:
        "Odr≈æavanje bilansa odnosi se na pronala≈æenje ravnote≈æe izmeƒëu razliƒçitih aspekata na≈°eg ≈æivota, ukljuƒçujuƒái fiziƒçko zdravlje, emocionalno blagostanje, socijalne odnose, duhovnost i rad. Holistiƒçki pristup odr≈æavanju bilansa prepoznaje da su svi ovi aspekti meƒëusobno povezani i da promene u jednom aspektu mogu uticati na druge. To znaƒçi da se te≈æi za ravnote≈æom u svim oblastima ≈æivota, a ne samo u jednoj.",
    };

    // Podela odgovora u odgovarajuƒáu strukturu
    const hol = {
      fizickoZdravlje:
        odgovor
          .split("1. Fiziƒçko zdravlje:")[1]
          .split("2. Zdrave navike:")[0]
          .trim() || defaultHol.fizickoZdravlje,
      zdraveNavike:
        odgovor
          .split("2. Zdrave navike:")[1]
          .split("3. Preventivna nega:")[0]
          .trim() || defaultHol.zdraveNavike,
      preventivnaNega:
        odgovor
          .split("3. Preventivna nega:")[1]
          .split("4. Odr≈æavanje bilansa:")[0]
          .trim() || defaultHol.preventivnaNega,
      odrzavanjeBilansa:
        odgovor.split("4. Odr≈æavanje bilansa:")[1].trim() ||
        defaultHol.odrzavanjeBilansa,
    };

    // Validacija odgovora prema Zod shemi
    holPristupShema.parse(hol);

    console.log("odgovor: ", odgovor);

    // Slanje odgovora korisniku
    res.json({ hol });
  } catch (error) {
    // Ako se desi gre≈°ka (npr. u validaciji ili pri pozivu OpenAI)
    res.status(500).json({
      error:
        error.message || "Do≈°lo je do gre≈°ke prilikom generisanja odgovora.",
    });
  }
});

//DODAJ JOS AKO TREBA
// 5. Emocionalno zdravlje: Kratak opis
// 6. Mentalno zdravlje: Kratak opis
// 7. Socijalno zdravlje: Kratak opis
// 8. Duhovno zdravlje: Kratak opis

//Ostali generisani hupiti
const planShema = z.object({
  // voda: z.string().min(1, "Plan za unos vode mora biti prisutan"),
  // spavanje: z.string().min(1, "Plan za spavanje mora biti prisutan"),
  // podrska: z.string().min(1, "Podr≈°ka imunolo≈°kom sistemu mora biti prisutna"),
  // plan: z.string().min(1, "Plan fiziƒçke aktivnosti mora biti prisutan"),
  // uvod: z.string().min(1, "Uvod mora biti prisutan"),
  zakljucak: z.string().min(1, "Zakljuƒçak mora biti prisutan"),
});

//Defoltne vrednosti za kratke upite
const kratki = {
  voda: "Unos vode je kljuƒçan za pravilan rad i funkciju na≈°eg tela. Struƒçnjaci preporuƒçuju dnevni unos od oko 2 litre vode, iako to mo≈æe varirati ovisno o individualnim potrebama, naporima i klimatskim uvjetima. Hidracija poma≈æe u reguliranju tjelesne temperature, podmazivanju zglobova, preno≈°enju hranjivih tvari do stanica i ispiranju otpadnih materija iz tijela. Nedostatak vode mo≈æe dovesti do dehidracije, ≈°to mo≈æe uzrokovati umor, glavobolju i brojne druge zdravstvene probleme. Stoga je va≈æno obratiti pa≈ænju na unos vode i paziti na znakove dehidracije. Voda se ne treba konzumirati samo kada smo ≈æedni, veƒá kontinuirano tijekom cijeloga dana.",
  spavanje:
    "Pobolj≈°anje spavanja mo≈æe dramatiƒçno utjecati na va≈°e opƒáe blagostanje i kvalitetu ≈æivota. Postojanje kvalitetnih rutina prije spavanja i stvaranje okoline pogodne za spavanje mogu pomoƒái u postizanju dubokog i korisnog sna. Ovo ukljuƒçuje redukciju svjetlosti i buke, kao i osiguranje da je va≈° krevet udoban i podr≈æavajuƒái. Takoƒëer, va≈æno je paziti na prehranu i unos kofeina, ƒçesto vje≈æbati te poku≈°ati iƒái u krevet i buditi se u isto vrijeme svaki dan kako bi se regulirao cirkadijanski ritam. Dobar san mo≈æe pobolj≈°ati koncentraciju, produktivnost i takoƒëer igrati kljuƒçnu ulogu u regulaciji tjelesne te≈æine i smanjenju rizika od bolesti.",
  podrska:
    "Imunolo≈°ka podr≈°ka vrlo je va≈æna za jaƒçanje tjelesne obrane od raznih bolesti i infekcija. Odr≈æavanje sna≈ænog imunolo≈°kog sustava zahtijeva ravnote≈æu pravilne prehrane, redovitog vje≈æbanja, adekvatnog sna i manje stresa. Dodaci prehrani s vitaminima i mineralima poput vitamina C, D, E, cinka, selenija i drugih sna≈æni su imunomodulatori. Takoƒëer, probiotici mogu pru≈æiti va≈ænu podr≈°ku za imunolo≈°ki sustav jer veƒáina na≈°eg imuniteta zapravo dolazi iz crijeva. Va≈æno je posjetiti lijeƒçnika ili struƒçnjaka za prehranu prije poƒçetka bilo kakve prehrambene terapije.",
  plan: "Plan fiziƒçke aktivnosti od vitalne je va≈ænosti za odr≈æavanje dobrog zdravlja i forme. U idealnom sluƒçaju, taj plan bi trebao ukljuƒçivati razliƒçite aktivnosti koje se mije≈°aju tijekom tjedna. Kardio trening, poput trƒçanja, vo≈ænje biciklom ili brzog hodanja, obiƒçno se smatra osnovom bilo kojeg plana fiziƒçke aktivnosti. Osim toga, trening snage, kao ≈°to je dizanje utega, mo≈æe pomoƒái u izgradnji i odr≈æavanju mi≈°iƒáne mase. Fleksibilnost i balansirane vje≈æbe, poput joge, mogu pobolj≈°ati koordinaciju i smanjiti rizik od ozljeda. Cilj je biti aktivan barem 30 minuta dnevno, veƒáinom dana u tjednu.",
  uvod: "Nutritivni plan je prilagoƒëeni program ishrane koji se sastavlja kako bi podr≈æao specifiƒçne ciljeve pojedinca u pogledu zdravlja, fiziƒçke aktivnosti i ≈æivotnih navika. On uzima u obzir potrebe organizma za osnovnim nutrijentima ‚Äì poput ugljenih hidrata, proteina, masti, vitamina i minerala ‚Äì kako bi se postigao optimalan balans i pobolj≈°alo op≈°te stanje zdravlja. Nutritivni plan mo≈æe biti osmi≈°ljen za razliƒçite ciljne grupe, poput osoba koje ≈æele da izgube te≈æinu, poveƒáaju mi≈°iƒánu masu, pobolj≈°aju energiju ili unaprede zdravlje srca. On se bazira na nauƒçno potkrepljenim principima ishrane, s ciljem da pru≈æi odgovarajuƒáe koliƒçine hrane za postizanje odr≈æivih i dugoroƒçnih zdravstvenih koristi.",
  zakljucak:
    "Nutritivni plan je kljuƒçan alat za postizanje i odr≈æavanje optimalnog zdravlja. Pravilno balansiran plan ishrane poma≈æe u pobolj≈°anju fiziƒçkog zdravlja, poveƒáanju energije i smanjenju rizika od razliƒçitih bolesti. Prilagoƒëen svakom pojedincu, nutricionistiƒçki plan mo≈æe biti od pomoƒái u postizanju ciljeva poput mr≈°avljenja, pobolj≈°anja kondicije ili oƒçuvanja op≈°teg blagostanja. Uz pravilnu edukaciju i primenu, nutricionistiƒçki plan postaje temelj zdravog naƒçina ≈æivota koji doprinosi dugoroƒçnom fiziƒçkom i mentalnom zdravlju.",
};

//================
// Definisanje Zod ≈°eme za motivacioni uvod
const uvodSchema = z.object({
  prviPasus: z.string().min(1, "Prvi pasus je obavezan"),
  drugiPasus: z.string().min(1, "Drugi pasus je obavezan"),
});

// Za sad je ovde hadkodovano
const korisnik = {
  ime: "Marko Markoviƒá",
  datumRodjenja: "1985-06-15",
  visina: 180,
  tezina: 85,
  primcilj: "poveƒáanje mi≈°iƒáne mase",
  speccilj: "dobiti 5 kg mi≈°iƒáne mase u narednih 3 meseca",
  motivacija: "≈æelja da pobolj≈°a svoju fiziƒçku spremnost i zdravlje",
};

//Samo uvod
app.get("/ostali", async (req, res) => {
  const uvodPrompt = `
    Napi≈°i motivacioni uvod za ${korisnik.ime}, roƒëenog ${
    korisnik.datumRodjenja
  }, koji ima ${
    new Date().getFullYear() - new Date(korisnik.datumRodjenja).getFullYear()
  } godina, visinu ${korisnik.visina} cm i trenutnu te≈æinu ${
    korisnik.tezina
  } kg. Njegov/a primarni cilj ishrane je ${
    korisnik.primcilj
  }, sa specifiƒçnim ciljem da ${
    korisnik.speccilj
  }. Korisnik je motivisan da promeni svoje navike zato ≈°to ${
    korisnik.motivacija
  }.
    Prvi pasus treba da bude bogat, detaljan, sa puno informacija i inspiracije. Zapoƒçni ga sa motivacijom korisnika, navodeƒái specifiƒçne aspekte njegovog napretka. Koristi puno detalja i pro≈°iri odgovor, koristeƒái primere i detalje o njegovim naporima da poveƒáa mi≈°iƒánu masu. Neka odgovor bude ≈°to du≈æi, sa puno entuzijazma, podr≈°ke i divljenja.
    Drugi pasus neka naglasi va≈ænost dugoroƒçnog odr≈æavanja zdravih navika i koristi koje ƒáe korisnik imati, poput pobolj≈°anja zdravstvenog stanja, poveƒáane energije i boljeg kvaliteta ≈æivota. Uvod treba da bude pisan u drugom licu jednine, obraƒáajuƒái se direktno korisniku, i treba da ima podr≈æavajuƒái i inspirativan ton.
  `;

  try {
    const uvodResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: uvodPrompt }],
      max_tokens: 1500,
      temperature: 0.9, // Ma≈°tovitiji odgovor
      top_p: 1, // Veci broj reci
    });

    // Preƒçi≈°ƒáavanje rezultata
    let uvod =
      uvodResult.choices[0]?.message?.content?.trim() ||
      "Poƒçetak nije bio uspe≈°an.";
    uvod = uvod.replace(/[#!&*√º!_?-@**]/g, ""); // Preƒçi≈°ƒáavanje ne≈æeljenih karaktera

    // Podela generisanog uvoda na pasuse
    const [prviPasus, drugiPasus] = uvod
      .split("\n")
      .filter((line) => line.trim() !== "");

    // Validacija pomoƒáu Zod-a
    const parsedUvod = uvodSchema.safeParse({
      prviPasus: prviPasus,
      drugiPasus: drugiPasus,
    });

    if (parsedUvod.success) {
      // Ako je validacija uspe≈°na, ≈°aljemo odgovor
      res.json({
        prviPasus: parsedUvod.data.prviPasus,
        drugiPasus: parsedUvod.data.drugiPasus,
      });
    } else {
      // Ako postoji gre≈°ka u validaciji
      res.status(400).json({
        error: "Gre≈°ka u generisanju uvoda",
        details: parsedUvod.error.errors,
      });
    }
  } catch (error) {
    // Ako doƒëe do gre≈°ke tokom API poziva
    res.status(500).json({
      error: "Do≈°lo je do gre≈°ke pri generisanju motivacionog uvoda.",
      details: error.message,
    });
  }
});
//================

//Simple PDF
app.use("/test", async (req, res) => {
  try {
    const pdfDoc = new PDFDocument();

    // Registrujte fontove
    pdfDoc.registerFont(
      "OpenSans_Condensed-Regular",
      "./fonts/OpenSans_Condensed-Regular.ttf"
    );
    pdfDoc.registerFont(
      "OpenSans_Condensed-Bold",
      "./fonts/OpenSans_Condensed-Bold.ttf"
    );
    pdfDoc.font("OpenSans_Condensed-Regular"); // Postavite default font na regular

    // Novi objekat mydata
    const mydata = {
      odgovor: {
        voda: "Unos vode kljuƒçan je za pravilno funkcioniranje tijela i odr≈æavanje zdravlja. Tijelo ljudi se sastoji od oko 60% vode i svakodnevno gubi dio te tekuƒáine kroz znoj, urin i disanje. Preporuƒçeni dnevni unos vode varira, ali opƒáa preporuka je oko 2 litre dnevno, odnosno osam ƒça≈°a. Unos vode posebno treba poveƒáati tijekom vje≈æbanja ili kod visokih temperatura kada je gubitak vode kroz znojenje veƒái. Redoviti unos vode poma≈æe u probavi, regulaciji tjelesne temperature, podmazivanju zglobova i odr≈æavanju zdrave ko≈æe. Poremeƒáaji u unosu vode, poput dehidracije, mogu prouzroƒçiti ozbiljne zdravstvene probleme.",
        spavanje:
          "Pobolj≈°anje kvalitete spavanja mo≈æe znaƒçajno utjecati na na≈°e ukupno zdravlje i dobrobit. Nedostatak kvalitetnog sna mo≈æe dovesti do problema kao ≈°to su poveƒáani rizik od kroniƒçnih bolesti, pad koncentracije, umora i raspolo≈æenja. Nekoliko je naƒçina na koje mo≈æete pobolj≈°ati svoj san. Redovita tjelesna aktivnost mo≈æe pomoƒái u regulaciji va≈°ih bioritama i promicanju dubljeg i opu≈°tenijeg sna. Takoƒëer, izbjegavanje alkohola, kofeina i te≈°ke hrane nekoliko sati prije spavanja mo≈æe pobolj≈°ati kvalitetu sna. Dodatno, odr≈æavanje redovitog rasporeda spavanja, ƒçak i vikendom, mo≈æe pomoƒái u regulaciji unutarnjeg biolo≈°kog sata. Naposljetku, optimiziranje va≈°eg okru≈æenja za spavanje, ukljuƒçujuƒái udoban madrac i jastuk, tamnu, hladnu i tiho sobu mogu doslovno napraviti svijet razlike.",
        podrska:
          "Imunolo≈°ka podr≈°ka odnosi se na poticanje i jaƒçanje na≈°eg imunolo≈°kog sustava koji je zadu≈æen za obranu tijela od razliƒçitih bolesti. To se mo≈æe postiƒái uravnote≈æenom prehranom bogatom vitaminima i mineralima, redovitom tjelesnom aktivno≈°ƒáu, dovoljnom koliƒçinom sna i izbjegavanjem stresnih situacija. Takoƒëer, postoji niz suplemenata i biljnih pripravaka koji se koriste za dodatno jaƒçanje imunolo≈°kog sustava. Pravilna imunolo≈°ka podr≈°ka kljuƒçna je za oƒçuvanje i unapreƒëenje opƒáeg zdravstvenog stanja.",
        plan: "Fiziƒçka aktivnost ima brojne koristi za tijelo i um, doprinoseƒái boljem zdravlju i svakodnevnom raspolo≈æenju. Plan fiziƒçke aktivnosti stoga bi trebao biti dio na≈°e svakodnevnice. Kroz plan, cilj je postiƒái pravilnu ravnote≈æu izmeƒëu aerobnih, anaerobnih i fleksibilnosti vje≈æbi. \n\nPonedjeljkom se mo≈æete odluƒçiti za trƒçanje ili bicikliranje kako biste poveƒáali svoju izdr≈æljivost kroz kardio vje≈æbe. Utorkom biste mogli koristiti utege za jaƒçanje glavnih mi≈°iƒánih skupina. U srijedu mo≈æe biti dan za odmor. U ƒçetvrtak se mo≈æe izvesti raznovrsna serija pliometrijskih vje≈æbi za razvoj snage i agilnosti, a petak odabrati za pilates ili jogu za razvoj fleksibilnosti i koncentracije. Vikend mo≈æe biti posveƒáen aktivnostima na otvorenom poput planinarenja ili plivanja.\n\nIstaknite da je ovo samo primjer, zajedno s pravilnom prehranom i dovoljno sna, va≈° plan fiziƒçke aktivnosti treba biti prilagoƒëen va≈°im potrebama, moguƒánostima i ciljevima kako biste ostali motivirani i vidjeli kontinuirani napredak.",
        uvod: "Nutritivni plan je prilagoƒëeni program ishrane koji se sastavlja kako bi podr≈æao specifiƒçne ciljeve pojedinca u pogledu zdravlja, fiziƒçke aktivnosti i ≈æivotnih navika. On uzima u obzir potrebe organizma za osnovnim nutrijentima ‚Äì poput ugljenih hidrata, proteina, masti, vitamina i minerala ‚Äì kako bi se postigao optimalan balans i pobolj≈°alo op≈°te stanje zdravlja. Nutritivni plan mo≈æe biti osmi≈°ljen za razliƒçite ciljne grupe, poput osoba koje ≈æele da izgube te≈æinu, poveƒáaju mi≈°iƒánu masu, pobolj≈°aju energiju ili unaprede zdravlje srca. On se bazira na nauƒçno potkrepljenim principima ishrane, s ciljem da pru≈æi odgovarajuƒáe koliƒçine hrane za postizanje odr≈æivih i dugoroƒçnih zdravstvenih koristi.",
        zakljucak:
          " Nutritivni plan je kljuƒçan alat za postizanje i odr≈æavanje optimalnog zdravlja. Pravilno balansiran plan ishrane poma≈æe u pobolj≈°anju fiziƒçkog zdravlja, poveƒáanju energije i smanjenju rizika od razliƒçitih bolesti. Prilagoƒëen svakom pojedincu, nutricionistiƒçki plan mo≈æe biti od pomoƒái u postizanju ciljeva poput mr≈°avljenja, pobolj≈°anja kondicije ili oƒçuvanja op≈°teg blagostanja. Uz pravilnu edukaciju i primenu, nutricionistiƒçki plan postaje temelj zdravog naƒçina ≈æivota koji doprinosi dugoroƒçnom fiziƒçkom i mentalnom zdravlju.",
      },
      hol: {
        fizickoZdravlje:
          "Fiziƒçko zdravlje je osnovni aspekt holistiƒçkog pristupa i odnosi se na stanje tela i njegovu sposobnost da funkcioni≈°e optimalno. Ukljuƒçuje pravilnu ishranu, redovnu fiziƒçku aktivnost, dovoljno sna i odr≈æavanje zdrave telesne te≈æine. Fiziƒçko zdravlje podrazumeva i redovne lekarske preglede kako bi se pratile vitalne funkcije i rano otkrili potencijalni zdravstveni problemi.",
        zdraveNavike:
          "Zdrave navike igraju kljuƒçnu ulogu u odr≈æavanju op≈°teg blagostanja. One obuhvataju usvajanje dnevnih rutina koje podr≈æavaju zdravlje, kao ≈°to su uravnote≈æena ishrana bogata voƒáem i povrƒáem, adekvatna hidratacija, redovno ve≈æbanje, tehnike opu≈°tanja poput meditacije ili joge, i izbegavanje ≈°tetnih supstanci poput alkohola i duvana. Razvijanje ovih navika doprinosi dugoroƒçnoj vitalnosti i smanjenju rizika od hroniƒçnih bolesti.",
        preventivnaNega:
          "Preventivna nega je kljuƒçni aspekt holistiƒçkog pristupa i ukljuƒçuje sve mere koje se preduzimaju kako bi se spreƒçio razvoj bolesti ili otkrili zdravstveni problemi u ranoj fazi. To podrazumeva vakcinacije, redovne zdravstvene preglede, skrining testove, kao i edukaciju o zdravim ≈æivotnim stilovima. Cilj preventivne nege je da se smanji potreba za leƒçenjem i pobolj≈°a kvalitet ≈æivota.",
        odrzavanjeBilansa:
          "Odr≈æavanje bilansa u holistiƒçkom pristupu znaƒçi postizanje i odr≈æavanje harmonije izmeƒëu razliƒçitih aspekata ≈æivota ‚Äî fiziƒçkog, mentalnog, emocionalnog i duhovnog. To podrazumeva upravljanje stresom, balansiranje izmeƒëu posla i privatnog ≈æivota, negovanje odnosa sa drugima i rad na liƒçnom razvoju. Kada su svi ovi aspekti u ravnote≈æi, osoba je sposobnija da se nosi sa izazovima i ≈æivi ispunjenim ≈æivotom.",
      },
      message: {
        days: [
          {
            dan: "Dan 1",
            rucak: {
              opis: "Grilovana piletina sa povrƒáem",
              sastojci: "Pileƒái file...",
              instrukcije: "Zagrejte gril tiganj...",
              kalorije: 450,
            },
            uzina2: {
              opis: "Jogurt sa orasima",
              sastojci: "Grƒçki jogurt...",
              instrukcije: "Pome≈°ajte grƒçki jogurt...",
              kalorije: 250,
            },
            vecera: {
              opis: "Losos na ≈æaru sa spanaƒáem",
              sastojci: "Filet lososa...",
              instrukcije: "Zagrejte tiganj...",
              kalorije: 500,
            },
          },
          {
            dan: "Dan 2",
            rucak: {
              opis: "Quinoa salata sa avokadom",
              sastojci: "Quinoa...",
              instrukcije: "Skuvajte quinou...",
              kalorije: 550,
            },
            uzina2: {
              opis: "Smoothie od banana",
              sastojci: "Banana...",
              instrukcije: "Sve sastojke stavite u blender...",
              kalorije: 300,
            },
            vecera: {
              opis: "ƒÜuretina u sosu",
              sastojci: "Mlevena ƒáuretina...",
              instrukcije: "Na tiganju sa malo ulja...",
              kalorije: 480,
            },
          },
        ],
      },
    };

    // Dodaj uvodni tekst
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Nutricionistiƒçki izve≈°taj", { align: "center" });
    pdfDoc.moveDown(2);
    pdfDoc
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.odgovor.uvod);
    pdfDoc.addPage();

    // Dodaj obroke po danima, svaki na zasebnoj stranici u obliku tabele
    mydata.message.days.forEach((day) => {
      pdfDoc.fontSize(14).font("OpenSans_Condensed-Bold").text(day.dan);
      pdfDoc.moveDown(1);

      // Pozicije i ≈°irine kolona tabele
      const startX = 50;
      const startY = pdfDoc.y;
      const columnWidths = [80, 150, 150, 100, 60];
      const rowHeight = 60;

      // Dodaj zaglavlja kolona
      const headers = ["Obrok", "Opis", "Sastojci", "Instrukcije", "Kalorije"];
      headers.forEach((header, index) => {
        pdfDoc
          .rect(
            startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0),
            startY,
            columnWidths[index],
            rowHeight / 2
          )
          .stroke();
        pdfDoc
          .font("OpenSans_Condensed-Bold")
          .fontSize(10)
          .text(
            header,
            startX +
              columnWidths.slice(0, index).reduce((a, b) => a + b, 0) +
              5,
            startY + 5,
            { width: columnWidths[index] - 10, align: "center" }
          );
      });

      // Crtanje linije ispod zaglavlja
      pdfDoc
        .moveTo(startX, startY + rowHeight / 2)
        .lineTo(
          startX + columnWidths.reduce((a, b) => a + b, 0),
          startY + rowHeight / 2
        )
        .stroke();

      // Dodaj redove za svaki obrok
      let currentY = startY + rowHeight / 2;
      ["rucak", "uzina2", "vecera"].forEach((mealType) => {
        const meal = day[mealType];
        if (meal) {
          // Dodaj ƒáelije u redovima
          pdfDoc.rect(startX, currentY, columnWidths[0], rowHeight).stroke();
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(
              mealType.charAt(0).toUpperCase() + mealType.slice(1),
              startX + 5,
              currentY + 5
            );

          pdfDoc
            .rect(
              startX + columnWidths[0],
              currentY,
              columnWidths[1],
              rowHeight
            )
            .stroke();
          pdfDoc.text(meal.opis, startX + columnWidths[0] + 5, currentY + 5, {
            width: columnWidths[1] - 10,
          });

          pdfDoc
            .rect(
              startX + columnWidths[0] + columnWidths[1],
              currentY,
              columnWidths[2],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.sastojci,
            startX + columnWidths[0] + columnWidths[1] + 5,
            currentY + 5,
            { width: columnWidths[2] - 10 }
          );

          pdfDoc
            .rect(
              startX + columnWidths[0] + columnWidths[1] + columnWidths[2],
              currentY,
              columnWidths[3],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.instrukcije,
            startX + columnWidths[0] + columnWidths[1] + columnWidths[2] + 5,
            currentY + 5,
            { width: columnWidths[3] - 10 }
          );

          pdfDoc
            .rect(
              startX +
                columnWidths[0] +
                columnWidths[1] +
                columnWidths[2] +
                columnWidths[3],
              currentY,
              columnWidths[4],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.kalorije.toString(),
            startX +
              columnWidths[0] +
              columnWidths[1] +
              columnWidths[2] +
              columnWidths[3] +
              5,
            currentY + 5,
            { width: columnWidths[4] - 10, align: "center" }
          );

          currentY += rowHeight;
        }
      });

      pdfDoc.addPage();
    });

    // Dodaj sekciju "Fiziƒçko zdravlje" i druge iz holistiƒçkog pristupa
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Fiziƒçko zdravlje");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.hol.fizickoZdravlje);
    pdfDoc.addPage();

    Object.entries(mydata.hol).forEach(([title, content]) => {
      if (title !== "fizickoZdravlje") {
        pdfDoc
          .fontSize(18)
          .font("OpenSans_Condensed-Bold")
          .text(
            title.charAt(0).toUpperCase() +
              title.slice(1).replace(/([A-Z])/g, " $1")
          );
        pdfDoc
          .moveDown(1)
          .fontSize(12)
          .font("OpenSans_Condensed-Regular")
          .text(content);
        pdfDoc.addPage();
      }
    });

    // Dodaj zakljuƒçak
    pdfDoc.fontSize(18).font("OpenSans_Condensed-Bold").text("Zakljuƒçak");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.odgovor.zakljucak);

    // Kreirajte PDF i saƒçuvajte ga
    const fileName = `Nutricionisticki_Izvestaj_${Date.now()}_${Math.floor(
      Math.random() * 100000000000
    )}.pdf`;
    const filePath = path.join(__dirname, "files", fileName);
    const chunks = [];

    pdfDoc.on("data", (chunk) => chunks.push(chunk));
    pdfDoc.on("end", async () => {
      await fs.promises.writeFile(filePath, Buffer.concat(chunks));

      // Snimanje u bazu podataka
      try {
        await PdfSchema.create({
          title: "Nutricionistiƒçki Izve≈°taj",
          pdf: fileName,
          path: filePath,
        });
        console.log("PDF report saved successfully.");
        res.download(filePath);
      } catch (err) {
        console.error("Error saving PDF to database:", err);
        res.status(500).send("Error saving PDF report.");
      }
    });

    pdfDoc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("An error occurred while generating the PDF.");
  }
});

//Formatiranje vremena za pdf
function getCurrentTime() {
  let now = new Date();

  now.setUTCHours(now.getUTCHours() + 1);

  let hours = now.getUTCHours();
  let minutes = now.getUTCMinutes();
  let seconds = now.getUTCSeconds();

  hours = hours < 10 ? "0" + hours : hours;
  minutes = minutes < 10 ? "0" + minutes : minutes;
  seconds = seconds < 10 ? "0" + seconds : seconds;

  return `${hours}:${minutes}:${seconds}`;
}

//Formatiranje datuma za pdf
// function formatDate(date) {
//   const day = String(date.getDate()).padStart(2, "0");  19.11.2024
//   const month = String(date.getMonth() + 1).padStart(2, "0");
//   const year = date.getFullYear();

//   return `${day}-${month}-${year}`; klijentData:
// }

function formatDate(date) {
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const seconds = String(date.getSeconds()).padStart(2, "0");
  const milliseconds = String(date.getMilliseconds()).padStart(3, "0");

  return `${day}-${month}-${year}_${hours}-${minutes}-${seconds}-${milliseconds}`;
}

//Proveravamo da li primarni cilj ima razmak
function replaceSpacesWithUnderscore(inputString) {
  if (inputString.includes(" ")) {
    return inputString.replace(/\s+/g, "_");
  }
  return inputString;
}

//Test - sa fetchevima
app.use("/test1", async (req, res) => {
  let { brojDana, obroci, data_ } = req.body;

  let brojDanaInt = Number(brojDana);
  const pdfDoc = new PDFDocument();

  // Registrujte fontove
  pdfDoc.registerFont(
    "OpenSans_Condensed-Regular",
    "./fonts/OpenSans_Condensed-Regular.ttf"
  );
  pdfDoc.registerFont(
    "OpenSans_Condensed-Bold",
    "./fonts/OpenSans_Condensed-Bold.ttf"
  );
  pdfDoc.font("OpenSans_Condensed-Regular"); // Postavite default font na regular

  // Novi objekat mydata
  try {
    // prompt - uvod
    const uvodResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki uvodni text o ishrani sa primarnim ciljem: ${data_.primcilj}`,
        },
      ],
      max_tokens: 1000,
    });
    let uvod = uvodResult.choices[0]?.message?.content?.trim() || kratki.uvod;
    uvod = uvod.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - zakljucak
    const zakljucakResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki zakljuƒçak text o ishrani sa primarnim ciljem: ${data_.primcilj}`,
        },
      ],
      max_tokens: 1000,
    });
    let zakljucak =
      zakljucakResult.choices[0]?.message?.content?.trim() || kratki.zakljucak;
    zakljucak = zakljucak.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - plan fizicke aktivnosti
    const planFizAktResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o planu fiziƒçke aktivnosti",
        },
      ],
      max_tokens: 1000,
    });
    let planFizAkt =
      planFizAktResult.choices[0]?.message?.content?.trim() || kratki.plan;
    planFizAkt = planFizAkt.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('planFizAkt:', planFizAkt);

    // prompt - imunolo≈°ka podr≈°ka
    const podrzkaImunResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki tekst o imunolo≈°ku podr≈°ku",
        },
      ],
      max_tokens: 1000,
    });
    let podrzkaImun =
      podrzkaImunResult.choices[0]?.message?.content?.trim() || kratki.podrska;
    podrzkaImun = podrzkaImun.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('podrzkaImun:', podrzkaImun);

    // prompt - savet za spavanje
    const spavanjeSavetResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o pobolj≈°anje spavanja",
        },
      ],
      max_tokens: 1000,
    });
    let spavanjeSavet =
      spavanjeSavetResult.choices[0]?.message?.content?.trim() ||
      kratki.spavanje;
    spavanjeSavet = spavanjeSavet.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('spavanjeSavet:', spavanjeSavet);

    // prompt - preporuka za unos vode
    const prepVodaResult = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "user", content: "Kreiraj mi kratki text o unos vode" },
      ],
      max_tokens: 1000,
    });
    let prepVoda =
      prepVodaResult.choices[0]?.message?.content?.trim() || kratki.voda;
    prepVoda = prepVoda.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('prepVoda:', prepVoda);

    // Kreiranje odgovora
    const odgovor = {
      voda: prepVoda,
      spavanje: spavanjeSavet,
      podrska: podrzkaImun,
      plan: planFizAkt,
      uvod: uvod,
      zakljucak: zakljucak,
    };

    //Za ostale upite
    planShema.parse(odgovor);

    //Za dane
    if (!brojDanaInt || typeof brojDanaInt !== "number") {
      return res
        .status(400)
        .json({ message: "Molimo unesite validan broj dana." });
    }

    const validObroci = ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];
    const chosenObroci =
      Array.isArray(obroci) &&
      obroci.every((obrok) => validObroci.includes(obrok))
        ? obroci
        : ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];

    ["doruƒçak", "u≈æina", "ruƒçak", "u≈æina", "veƒçera"];

    const obrociPrompt = chosenObroci
      .map((obrok) => {
        switch (obrok) {
          case "doruƒçak":
            return "doruƒçak";
          case "u≈æina1":
            return "u≈æina";
          case "ruƒçak":
            return "ruƒçak";
          case "u≈æina2":
            return "druga u≈æina";
          case "veƒçera":
            return "veƒçera";
          default:
            return obrok;
        }
      })
      .join(", ");

    const DaySchema = generateDaySchema(chosenObroci);
    const FullWeekSchema = z.object({
      days: z.array(DaySchema),
    });
    //- Obrok treba da sadr≈æi realne i dostupne namirnice iz srbije.
    console.log("Ukupna kalorijska vrednost: ", data_.ukupnaKalVred);
    console.log("Tdee: ", data_.tdee);

    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06",
      // messages: [
      //   {
      //     role: "system",
      //     content: "Ti si korisni nutricionista. Generi≈°i plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu. Nazivi dana treba da budu 'Dan 1', 'Dan 2', i tako dalje, a ne imena dana u nedelji.",
      //   },
      //   {
      //     role: "user",
      //     content: `Napravi plan ishrane za ${brojDanaInt} dana sa sledeƒáim obrocima: ${obrociPrompt}. Primarni cilj je ${data_.primcilj}, moja ukupna kalorijska vrednost unosa hrane treba da iznosi taƒçno ${data_.ukupnaKalVred} kcal za taj dan, naminice koje preferiram u ishrani: ${data_.voljeneNamirnice}, naminice koje ne preferiram u ishrani: ${data_.neVoljeneNamirnice}. Nemoj ukljuƒçivati obroke koji nisu navedeni.`,
      //   },
      // ],
      messages: [
        {
          role: "system",
          content: `
              Ti si nutricionista specijalizovan za precizne planove ishrane. Tvoja odgovornost je da generi≈°e≈° plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu.
              
              Pravila:
              - Nemoj da raspodelis kalorijsku vrednost ravnomerno izmeƒëu obroka.
              - Koristi samo zadate namirnice i izbegavaj iskljuƒçene namirnice.
              - Nazivi dana treba da budu 'Dan 1', 'Dan 2', itd., bez imena dana u nedelji.
              - Za svaki obrok navedi taƒçnu kalorijsku vrednost.
              `,
        },
        {
          role: "user",
          content: `
              Napravi plan ishrane za ${brojDanaInt} dana sa sledeƒáim obrocima: ${obrociPrompt}.
              
              Primarni cilj: ${data_.primcilj}.
              Ukupna kalorijska vrednost: ${data_.ukupnaKalVred} kcal po danu.
              Preferirane namirnice: ${data_.voljeneNamirnice}.
              Izbegavati sledeƒáe namirnice: ${data_.neVoljeneNamirnice}.
              
              Svi obroci moraju imati precizne kalorijske vrednosti koje doprinose ukupnom dnevnom unosu kalorija. Ne ukljuƒçuj obroke koji nisu navedeni.
              `,
        },
      ],
      response_format: zodResponseFormat(FullWeekSchema, "mealPlan"),
    });

    let message = completion.choices[0]?.message.parsed; //OVDE MOZDA PUKNE! ZBOG KARAKTERA
    // message = message.replace(/[#!&*√º!_?-@**]/g, "");  //OVDE

    // FullWeekSchema.parse(hol);

    //Za holisticki pristup
    const holPristupResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "You are an AI that provides detailed and clearly structured explanations on holistic approaches to health and wellness.",
        },
        {
          role: "user",
          content: `Molim te da pru≈æi≈° jasan i organizovan opis holistiƒçkog pristupa zdravlju, podeljen u posebne odeljke:
                      1. Fiziƒçko zdravlje: Kratak opis
                      2. Zdrave navike: Kratak opis
                      3. Preventivna nega: Kratak opis
                      4. Odr≈æavanje bilansa: Kratak opis
              Neka odgovori budu jasno strukturirani sa taƒçno definisanim odeljcima: 
              '1. Fiziƒçko zdravlje:', 
              '2. Zdrave navike:', 
              '3. Preventivna nega:', 
              '4. Odr≈æavanje bilansa:' sa dvotaƒçkom na kraju svakog naslova.`,
        },
      ],
      temperature: 0.7,
      max_tokens: 700,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });

    // Generisani odgovor
    let odgovor1 = holPristupResult.choices[0].message.content;
    odgovor1 = odgovor1.replace(/[#!&*√º!_?-@**]/g, "");

    // Provera da li su svi odeljci prisutni u odgovoru
    if (
      !odgovor1.includes("1. Fiziƒçko zdravlje:") ||
      !odgovor1.includes("2. Zdrave navike:") ||
      !odgovor1.includes("3. Preventivna nega:") ||
      !odgovor1.includes("4. Odr≈æavanje bilansa:")
    ) {
      return res
        .status(400)
        .json({ error: "Odgovor nije u ispravnom formatu." });
    }

    //Defoltno ako nema defoltne vrenosti
    const defaultHol = {
      fizickoZdravlje:
        "Fiziƒçko zdravlje se odnosi na dobrobit i funkcionalnost na≈°eg tela. To ukljuƒçuje stanje na≈°ih unutra≈°njih organa, mi≈°iƒáa, kostiju, kao i na≈°u telesnu kondiciju i snagu. Holistiƒçki pristup fiziƒçkom zdravlju prepoznaje da su svi ovi aspekti meƒëusobno povezani i da su svi od su≈°tinskog znaƒçaja za sveukupno zdravlje. To znaƒçi da se fokusiramo ne samo na leƒçenje simptoma, veƒá i na razumijevanje i tretiranje uzroka.",
      zdraveNavike:
        "Zdrave navike su pona≈°anja koja ƒçesto praktikujemo i koja pozitivno utiƒçu na na≈°e fiziƒçko, emocionalno i mentalno zdravlje. To mo≈æe ukljuƒçivati redovnu fiziƒçku aktivnost, uravnote≈æenu ishranu, dovoljno sna, hidrataciju, kao i izbegavanje ≈°tetnih navika poput pu≈°enja ili prekomernog konzumiranja alkohola. Holistiƒçki pristup zdravim navikama prepoznaje da su sve ove aktivnosti povezane i da promena jedne navike mo≈æe imati ≈°irok spektar uticaja na na≈°e zdravlje.",
      preventivnaNega:
        "Preventivna nega je pristup zdravlju koji se fokusira na spreƒçavanje bolesti i stanja pre nego ≈°to se pojave, umesto da se bave samo njihovim leƒçenjem. To mo≈æe ukljuƒçivati redovne lekarske preglede, vakcinaciju, skrining za odreƒëene bolesti, kao i voƒëenje zdravog ≈æivotnog stila. Holistiƒçki pristup prepoznaje va≈ænost preventivne nege u odr≈æavanju dugoroƒçnog zdravlja i dobrobiti.",
      odrzavanjeBilansa:
        "Odr≈æavanje bilansa odnosi se na pronala≈æenje ravnote≈æe izmeƒëu razliƒçitih aspekata na≈°eg ≈æivota, ukljuƒçujuƒái fiziƒçko zdravlje, emocionalno blagostanje, socijalne odnose, duhovnost i rad. Holistiƒçki pristup odr≈æavanju bilansa prepoznaje da su svi ovi aspekti meƒëusobno povezani i da promene u jednom aspektu mogu uticati na druge. To znaƒçi da se te≈æi za ravnote≈æom u svim oblastima ≈æivota, a ne samo u jednoj.",
    };

    // Podela odgovora u odgovarajuƒáu strukturu
    const hol = {
      fizickoZdravlje:
        odgovor1
          .split("1. Fiziƒçko zdravlje:")[1]
          .split("2. Zdrave navike:")[0]
          .trim() || defaultHol.fizickoZdravlje,
      zdraveNavike:
        odgovor1
          .split("2. Zdrave navike:")[1]
          .split("3. Preventivna nega:")[0]
          .trim() || defaultHol.zdraveNavike,
      preventivnaNega:
        odgovor1
          .split("3. Preventivna nega:")[1]
          .split("4. Odr≈æavanje bilansa:")[0]
          .trim() || defaultHol.preventivnaNega,
      odrzavanjeBilansa:
        odgovor1.split("4. Odr≈æavanje bilansa:")[1].trim() ||
        defaultHol.odrzavanjeBilansa,
    };

    // Validacija odgovora prema Zod shemi
    holPristupShema.parse(hol);

    let mydata = {
      odgovor,
      hol,
      message,
    };
    // let data_ = { id, tezina, visina, pol, primcilj, specilj, godine, dijagnoza, ucestBr, navikeUish, namirnice, voljeneNamirnice, neVoljeneNamirnice, ukupnaKalVred, selectedValueBrDana, tdee, bmi, kuk,vrat,struk,motiv,nivoAkt,vrstaFiz,alerg,pus,alk,datumRodjenja }
    // Dodaj metadata
    pdfDoc
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(`${data_?.ime || ""} ${data_?.prezime || ""}`, { x: 10, y: 30 })
      .text(`TDEE:${data_?.tdee || ""} kcal/dan`, { x: 10, y: 50 })
      .text(`BMI:${data_?.bmi || ""} kg/m2`, { x: 10, y: 70 })
      .text(
        `Ukupna kalorijska vrednost:${data_?.ukupnaKalVred || ""} kcal/dan`,
        { x: 10, y: 90 }
      );
    // .text(`BMR:${data_?.bmrValue || ""} kcal/dan`, { x: 10, y: 90 });

    // Dodaj sliku na desnoj strani
    pdfDoc.image("./public/logoo.png", 500, 50, { width: 50, height: 50 }); // Slika pozicionirana na desnoj strani (x: 500 je pribli≈æno desna ivica)
    pdfDoc.moveDown(1);

    // Dodaj hadkodovani naslov
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Nutricionistiƒçki izve≈°taj", { align: "center" });
    pdfDoc.moveDown(1);
    // Dodaj uvodni tekst
    pdfDoc
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.odgovor.uvod);
    pdfDoc.addPage();

    // Dodaj obroke po danima, svaki na zasebnoj stranici u obliku tabele
    mydata.message.days.forEach((day) => {
      pdfDoc.fontSize(14).font("OpenSans_Condensed-Bold").text(day.dan);
      pdfDoc.moveDown(1);

      // Pozicije i ≈°irine kolona tabele
      const startX = 50;
      const startY = pdfDoc.y;
      const columnWidths = [80, 150, 150, 100, 60];
      const rowHeight = 60;

      // Dodaj zaglavlja kolona
      const headers = ["Obrok", "Opis", "Sastojci", "Instrukcije", "Kalorije"];
      headers.forEach((header, index) => {
        pdfDoc
          .rect(
            startX + columnWidths.slice(0, index).reduce((a, b) => a + b, 0),
            startY,
            columnWidths[index],
            rowHeight / 2
          )
          .stroke();
        pdfDoc
          .font("OpenSans_Condensed-Bold")
          .fontSize(10)
          .text(
            header,
            startX +
              columnWidths.slice(0, index).reduce((a, b) => a + b, 0) +
              5,
            startY + 5,
            { width: columnWidths[index] - 10, align: "center" }
          );
      });

      // Crtanje linije ispod zaglavlja
      pdfDoc
        .moveTo(startX, startY + rowHeight / 2)
        .lineTo(
          startX + columnWidths.reduce((a, b) => a + b, 0),
          startY + rowHeight / 2
        )
        .stroke();

      // Dodaj redove za svaki obrok
      let currentY = startY + rowHeight / 2;
      Object.keys(day).forEach((mealType) => {
        if (mealType !== "dan") {
          const meal = day[mealType];
          pdfDoc.rect(startX, currentY, columnWidths[0], rowHeight).stroke();
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(
              mealType.charAt(0).toUpperCase() + mealType.slice(1),
              startX + 5,
              currentY + 5
            );

          pdfDoc
            .rect(
              startX + columnWidths[0],
              currentY,
              columnWidths[1],
              rowHeight
            )
            .stroke();
          pdfDoc.text(meal.opis, startX + columnWidths[0] + 5, currentY + 5, {
            width: columnWidths[1] - 10,
          });

          pdfDoc
            .rect(
              startX + columnWidths[0] + columnWidths[1],
              currentY,
              columnWidths[2],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.sastojci,
            startX + columnWidths[0] + columnWidths[1] + 5,
            currentY + 5,
            { width: columnWidths[2] - 10 }
          );

          pdfDoc
            .rect(
              startX + columnWidths[0] + columnWidths[1] + columnWidths[2],
              currentY,
              columnWidths[3],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.instrukcije,
            startX + columnWidths[0] + columnWidths[1] + columnWidths[2] + 5,
            currentY + 5,
            { width: columnWidths[3] - 10 }
          );

          pdfDoc
            .rect(
              startX +
                columnWidths[0] +
                columnWidths[1] +
                columnWidths[2] +
                columnWidths[3],
              currentY,
              columnWidths[4],
              rowHeight
            )
            .stroke();
          pdfDoc.text(
            meal.kalorije.toString(),
            startX +
              columnWidths[0] +
              columnWidths[1] +
              columnWidths[2] +
              columnWidths[3] +
              5,
            currentY + 5,
            { width: columnWidths[4] - 10, align: "center" }
          );

          currentY += rowHeight;
        }
      });

      pdfDoc.addPage();
    });

    // Dodaj sekciju "Fiziƒçko zdravlje" i druge iz holistiƒçkog pristupa
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Fiziƒçko zdravlje");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.hol.fizickoZdravlje);
    pdfDoc.addPage();

    Object.entries(mydata.hol).forEach(([title, content]) => {
      if (title !== "fizickoZdravlje") {
        pdfDoc
          .fontSize(18)
          .font("OpenSans_Condensed-Bold")
          .text(
            title.charAt(0).toUpperCase() +
              title.slice(1).replace(/([A-Z])/g, " $1")
          );
        pdfDoc
          .moveDown(1)
          .fontSize(12)
          .font("OpenSans_Condensed-Regular")
          .text(content);
        pdfDoc.addPage();
      }
    });

    // Dodaj zakljuƒçak
    pdfDoc.fontSize(18).font("OpenSans_Condensed-Bold").text("Zakljuƒçak");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.odgovor.zakljucak);

    // Kreirajte PDF i saƒçuvajte ga
    const fileName = `Nutricionisticki_Izvestaj_${Date.now()}_${Math.floor(
      Math.random() * 100000000000
    )}.pdf`; //
    const filePath = path.join(__dirname, "files", fileName);
    const chunks = [];

    pdfDoc.on("data", (chunk) => chunks.push(chunk));
    pdfDoc.on("end", async () => {
      await fs.promises.writeFile(filePath, Buffer.concat(chunks));

      // Snimanje u bazu podataka
      const today = new Date();
      const formattedDate = today.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      }); //Za danasnji dan

      const today1 = new Date();
      today1.setDate(today1.getDate() + 1); // Dodajemo jedan dan
      const formattedDatePlus1 = today1.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });

      const todayKraj = new Date();
      todayKraj.setDate(todayKraj.getDate() + data_.selectedValueBrDana + 1); // Dodajemo izabrani broj dana
      const formattedDateKraj = todayKraj.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });

      let klijentData = {
        tez: data_.tezina,
        visina: data_.visina || "",
        primCilj: data_.primcilj || "",
        specCilj: data_.specilj || "",
        motiv: data_.motiv || "",
        nivoAkt: data_.nivoAkt || "",
        datumRodj: data_.datumRodjenja || "",
        tdee: data_.tdee || "",
        vrstaFiz: data_.vrstaFiz || "",
        struk: data_.struk || "",
        kuk: data_.kuk || "",
        krv: data_.krvGru || "",
        dijag: data_.dijagnoza || "",
        alerg: data_.alerg || "",
        ish: data_.selectedIshranaNaziv || "",
        obr: data_.ucestBr || "",
        pus: data_.pus || "",
        alk: data_.alk || "",
        ukupnaKalVred: data_.ukupnaKalVred || "",
        bmi: data_.bmi || "",
        bmrValue: data_.bmrValue || "",
      };

      try {
        const vreme = getCurrentTime();
        await PdfSchema.create({
          title: data_.primcilj,
          pdf: fileName,
          idKlijenta: data_.id,
          datumKreir: formattedDate,
          datumPoc: formattedDatePlus1,
          datumKraj: formattedDateKraj,
          status: "Aktivan",
          tip: data_.selectedValueBrDana,
          vreme,
          klijentData,
        });
        console.log("PDF report saved successfully.");

        let foundUser = await User.findOne({ mail: data_.email }).exec();

        if (!foundUser) {
          return res.status(401).json({ message: "Korisnik nije nadjen" });
        }

        // const secret = process.env.JWT_SECRET + foundUser.password;
        // const token = jwt.sign(
        //   { id: foundUser._id, email: foundUser.mail },
        //   secret,
        //   {
        //     expiresIn: "5m",
        //   }
        // );

        //Send email
        let link = `https://13.50.180.98:3000/dash/user/${foundUser._id}`; //Zameni localhost sa lajvom

        const transporter = nodemailer.createTransport({
          service: "gmail",
          host: "smtp.gmail.email",
          port: 587,
          secure: false,
          auth: {
            user: "office@nutritrans.com",
            pass: "jezq ddqo aynu qucx",
          },
        });

        var mailOptions = {
          from: "office@nutritrans.com",
          to: data_.email,
          subject: "Generisanje Izve≈°taja",
          // text: link,
          html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
                      <h1 style="color: #333;">Uspe≈°no kreirana ishrana!</h1>
                      <p style="color: #555;">Va≈° izve≈°taj je u obliku PDF-a, kliknite dole da bi ste ga pogledali</p>
                      <a href="${link}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Idi na aplikaciju</a>
                      <p style="color: #555; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj mail, Hvala.</p>
                  </div>`,
        };

        transporter.sendMail(mailOptions, function (error, info) {
          if (error) {
            // console.log(error);
            res.status(400).json({ message: `Nije uspelo slanje na mail` });
          } else {
            res.status(200).json({
              message: `Obavestenje za kreiran pdf poslato na ${email}`,
            });
            // console.log("Email sent: " + info.response);
          }
        });

        res.json({
          status: "ok",
          message: "PDF je uspe≈°no generisan i saƒçuvan.",
        });
      } catch (err) {
        console.error("Error saving PDF to database:", err);
        res.status(500).send("Error saving PDF report.");
      }
    });

    pdfDoc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("An error occurred while generating the PDF.");
  }
});

const nivoiFizickihAktivnosti = {
  sedentarni: {
    naziv: "Sedentaran",
    faktorAktivnosti: 1.2,
  },
  laganaAktivnost: {
    naziv: "Lagano aktivan",
    faktorAktivnosti: 1.375,
  },
  umerenaAktivnost: {
    naziv: "Umereno aktivan",
    faktorAktivnosti: 1.55,
  },
  intenzivnaAktivnost: {
    naziv: "Veoma aktivan",
    faktorAktivnosti: 1.725,
  },
  vrloIntenzivnaAktivnost: {
    naziv: "Ekstremno aktivan",
    faktorAktivnosti: 1.9,
  },
};

function getNivoFizickeAktivnosti(faktorAktivnosti) {
  if (typeof faktorAktivnosti === "string") {
    faktorAktivnosti = parseFloat(faktorAktivnosti);
  }
  for (let nivo in nivoiFizickihAktivnosti) {
    if (nivoiFizickihAktivnosti[nivo].faktorAktivnosti === faktorAktivnosti) {
      return nivoiFizickihAktivnosti[nivo].naziv;
    }
  }
  return "Nepoznat nivo aktivnosti"; // Ako faktor aktivnosti nije pronaƒëen
}

//Neki test za bazu
app.get("/baza", async (req, res) => {
  try {
    // const specCiljevi = await Ciljevi.find(
    //   { tip: "specCilj" },
    //   { _id: 1, naziv: 1 }
    // ).lean();

    // const specCiljeviSaStringId = specCiljevi.map((cilj) => ({
    //   ...cilj,
    //   _id: cilj._id.toString(), // Konverzija u string
    // }));

    // console.log("Svi ciljevi => ", specCiljevi);
    // console.log("Nazivi => ", specCiljeviSaStringId); 8 imam 14

    let glutenListId = [
      "671f82735997900563cead4c",
      "671f829b5997900563cead5b",
      "671f82b35997900563cead6a",
      "671f82c75997900563cead79",
      "671f82e45997900563cead88",
      "671f83c65997900563ceade7",
      "671f83e85997900563ceadf6",
      "671f840a5997900563ceae05",
      "671f84315997900563ceae14",
      "671f84755997900563ceae32",
      "671f849a5997900563ceae41",
      "671f84b55997900563ceae50",
    ];

    const objectIds = glutenListId.map((id) => new mongoose.Types.ObjectId(id));

    Namirnica.find({ _id: { $in: objectIds } }, { naziv: 1, _id: 0 })
      .lean()
      .then((namirnice) => {
        console.log(namirnice);
      })
      .catch((err) => {
        console.error(err);
      });
  } catch (error) {
    console.error("Error fetching SpecCiljevi:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

//Test za dane
app.get("/dani", async (req, res) => {
  const pdfDoc = new PDFDocument();

  const ObrokSchema = z.object({
    opis: z.string(),
    sastojci: z.string(),
    instrukcije: z.string(),
    kalorije: z.number(),
    cena: z.number(),
    nutritivna_vrednost: z.string(),
    Makronutrijenti: z.object({
      Proteini: z.number(),
      Ugljeni_hidrati: z.number(),
      Masti: z.number(),
    }),
  });

  const kreirajDanSchema = (chosenObroci) => {
    const daySchemaDefinition = { dan: z.string() };

    if (chosenObroci.includes("doruƒçak"))
      daySchemaDefinition.dorucak = ObrokSchema;
    if (chosenObroci.includes("uzina1"))
      daySchemaDefinition.uzina1 = ObrokSchema;
    if (chosenObroci.includes("ruƒçak")) daySchemaDefinition.rucak = ObrokSchema;
    if (chosenObroci.includes("uzina2"))
      daySchemaDefinition.uzina2 = ObrokSchema;
    if (chosenObroci.includes("veƒçera"))
      daySchemaDefinition.vecera = ObrokSchema;

    return z.object(daySchemaDefinition);
  };

  try {
    const chosenObroci = ["doruƒçak", "uzina1", "ruƒçak", "veƒçera", "uzina2"];
    const DanSchema = kreirajDanSchema(chosenObroci);

    // console.log("Generated DanSchema:", DanSchema.shape);

    const SedmicniPlanSchema = z.object({
      days: z.array(DanSchema),
    });

    //Old
    let daniPredprompt = `
      Ti si nutricionista specijalizovan za precizne planove ishrane. Tvoja odgovornost je da generi≈°e≈° plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu.
      
      Pravila:
      - Ukupna dnevna kalorijska vrednost mora biti precizno rasporeƒëena u skladu sa zadatim brojem obroka.
      - Ne rasporeƒëuj kalorije ravnomerno, veƒá koristi precizne procente raspodele, koji su definisani u korisniƒçkom zahtevu.
      - Minimalna tolerancija odstupanja u kalorijama: ¬±2%, kako bi plan ostao realistiƒçan
      - Koristi samo preferirane namirnice i izbegavaj iskljuƒçene namirnice.
      - Nazivi dana treba da budu 'Dan 1', 'Dan 2', itd., bez imena dana u nedelji.
      - Namirnice moraju biti izra≈æene u gramima.
      - Nutritivna vrednost svakog obroka mora biti navedena u jednoj reƒçenici.
    `;

    let daniPrmpt = `
      Napravi plan ishrane (Keto) za taƒçno 3 dana sa sledeƒáim obrocima: [Doruƒçak, ruƒçak, veƒçera]
      - Primarni cilj: Mr≈°avljenje
      - Ukupna kalorijska vrednost: 2500 kcal po danu.
      - Preferirane namirnice: sir, maslina, krastavac, paprika, parmezan, pr≈°ut, salama, tunjevina, krumpir, kiseli kupus, bakar, dagnje, tuna, kamenice, piletina, govedina, raƒçiƒái, jaja, sardine
      - Izbegavati sledeƒáe namirnice: sardinela, bacon, dimljeni losos, zeleni grah, kvasac, suhi grah, maslinovo ulje, dimljena ≈°unka, feta sir, pire krumpir, lignje, su≈°eni paradajz, crni luk, mladi luk, avokado, ≈°koljke, ≈°unka, kupus, povrƒáe u ulju
      
      Raspodela kalorija meƒëu obrocima treba da prati sledeƒáa pravila:
        - Ako su dva obroka dnevno:
            Doruƒçak 40% kalorija
            Veƒçera: 60% kalorija
        - Ako su dva obroka dnevno:
            Doruƒçak: 40% kalorija
            Ruƒçak: 60% kalorija
        - Ako su dva obroka dnevno:
            Ruƒçak: 50% kalorija
            Veƒçera: 50% kalorija
        - Ako su tri obroka dnevno:
            Doruƒçak: 30% kalorija
            Ruƒçak: 40% kalorija
            Veƒçera: 30% kalorija
        - Ako su ƒçetiri obroka dnevno:
            Doruƒçak: 30% kalorija
            U≈æina: 10% kalorija
            Ruƒçak: 35% kalorija
            Veƒçera: 25% kalorija
        - Ako su pet obroka dnevno:
            Doruƒçak: 25% kalorija
            U≈æina 1: 10% kalorija
            Ruƒçak: 35% kalorija
            U≈æina 2: 10% kalorija
            Veƒçera: 20% kalorija
      
      Minimalna tolerancija odstupanja u kalorijama je ¬±2%.

      Svaki obrok mora sadr≈æavati PROCENTE makronutrijenata:
      - Proteini:
      - Ugljeni hidrati:
      - Masti:
    `;

    //New
    //     let daniPredprompt = `
    //   Ti si nutricionista specijalizovan za precizne i personalizovane planove ishrane.
    //   Tvoja odgovornost je da generi≈°e≈°  detaljan plan ishrane  u JSON formatu koristeƒái  zadatu ≈°emu .
    //   Plan ishrane mora biti prilagoƒëen  godinama korisnika, polu, ciljevima i dijetetskim ograniƒçenjima .

    //   ## PRAVILA ZA GENERISANJE PLANA ISHRANE:
    //   1.  Ukupna dnevna kalorijska vrednost  mora biti precizno rasporeƒëena meƒëu obrocima, uz  minimalno odstupanje ¬±2% .
    //   2.  Ne rasporeƒëuj kalorije ravnomerno  ‚Äì koristi  precizne procente raspodele kalorija  prema broju obroka.
    //   3.  Svaki obrok mora sadr≈æavati taƒçne koliƒçine makronutrijenata  izra≈æene u  gramima :
    //     -  Proteini (g)
    //     -  Ugljeni hidrati (g)
    //     -  Masti (g)
    //   4.  Koristi samo preferirane namirnice , izbegavaj iskljuƒçene namirnice.
    //   5.  Nazivi dana  moraju biti ‚ÄòDan 1‚Äô, ‚ÄòDan 2‚Äô, itd.
    //   6.  Nutritivna vrednost  svakog obroka mora biti  navedena u jednoj reƒçenici .
    //   7.  Tekst mora biti napisan iskljuƒçivo na ƒçistom srpskom jeziku, uz pravilnu upotrebu gramatike i pade≈æa. Izbegavaj bilo kakve dijalekte, regionalizme, jekavicu ili ekavicu ‚Äì koristi standardni srpski knji≈æevni jezik. Tekst treba biti gramatiƒçki i pravopisno ispravan, prirodan i lako razumljiv. .

    // `;

    // let daniPrmpt = `
    //   Napravi plan ishrane za taƒçno 3 dana sa sledeƒáim obrocima: [Doruƒçak, ruƒçak, veƒçera].
    //   Primarni cilj: Mrsavljenje
    //   Ukupna kalorijska vrednost: 2569 kcal po danu
    //   Preferirane namirnice: Maline, Kupine, Hleb, Mleko
    //   Izbegavati sledeƒáe namirnice: Sir, Krompir, Paradajz
    //   ## RASPODELA KALORIJA PO BROJU OBROKA:
    //   -  2 obroka dnevno :
    //     - Doruƒçak:  40% kalorija
    //     - Veƒçera:  60% kalorija
    //   -  3 obroka dnevno :
    //     - Doruƒçak:  30% kalorija
    //     - Ruƒçak:  40% kalorija
    //     - Veƒçera:  30% kalorija
    //   -  4 obroka dnevno :
    //     - Doruƒçak:  30% kalorija
    //     - U≈æina:  10% kalorija
    //     - Ruƒçak:  35% kalorija
    //     - Veƒçera:  25% kalorija
    //   -  5 obroka dnevno :
    //     - Doruƒçak:  25% kalorija
    //     - U≈æina 1:  10% kalorija
    //     - Ruƒçak:  35% kalorija
    //     - U≈æina 2:  10% kalorija
    //     - Veƒçera:  20% kalorija

    //   ## PRILAGOƒêAVANJE MAKRONUTRIJENATA PREMA CILJU:
    //   -  Mr≈°avljenje : Poveƒáaj unos proteina, smanji unos ugljenih hidrata za  10-20% .
    //   -  Odr≈æavanje : Koristi standardnu raspodelu makronutrijenata.
    //   -  Poveƒáanje mi≈°iƒáne mase : Poveƒáaj unos ugljenih hidrata i proteina, smanji unos masti.

    //   ## LISTA NAMIRNICA ZA KUPOVINU:
    //   - Na osnovu svih planiranih obroka, generi≈°i  personalizovanu listu namirnica  sa ukupnim koliƒçinama izra≈æenim u gramima.
    //   - Lista namirnica treba biti grupisana prema kategorijama (proteini, povrƒáe, voƒáe, ≈æitarice, mleƒçni proizvodi itd.).

    //   ## JSON FORMAT ODGOVORA:
    //   Odgovor mora biti strukturiran u JSON formatu kao u sledeƒáem primeru:

    //   json
    //   {
    //     "plan_ishrane": {
    //       "dan_1": {
    //         "dorucak": {
    //           "opis": "Zobena ka≈°a sa voƒáem",
    //           "sastojci": {
    //             "zobene_pahuljice": "100g",
    //             "banane": "50g",
    //             "bademi": "30g"
    //           },
    //           "kalorije": 880,
    //           "makronutrijenti": {
    //             "proteini": "25g",
    //             "ugljeni_hidrati": "120g",
    //             "masti": "30g"
    //           },
    //         }
    //       }
    //     },
    //     "lista_namirnica": {
    //       "proteini": {
    //         "tofu": "500g",
    //         "soƒçivo": "1kg"
    //       },
    //       "povrƒáe": {
    //         "paradajz": "300g",
    //         "krastavac": "200g"
    //       },
    //       "≈æitarice": {
    //         "smeƒëa ri≈æa": "500g",
    //         "zobene pahuljice": "1kg"
    //       },
    //     }
    //   }

    // `;

    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06",
      messages: [
        { role: "system", content: daniPredprompt },
        { role: "user", content: daniPrmpt },
      ],
      // response_format: zodResponseFormat(SedmicniPlanSchema, "mealPlan"),
    });

    let message = completion.choices[0]?.message.parsed;

    // console.log("DANI =>", message);

    // message.days.forEach((day) => {
    //   // Naslov za dan
    //   pdfDoc.fontSize(14).text(day.dan);
    //   pdfDoc.moveDown(1);

    //   // Iteracija kroz obroke za taj dan
    //   Object.keys(day).forEach((mealType) => {
    //     if (mealType !== "dan") {
    //       const meal = day[mealType];

    //       // Ispis naziva obroka
    //       pdfDoc
    //         .fontSize(12)
    //         .text(`  ${mealType.charAt(0).toUpperCase() + mealType.slice(1)}:`); // Indentacija za obrok

    //       // Bold-italic samo za "Opis:"
    //       pdfDoc
    //         .text(`    Opis:`, { continued: true });

    //       // Regularan font za sadr≈æaj
    //       pdfDoc.font("OpenSans_Condensed-Regular").text(`    ${meal.opis}`);

    //       pdfDoc
    //         .text(`    Sastojci:`, { continued: true });
    //       pdfDoc
    //         .text(`    ${meal.sastojci}`);

    //       pdfDoc
    //         .text(`    Instrukcije:`, { continued: true });
    //       pdfDoc
    //         .text(`    ${meal.instrukcije}`);

    //       pdfDoc
    //         .text(`    Kalorije:`, { continued: true });
    //       pdfDoc
    //         .text(`    ${meal.kalorije} kcal`);

    //       pdfDoc
    //         .text(`    Nutritivna vrednost:`, { continued: true });
    //       pdfDoc
    //         .text(`    ${meal.nutritivna_vrednost}`);

    //       pdfDoc
    //         .text(`    Cena:`, { continued: true });
    //       pdfDoc
    //         .text(`    ~${meal.cena} rsd`);

    //       pdfDoc.fontSize(12).text("Makronutrijenti:");
    //       pdfDoc.fontSize(12)
    //       pdfDoc.text(`- Proteini: ${meal.Makronutrijenti.Proteini} %`);
    //       pdfDoc.text(`- Ugljeni hidrati: ${meal.Makronutrijenti.Ugljeni_hidrati} %`);
    //       pdfDoc.text(`- Masti: ${meal.Makronutrijenti.Masti} %`);

    //       pdfDoc.moveDown(1);
    //     }
    //   });

    //   pdfDoc.moveDown(1);
    // });

    return res.json(message);
  } catch (error) {
    console.error("Error dani:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
});

//Ovaj koristim!
app.use("/test2", async (req, res) => {
  let { brojDana, obroci, data_ } = req.body;

  let stanjeImun = data_.imunitet === "Da" ? "jak imunitet" : "slab imunitet";

  //Prebacujemo id u imena specificnim ciljevima
  if (data_.specilj != []) {
    try {
      const specCiljevi = await Ciljevi.find(
        { tip: "specCilj" },
        { _id: 1, naziv: 1 }
      ).lean();

      const specCiljeviSaStringId = specCiljevi.map((cilj) => ({
        ...cilj,
        _id: cilj._id.toString(), // Konverzija u string
      }));

      let specCiljeviNazivi = specCiljeviSaStringId
        .filter((objekat) => data_.specilj.includes(objekat._id))
        .map((poklapanje) => poklapanje.naziv);

      // console.log("Svi ciljevi => ", specCiljevi);
      // console.log("Data.speciclj => ", data_.specilj);
      // console.log("Nazivi => ", specCiljeviNazivi);

      data_.specilj = specCiljeviNazivi;
    } catch (error) {
      console.error("Error fetching SpecCiljevi:", error);
      return res.status(500).json({ message: "Internal server error" });
    }
  }

  //

  const prompt = await Prompt.findOne({ prompt: "1" });
  // console.log('Prompt: ', prompt);  //Taj njegov jedan prompt iz baze

  // Check if the prompt is null or undefined
  if (!prompt) {
    return res.status(400).json({ message: "Nisu nadjeni prompti" });
  }

  //Nadjem njegov aktivni paket i ako ima onda u zavisnoti da li ima premium onda renderujem sve
  //promptove a ako nema (full) onda prelazi da renderuje samo (base) promptove i ako nema ni jedan onda se prekida sve isalje se poruka klijentu!

  //PRONADJI NJEGOV PAKET I VIDI STA I KOLIKO MU JE OSTALO PA PO TOME NAPRAVI DA SE ODREDNJENI PROMPTOVI SALJU!!!
  // let status_paketa = {
  //   naziv: "Standard",  // ili "Standard"
  //   broj: 5
  // };

  // function ispisiTest(status) {
  //     if (status.broj > 0) {
  //         if (status.naziv === "Premium") {
  //             console.log("TEST");
  //             status.broj--;
  //         } else if (status.naziv === "Standard") {
  //             if (status.broj === 5) {
  //                 console.log("TEST");
  //             } else {
  //                 console.log("TEST AGAIN");
  //             }
  //             status.broj--;
  //         }
  //     } else {
  //         console.log("Broj je 0, ne mo≈æe se dalje ispisivati.");
  //     }
  // }

  // // Testiranje funkcije
  // ispisiTest(status_paketa); // Prvi put
  // ispisiTest(status_paketa); // Drugi put
  // ispisiTest(status_paketa); // Treƒái put
  // ispisiTest(status_paketa); // ƒåetvrti put
  // ispisiTest(status_paketa); // Peti put
  // ispisiTest(status_paketa); // Ne mo≈æe dalje, broj je 0

  // res.json(prompt);

  //Ako conditional sentance renedring
  function generisiPlanMetaData(data_) {
    let tekst =
      "Ti si ve≈°taƒçka inteligencija koja nudi personalizovan plan fiziƒçke aktivnosti. Pru≈æaj detaljna obja≈°njenja za ";

    if (data_.name && data_.lastName) {
      tekst += `${data_.name} ${data_.lastName} `;
    }

    if (data_.godine) {
      tekst += `sa godinama: ${data_.godine}`;
    }

    if (data_.visina) {
      tekst += `, visina:  ${data_.visina}`;
    }

    if (data_.tezina) {
      tekst += `, sa te≈æinom:  ${data_.tezina}`;
    }

    if (data_.pol) {
      tekst += `, pol: ${data_.pol}`;
    }

    if (data_.primcilj) {
      tekst += ` koji ima primaran cilj ${data_.primcilj} `;
    }

    if (data_.specilj) {
      tekst += `a specifiƒçne ciljeve ${data_.primcilj} `;
    }

    if (data_.tezina) {
      tekst += `koji ima ${data_.tezina} kg `;
    }

    if (data_.visina) {
      tekst += `i visok je ${data_.visina} cm, `;
    }

    if (data_.struk) {
      tekst += `obim struka mu je ${data_.struk} cm, `;
    }

    if (data_.nivoAkt) {
      tekst += `sa nivoom fiziƒçke aktivnosti ${getNivoFizickeAktivnosti(
        data_.nivoAkt
      )}.`;
    }

    if (data_.motiv) {
      tekst += `Motivacija za potrebu fiziƒçkih aktivnosti ukljuƒçuje ${data_.motiv}, `;
    }

    if (data_.dijagnoza) {
      tekst += `a ima dijagnozu ${data_.dijagnoza}.`;
    }

    return tekst;
  }

  // let data_ = { id, tezina, visina, pol, primcilj, specilj, godine, dijagnoza, ucestBr, navikeUish, namirnice, voljeneNamirnice, neVoljeneNamirnice, ukupnaKalVred, selectedValueBrDana, tdee, bmi, kuk,vrat,struk,motiv,nivoAkt,vrstaFiz,alerg,pus,alk,datumRodjenja }

  let brojDanaInt = Number(brojDana);
  const pdfDoc = new PDFDocument();
  // const pdfDoc = new PDFDocument({
  //   size: 'A4',
  //   margin: 0 // Bez margina kako bi slika popunila celu stranicu
  // });

  // Registrujte fontove
  pdfDoc.registerFont(
    "OpenSans_Condensed-Regular",
    "./fonts/OpenSans_Condensed-Regular.ttf"
  );
  pdfDoc.registerFont(
    "OpenSans_Condensed-Bold",
    "./fonts/OpenSans_Condensed-Bold.ttf"
  );
  pdfDoc.registerFont(
    "OpenSans_Condensed-BoldItalic",
    "./fonts/OpenSans_Condensed-BoldItalic.ttf"
  );
  pdfDoc.font("OpenSans_Condensed-Regular"); // Postavite default font na regular

  //Kreiranje prve dve stranice?

  // Novi objekat mydata
  try {
    // prompt - uvod - STARI
    // const uvodResult = await openai.chat.completions.create({
    //   model: "gpt-4",
    //   messages: [{ role: "user", content: `Kreiraj mi kratki uvodni text o ishrani sa primarnim ciljem: ${data_.primcilj}` }],
    //   max_tokens: 1000,
    // });
    // let uvod = uvodResult.choices[0]?.message?.content?.trim() || kratki.uvod;
    // uvod = uvod.replace(/[#!&*√º!_?-@**]/g, "");

    // let uvodPrompt = `
    //   Napi≈°i motivacioni uvod za ${data_?.ime}, roƒëenog ${data_?.datumRodjenja}, ${data_?.pol} godina, koji ima ${data_?.godine} godina, visinu ${data_?.visina} cm i trenutnu te≈æinu ${data_?.tezina} kg. Njegov/a primarni cilj ishrane je ${data_?.primcilj},
    // `;

    // if (data_?.specilj) {
    //   uvodPrompt += `sa specifiƒçnim ciljem da ${data_?.specilj}. `;
    // }

    // if (data_?.motiv) {
    //   uvodPrompt += `Korisnik je motivisan da promeni svoje navike zato ≈°to ${data_?.motiv}. `;
    // }

    // uvodPrompt += `
    // Prvi pasus treba da bude bogat, detaljan, sa puno informacija i inspiracije. Zapoƒçni ga sa motivacijom korisnika, navodeƒái specifiƒçne aspekte njegovog napretka. Koristi puno detalja i pro≈°iri odgovor, koristeƒái primere i detalje o njegovim naporima da poveƒáa mi≈°iƒánu masu. Neka odgovor bude ≈°to du≈æi, sa puno entuzijazma, podr≈°ke i divljenja.
    // Drugi pasus neka naglasi va≈ænost dugoroƒçnog odr≈æavanja zdravih navika i koristi koje ƒáe korisnik imati, poput pobolj≈°anja zdravstvenog stanja, poveƒáane energije i boljeg kvaliteta ≈æivota. Uvod treba da bude pisan u drugom licu jednine, obraƒáajuƒái se direktno korisniku, i treba da ima podr≈æavajuƒái i inspirativan ton.
    // `;

    let uvodPredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi uvod o planu ishrane. Pru≈æaj detaljna obja≈°njenja za ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}. Njegov/a primarni cilj ishrane je ${data_?.primcilj}.`;
    const uvodPredpromptNew = `Ti si najbolji nutricionista na svetu. Tvoj zadatak je da napi≈°e≈° personalizovani uvod za plan ishrane za korisnika sa sledeƒáim podacima:
    ‚óè Ime i prezime: ${data_.name} ${data_.lastName}
    ‚óè Godine: ${data_.godine}
    ‚óè Visina: ${data_.visina} cm
    ‚óè Te≈æina: ${data_.tezina} kg
    ‚óè Pol: ${data_.pol}
    ‚óè Primarni cilj: ${data_.primcilj}
    ‚óè Motivacija za promenu: ${data_.motiv}
    ‚óè Trenutne navike u ishrani: ${data_.navikeUish} 
    ‚óè Nivo aktivnosti: ${getNivoFizickeAktivnosti(data_.nivoAkt)}
    ‚óè Prethodna iskustva sa dijetama: ${data_.iskSaDijetama}
    ‚óè Alergije: ${data_.alerg}
    ‚óè Namirnice koje voli: ${data_.voljeneNamirnice}
    ‚óè Namirnice koje ne voli: ${data_.neVoljeneNamirnice}
    ‚óè Uƒçestalost obroka: ${data_.ucestBr}
    Tvoj zadatak je da na osnovu ovih podataka napi≈°e≈° uvod koji:
    ‚óè Personalizovano se obraƒáa korisniku.
    ‚óè Kratko analizira trenutno stanje korisnika i istiƒçe kljuƒçne informacije.
    ‚óè Motivacionim tonom ohrabruje korisnika za promenu.
    ‚óè Nagove≈°tava sledeƒái deo izve≈°taja ('Holistiƒçki pristup').
    Pravila za uvod:
    1. Izbegavaj formalne fraze poput 'Srdaƒçno' ili 'S po≈°tovanjem.'
    2. Zavr≈°etak uvoda treba da ostavlja pozitivan utisak i prirodno vodi korisnika ka sledeƒáem delu izve≈°taja.
    3. Odr≈æavaj ton profesionalnim, empatiƒçnim i motivi≈°uƒáim.
    4. Izbegavaj preoptereƒáenje podacima, fokusiraj se na kljuƒçne taƒçke.
    Na kraju uvoda, koristi frazu poput: 'U narednom delu istra≈æiƒáemo holistiƒçki pristup va≈°em zdravlju i ishrani, povezujuƒái fiziƒçko i mentalno blagostanje.'`;

    let promptUvod = `${prompt.uvod.text} Neka broj karaktera bude taƒçno: ${prompt.uvod.brKar}.`;
    const uvodResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: uvodPredpromptNew,
        },
        {
          role: "user",
          // content: prompt.uvod.text,
          content: promptUvod,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.uvod.brKar) / 4),
    });

    // console.log("Uvod tokens => ", Math.floor(Number(prompt.uvod.brKar) / 4));

    // Preƒçi≈°ƒáavanje rezultata
    let uvod = uvodResult.choices[0]?.message?.content?.trim();
    uvod = uvod.replace(/[#!&*√º!_?@**]/g, "");

    // Podela generisanog uvoda na pasuse
    // const [prviPasus, drugiPasus] = uvod.split("\n").filter(line => line.trim() !== "");

    // Validacija pomoƒáu Zod-a
    // const parsedUvod = uvodSchema.safeParse({
    //   prviPasus: prviPasus,
    //   drugiPasus: drugiPasus,
    // });

    // prompt - zakljucak
    let zakljucakPredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi zakljucak o planu ishrane. Pru≈æaj detaljna obja≈°njenja za ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}. Njegov/a primarni cilj ishrane je ${data_?.primcilj}.`;
    let promptZakljucak = `${prompt.zakljucak.text} Neka broj karaktera bude taƒçno: ${prompt.zakljucak.brKar}`;
    const zakljucakResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: zakljucakPredprompt,
        },
        {
          role: "user",
          // content: prompt.zakljucak.text,
          content: promptZakljucak,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.zakljucak.brKar) / 4),
    });

    // console.log(
    //   "Zakljucak tokens => ",
    //   Math.floor(Number(prompt.zakljucak.brKar) / 4)
    // );

    let zakljucak =
      zakljucakResult.choices[0]?.message?.content?.trim() || kratki.zakljucak;
    zakljucak = zakljucak.replace(/[#!&*√º!_?@**]/g, "");

    // prompt - smernice za ishranu
    let smernicePredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi smernice za ishranu. Pru≈æaj detaljna obja≈°njenja za ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}.`;
    let promptSmernice = `${prompt.smernice.text} Neka broj karaktera bude taƒçno: ${prompt.smernice.brKar}`;
    const smerniceResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: smernicePredprompt,
        },
        {
          role: "user",
          // content: prompt.smernice.text,
          content: promptSmernice,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.smernice.brKar) / 4),
    });

    // console.log(
    //   "Smernice tokens => ",
    //   Math.floor(Number(prompt.smernice.brKar) / 4)
    // );

    let smernice = smerniceResult.choices[0]?.message?.content?.trim();
    smernice = smernice.replace(/[#!&*√º!_?@**]/g, "");

    // console.log('Smernice => ', smernice); //Lepo ispisuje

    // prompt - plan fizicke aktivnosti
    let fizAktPredprompt = generisiPlanMetaData(data_);
    let fizAktPromt = `${prompt.fizAkt.text} Neka broj karaktera bude taƒçno: ${prompt.fizAkt.brKar}`;
    const planFizAktResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: fizAktPredprompt,
          // content: `Ti si ve≈°taƒçka inteligencija koja nudi personalizovan plan fiziƒçke aktivnosti. Pru≈æaj detaljna obja≈°njenja za ${data_.ime} ${data_.prezime} koji ima ${data_.tezina} kg i visok je ${data_.visina} cm, obim struka mu je ${data_.struk} cm, sa odabranim fiziƒçkim aktivnostima ${data_.vrstaFiz}. Motivacija za potrebu fiziƒçkih aktivnosti ukljuƒçuje ${data_.motiv}, a ima dijagnozu ${data_.dijagnoza}.`
        },
        {
          role: "user",
          // content: prompt.fizAkt.text,
          content: fizAktPromt,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.fizAkt.brKar) / 4),
    });

    // console.log(
    //   "fizAkt tokens => ",
    //   Math.floor(Number(prompt.fizAkt.brKar) / 4)
    // );

    let planFizAkt = planFizAktResult.choices[0]?.message?.content?.trim();
    planFizAkt = planFizAkt.replace(/[#!&*√º!_?@**]/g, "");
    // console.log('planFizAkt:', planFizAkt);

    // let vrstaImuniteta = data_.imunitet == "Da" ? "jak imunitet" : "slab imunitet";
    function generisiPreporuke(data_) {
      let vrstaImuniteta =
        data_.imunitet === "Da" ? "jak imunitet" : "slab imunitet";

      let tekst =
        "Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o imunitetu. Pru≈æaj detaljno obja≈°njenje o tome kako ";

      // Provera i dodavanje imena i prezimena
      if (data_.name && data_.lastName) {
        tekst += `${data_.name} ${data_.lastName} `;
      }

      if (data_.godine) {
        tekst += `sa godinama: ${data_.godine}`;
      }

      if (data_.visina) {
        tekst += `, visina:  ${data_.visina}`;
      }

      if (data_.tezina) {
        tekst += `, sa te≈æinom:  ${data_.tezina}`;
      }

      if (data_.pol) {
        tekst += `, pol: ${data_.pol}`;
      }

      if (vrstaImuniteta) {
        tekst += `mo≈æe pobolj≈°ati svoj imunitet, imajuƒái u vidu da ima ${vrstaImuniteta} `;
      }

      if (data_.motiv) {
        tekst += `i motivaciju za promenu: ${data_.motiv}. `;
      }

      if (data_.specilj) {
        tekst += `Njegovi specificni ciljevi su ${data_.specilj}.`;
      }

      if (data_.navikeUish) {
        tekst += `Njegove navike u ishrani su ${data_.navikeUish}.`;
      }

      if (data_.alerg) {
        tekst += `Njegove alergije su ${data_.alerg}.`;
      }

      if (data_.intolerancije) {
        tekst += `Njegove intolerancije su ${data_.intolerancije}.`;
      }

      return tekst;
    }

    // prompt - imunolo≈°ka podr≈°ka
    let imunPredprompt = generisiPreporuke(data_);
    let imunPrompt = `${prompt.imun.text} Neka broj karaktera bude taƒçno: ${prompt.imun.brKar}`;
    const podrzkaImunResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: imunPredprompt,
          // content: `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o imunitetu. Pru≈æaj detaljno obja≈°njenje o tome kako ${data_.ime} ${data_.prezime} mo≈æe pobolj≈°ati svoj imunitet, imajuƒái u vidu da ima ${vrstaImuniteta} i motivaciju za promenu: ${data_.motiv}. Njegovi specificni ciljevi su ${data_.specilj}`
        },
        {
          role: "user",
          // content: prompt.imun.text
          content: imunPrompt,
        },
      ],
      // max_tokens: Math.floor(Number(prompt.imun.brKar)/ 4)
    });

    // console.log("imun tokens => ", Math.floor(Number(prompt.imun.brKar) / 4));

    let podrzkaImun = podrzkaImunResult.choices[0]?.message?.content?.trim();
    podrzkaImun = podrzkaImun.replace(/[#!&*√º!_?@**]/g, "");
    // console.log('podrzkaImun:', podrzkaImun);

    // prompt - perosnalizovan plan ishrane - text pre dana
    let perosnalPredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi uvod o personlanizovanom planu ishrane, pru≈æaj detaljno obja≈°njenje za ${data_.name} ${data_.lastName} sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}, sa primaranim ciljem ${data_.primcilj}`;
    const perosnalPredpromptNew = `
    Ti si najbolji nutricionista na svetu specijalizovan za kreiranje personalizovanih planova ishrane prilagoƒëenih individualnim potrebama i ciljevima korisnika.
    Na osnovu sledeƒáih podataka o korisniku:
    ‚óè Ime i prezime: ${data_.name} ${data_.lastName}
    ‚óè Godine: ${data_.godine}
    ‚óè Visina: ${data_.visina} cm
    ‚óè Te≈æina: ${data_.tezina} kg
    ‚óè Pol: ${data_.pol}
    ‚óè Primarni cilj: ${data_.primcilj}
    ‚óè Motivacija za promenu: ${data_.motiv}
    ‚óè Nivo aktivnosti: ${getNivoFizickeAktivnosti(data_.nivoAkt)}
    ‚óè Trenutne navike u ishrani: ${data_.navikeUish}
    ‚óè Namirnice koje voli: ${data_.voljeneNamirnice}
    ‚óè Namirnice koje ne voli: ${data_.neVoljeneNamirnice}
    ‚óè Stil ishrane: ${data_.selectedIshranaNaziv}
    ‚óè Stanje imuniteta: ${stanjeImun}

    Tvoj zadatak je da napi≈°e≈° segment pod nazivom 'Personalizovani plan ishrane' koji korisniku pru≈æa sledeƒáe:

    1. Ciljevi i principi plana:
      ‚óã Jasno defini≈°i korisnikov primarni cilj i kljuƒçne principe koji ƒáe mu pomoƒái da ga postigne.
      ‚óã Objasni kako ƒáe plan doprineti ostvarenju njegovih ciljeva (npr. balansirana ishrana, unos makronutrijenata).

    2. Lista dozvoljenih i izbegavanih namirnica:
      ‚óã Navedite konkretne namirnice koje su preporuƒçene na osnovu korisnikovih potreba i preferencija.
      ‚óã Napravite listu namirnica koje treba izbegavati zbog alergija, zdravstvenih problema ili ciljeva.

    3. Nutritivne smernice:
      ‚óã Defini≈°i ukupan dnevni kalorijski unos i preporuƒçenu raspodelu makronutrijenata (ugljeni hidrati, masti, proteini).
      ‚óã Istakni va≈ænost hidratacije i preporuƒçi optimalni dnevni unos vode.

    4. Praktiƒçne napomene o pripremi hrane:
      ‚óã Objasni metode pripreme koje su deo plana (peƒçenje, kuvanje na pari, izbegavanje pr≈æenja).
      ‚óã Naglasi va≈ænost kori≈°ƒáenja sve≈æih i nepreraƒëenih namirnica.

    5. Uƒçestalost i struktura obroka:
      ‚óã Navedite preporuƒçeni broj obroka dnevno (npr. tri glavna obroka i dve u≈æine).
      ‚óã Predlo≈æite optimalno vreme za obroke (npr. doruƒçak do 9h, veƒçera do 19h).

    Strukturi≈°i segment sa jasnim podnaslovima, preglednim listama i praktiƒçnim savetima kako bi sadr≈æaj bio lako razumljiv i primenljiv. Ton treba da bude profesionalan, motivacioni i empatiƒçan, sa fokusom na podr≈°ku korisniku u njegovom procesu promene.

    Pravila:
    ‚óè Nemoj koristiti previ≈°e struƒçne termine ‚Äì obja≈°njenja moraju biti jasna i razumljiva.
    ‚óè Nemoj koristiti formalne fraze poput 'Srdaƒçno' ili 'S po≈°tovanjem'.
    ‚óè Fokusiraj se na motivisanje korisnika da zapoƒçne primenu saveta iz ove sekcije.
    `;
    let promptPersonal = `${prompt.planIsh.text} Neka broj karaktera bude taƒçno: ${prompt.planIsh.brKar}`;
    const personalIshraneResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          //Upotpuni ovo podacima
          content: perosnalPredpromptNew,
        },
        {
          role: "user",
          // content:  prompt.planIsh.text,
          content: promptPersonal,
        },
      ],
      // max_tokens: Math.floor(Number(prompt.planIsh.brKar) / 4)
    });
    let personalIshrane =
      personalIshraneResult.choices[0]?.message?.content?.trim();
    personalIshrane = personalIshrane.replace(/[#!&*√º!_?@**]/g, "");

    // console.log(
    //   "planIsh tokens => ",
    //   Math.floor(Number(prompt.planIsh.brKar) / 4)
    // );

    function generisiPreporukeZaSan(data_) {
      let tekst =
        "Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o snu. Pru≈æaj detaljno obja≈°njenje o tome kako ";

      if (data_.name && data_.lastName) {
        tekst += `${data_.name} ${data_.lastName} `;
      }

      if (data_.godine) {
        tekst += `sa godinama: ${data_.godine}`;
      }

      if (data_.visina) {
        tekst += `, visina:  ${data_.visina}`;
      }

      if (data_.tezina) {
        tekst += `, sa te≈æinom:  ${data_.tezina}`;
      }

      if (data_.pol) {
        tekst += `, pol: ${data_.pol}`;
      }

      if (data_.nivoAkt) {
        tekst += `mo≈æe pobolj≈°ati svoj san, imajuƒái u vidu da ima nivo fiziƒçke aktivnosti ${getNivoFizickeAktivnosti(
          data_.nivoAkt
        )}. `;
      }

      if (data_.specilj) {
        tekst += `A ima specifiƒçne ciljeve ${data_.specilj} `;
      }

      if (data_.navikeUish) {
        tekst += `i navike u ishrani ${data_.navikeUish}.`;
      }

      return tekst;
    }

    // prompt - savet za spavanje
    let spavanjePredprompt = generisiPreporukeZaSan(data_);
    let promptSpavanje = `${prompt.san.text} Neka broj karaktera bude taƒçno: ${prompt.san.brKar}`;
    const spavanjeSavetResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: spavanjePredprompt,
          // content: `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o snu. Pru≈æaj detaljno obja≈°njenje o tome kako ${data_.ime} ${data_.prezime} mo≈æe pobolj≈°ati svoj san, imajuƒái u vidu da ima nivo fiziƒçke aktivnosti ${data_.ddd}. A ima specifiƒçne ciljeve ${data_.specilj} i navike u ishrani ${data_.navikeUish}.`
        },
        {
          role: "user",
          // content: prompt.san.text,
          content: promptSpavanje,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.san.brKar) / 4),
    });

    // console.log("san tokens => ", Math.floor(Number(prompt.san.brKar) / 4));

    let spavanjeSavet =
      spavanjeSavetResult.choices[0]?.message?.content?.trim();
    spavanjeSavet = spavanjeSavet.replace(/[#!&*√º!_?@**]/g, "");
    // console.log('spavanjeSavet:', spavanjeSavet);

    // prompt - preporuka za unos vode
    let vodaPredpromt = `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o unosu vode u organizam. Pru≈æaj detaljno obja≈°njenje o tome kako ${
      data_.name
    } ${data_.lastName} ${data_.pol} ${data_.godine} godina, sa te≈æinom ${
      data_.tezina
    } i visinom ${
      data_.visina
    } cm mo≈æe pobolj≈°ati svoj unos vode, imajuƒái u vidu da ima nivo fiziƒçke aktivnosti ${getNivoFizickeAktivnosti(
      data_.nivoAkt
    )}`;
    let promptVoda = `${prompt.voda.text} Neka broj karaktera bude taƒçno: ${prompt.voda.brKar}`;
    const prepVodaResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: vodaPredpromt,
        },
        {
          role: "user",
          // content: prompt.voda.text,
          content: promptVoda,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.voda.brKar) / 4),
    });

    // console.log("voda tokens => ", Math.floor(Number(prompt.voda.brKar) / 4));

    let prepVoda = prepVodaResult.choices[0]?.message?.content?.trim();
    prepVoda = prepVoda.replace(/[#!&*√º!_?@**]/g, "");
    // console.log('prepVoda:', prepVoda);

    function generisiPreporukeZaDijete(data_) {
      let tekst =
        "Ti si ve≈°taƒçka inteligencija koja nudi preporuke o prethodnim iskustvima sa dijetama. Pru≈æaj detaljno obja≈°njenje o tome kako ";

      if (data_.name && data_.lastName) {
        tekst += `${data_.name} ${data_.lastName}, `;
      }

      if (data_.godine) {
        tekst += `sa godinama: ${data_.godine}`;
      }

      if (data_.visina) {
        tekst += `, visina:  ${data_.visina}`;
      }

      if (data_.tezina) {
        tekst += `, sa te≈æinom:  ${data_.tezina}`;
      }

      if (data_.pol) {
        tekst += `, pol: ${data_.pol}`;
      }

      if (data_.primcilj) {
        tekst += `sa ciljevima ${data_.primcilj}, `;
      }

      if (data_.specilj) {
        tekst += `i specifiƒçnim ciljem ${data_.specilj} `;
      }

      // Provera i dodavanje motivacije
      if (data_.motiv) {
        tekst += `i motivacijom za ${data_.motiv} `;
      }

      if (data_.iskSaDijetama) {
        tekst += `sa prethodnim iskustvom ${data_.iskSaDijetama}.`;
      }

      return tekst;
    }

    // prompt - preporuka za prethodna iskustva sa ishranana
    let prethishPredprompt = generisiPreporukeZaDijete(data_);
    let promptPretIsh = `${prompt.predijeta.text} Neka broj karaktera bude taƒçno: ${prompt.predijeta.brKar}`;
    const pretIshResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18",
      messages: [
        {
          role: "system",
          content: prethishPredprompt,
          //content: `Ti si ve≈°taƒçka inteligencija koja nudi preporuke o prethodnim iskustvima sa dijetama. Pru≈æaj detaljno obja≈°njenje o tome kako ${data_.ime} ${data_.prezime}, sa ciljevima ${data_.primcilj}, i specifiƒçnim ciljem ${data_.specilj} i motivacijom za ${data_.motiv} sa prethosnim iskustom ${data_.iskSaDijetama}.`
        },
        {
          role: "user",
          content: promptPretIsh,
        },
      ],
      // max_tokens:  Math.floor(Number(prompt.predijeta.brKar) / 4),
    });

    // console.log(
    //   "predijeta tokens => ",
    //   Math.floor(Number(prompt.predijeta.brKar) / 4)
    // );

    let pretIsh = pretIshResult.choices[0]?.message?.content?.trim();
    pretIsh = pretIsh.replace(/[#!&*√º!_?@**]/g, "");

    // Kreiranje odgovora
    const odgovor = {
      // voda: prepVoda,
      // spavanje: spavanjeSavet,
      // podrska: podrzkaImun,
      // plan: planFizAkt,
      // uvod: uvod,
      zakljucak: zakljucak,
    };

    //Za ostale upite
    planShema.parse(odgovor);

    //Za dane
    if (!brojDanaInt || typeof brojDanaInt !== "number") {
      return res
        .status(400)
        .json({ message: "Molimo unesite validan broj dana." });
    }

    const validObroci = ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];
    const chosenObroci =
      Array.isArray(obroci) &&
      obroci.every((obrok) => validObroci.includes(obrok))
        ? obroci
        : ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];

    ["doruƒçak", "u≈æina", "ruƒçak", "u≈æina", "veƒçera"];

    const obrociPrompt = chosenObroci
      .map((obrok) => {
        switch (obrok) {
          case "doruƒçak":
            return "doruƒçak";
          case "u≈æina1":
            return "u≈æina";
          case "ruƒçak":
            return "ruƒçak";
          case "u≈æina2":
            return "u≈æina2";
          case "veƒçera":
            return "veƒçera";
          default:
            return obrok;
        }
      })
      .join(", ");

    // console.log("obrociPrompt => ", obrociPrompt);

    const DaySchema = generateDaySchema(chosenObroci);
    const FullWeekSchema = z.object({
      days: z.array(DaySchema),
    });
    //- Obrok treba da sadr≈æi realne i dostupne namirnice iz srbije.
    // console.log(
    //   "Ukupna kalorijska vrednost: ",
    //   Math.round(data_.ukupnaKalVred)
    // );
    // console.log("Tdee: ", Math.round(data_.tdee));

    //OLD
    let daniPredprompt = `
              Ti si nutricionista specijalizovan za precizne planove ishrane. Tvoja odgovornost je da generi≈°e≈° plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu.
              
              Pravila:
              - Nemoj da raspodelis kalorijsku vrednost ravnomerno izmeƒëu obroka.
              - Koristi samo zadate namirnice i izbegavaj iskljuƒçene namirnice.
              - Nazivi dana treba da budu 'Dan 1', 'Dan 2', itd., bez imena dana u nedelji.
              - Za svaki obrok navedi taƒçnu kalorijsku vrednost.
              `;
    let daniPrmpt = `
              Napravi plan ishrane za taƒçno ${brojDanaInt} dana sa sledeƒáim obrocima: ${obrociPrompt}.
              Primarni cilj: ${data_.primcilj}.
              Ukupna kalorijska vrednost: ${Math.round(
                data_.ukupnaKalVred
              )} kcal po danu.
              Preferirane namirnice: ${data_.voljeneNamirnice}.
              Izbegavati sledeƒáe namirnice: ${data_.neVoljeneNamirnice}.
              Cene moraju biti okvirne i izra≈æene u RSD.
              Namirnice trebaju da budu izra≈æene u gramima.
              Napi≈°i utritivnu vrednost u jednoj reƒçenici.
              Svi obroci moraju imati precizne kalorijske vrednosti koje doprinose ukupnom dnevnom unosu kalorija. Ne ukljuƒçuj obroke koji nisu navedeni.
              `;

    //NEW
    let daniPredprompt_ = `
        Ti si nutricionista specijalizovan za precizne planove ishrane. Tvoja odgovornost je da generi≈°e≈° plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu.
        
        Pravila:
        - Sve mora biti na napisano na SRPSKOM jeziku.
        - Nemoj da raspodeli≈° kalorijsku vrednost ravnomerno izmeƒëu obroka.
        - Koristi samo zadate namirnice i izbegavaj iskljuƒçene namirnice.
        - Nazivi dana treba da budu 'Dan 1', 'Dan 2', itd., bez imena dana u nedelji.
        - Za svaki obrok navedi taƒçnu kalorijsku vrednost.
        - Za svaki obrok navedi mikronutrijente: proteini, ugljeni hidrati i masti.
        - Sastojci moraju biti u gramima.
        - Nutritivne verednosti mora biti u gramima.
      `;

    //Ovaj deo je bio u daniPredprompt_ na kraju recenice
    //- Makronutrijenti moraju biti u gramima a ne u procentima!

    let daniPrmpt_ = `
        Napravi plan ishrane (${
          data_.selectedIshranaNaziv
        }) za taƒçno ${brojDanaInt} dana sa sledeƒáim obrocima: ${obrociPrompt}
        - Primarni cilj: ${data_.primcilj}.
        - Ukupna kalorijska vrednost: ${Math.round(
          data_.ukupnaKalVred
        )} kcal po danu.
        - Preferirane namirnice: ${data_.voljeneNamirnice}.
        - Izbegavati sledeƒáe namirnice: ${data_.neVoljeneNamirnice}.

        Raspodela kalorija meƒëu obrocima treba da prati sledeƒáa pravila:
        - Doruƒçak: 25-30% kalorija
        - Ruƒçak: 40-45% kalorija
        - Veƒçera: 25-30% kalorija
        
        Minimalna tolerancija odstupanja u kalorijama je ¬±2%.
      `;

    //Ovaj deo je bio u daniPrmpt_ na kraju recenice
    // Svaki obrok mora sadr≈æavati PROCENTE makronutrijenata:
    // - Proteini: %
    // - Ugljeni hidrati: %
    // - Masti: %

    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "system",
          content: daniPredprompt_,
        },
        {
          role: "user",
          content: daniPrmpt_,
        },
      ],
      response_format: zodResponseFormat(FullWeekSchema, "mealPlan"),
    });

    let message = completion.choices[0]?.message.parsed; //DANI
    // let message_cleared = message.replace(/[#!&*√º!_?-@**]/g, "");

    // FullWeekSchema.parse(hol);

    // prompt - preporuka za alkohola
    let alkoholpPredprompt = ``;
    let promptAlkohol = ``;
    let alkoholResult = "";
    let alkohol = "";
    if (data_.alk === "da") {
      alkoholpPredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o unosu alkohola u organizam. Pru≈æaj detaljno obja≈°njenje o tome kako ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}, koji ≈æeli da postigne ${data_.primcilj} i ${data_.specilj} a konzumira ${data_.alk}`;
      promptAlkohol = `${prompt.alk.text} Neka broj karaktera bude taƒçno: ${prompt.alk.brKar}`;
      alkoholResult = await openai.chat.completions.create({
        model: "gpt-4o-mini-2024-07-18",
        messages: [
          {
            role: "system",
            content: alkoholpPredprompt,
          },
          {
            role: "user",
            // content: prompt.alk.text,
            content: promptAlkohol,
          },
        ],
        // max_tokens: Math.floor(Number(prompt.alk.brKar) / 4),
      });

      // console.log("alk tokens => ", Math.floor(Number(prompt.alk.brKar) / 4));

      alkohol = alkoholResult.choices[0]?.message?.content?.trim();
      alkohol = alkohol.replace(/[#!&*√º!_?@**]/g, "");
    }

    //DODAJ CONDITIONAL AKO PUSI DA LI UOPSTE DA POKRECE PROMPT

    // prompt - preporuka za alkohola
    let pusenjePredprompt = ``;
    let promptPusenje = ``;
    let pusenjeResult = "";
    let pusenje = "";
    if (data_.pus === "da") {
      pusenjePredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o pusenju cigareta. Pru≈æaj detaljno obja≈°njenje o tome kako ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}, koji ≈æeli da postigne ${data_.primcilj} i ${data_.specilj} a konzumira ${data_.pus}`;
      promptPusenje = `${prompt.pus.text} Neka broj karaktera bude taƒçno: ${prompt.pus.brKar}`;
      pusenjeResult = await openai.chat.completions.create({
        model: "gpt-4o-mini-2024-07-18",
        messages: [
          {
            role: "system",
            content: pusenjePredprompt,
          },
          {
            role: "user",
            // content: prompt.pus.text,
            content: promptPusenje,
          },
        ],
        // max_tokens:  Math.floor(Number(prompt.pus.brKar) / 4),
      });

      // console.log("pusenje tokens => ", Math.floor(Number(prompt.pus.brKar) / 4));

      pusenje = pusenjeResult.choices[0]?.message?.content?.trim();
      pusenje = pusenje.replace(/[#!&*√º!_?@**]/g, "");
    }

    // prompt - alergije - renderuje se conditionaly
    let alergijePredprompt = `Ti si ve≈°taƒçka inteligencija koja nudi preporuke za brigu o alergijama i intolerancijama. Pru≈æaj detaljno obja≈°njenje za ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}, sa alergijama ${data_.alerg} i intolerancijama za ${data_.intolerancije}`;
    let promptAlergije = `${prompt.alergiio.text} Neka broj karaktera bude taƒçno: ${prompt.alergiio.brKar}`;
    const alergijeResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18", //gpt-4o-2024-08-06 samo tako stavim za 32k input i output tokena
      messages: [
        {
          role: "system",
          content: alergijePredprompt,
        },
        {
          role: "user",
          // content: prompt.alergiio.text,
          content: promptAlergije,
        },
      ],
      // max_tokens: Math.floor(Number(prompt.alergiio.brKar) / 4),
    });
    // console.log(
    //   "alerg tokens => ",
    //   Math.floor(Number(prompt.alergiio.brKar) / 4)
    // );

    let alergije = alergijeResult.choices[0]?.message?.content?.trim();
    alergije = alergije.replace(/[#!&*√º!_?@**]/g, "");

    //Za holisticki pristup  ${data_.nivoFizAktivnosti} => Dodaj iz fronta
    let holistickiPristupPredpromt = `Ti si ve≈°taƒçka inteligencija koja nudi personalizovane savete o zdravlju i dobrobiti zasnovane na holistiƒçkom pristupu. Pru≈æaj detaljna obja≈°njenja za ${data_.name} ${data_.lastName}, sa godinama: ${data_.godine} visina: ${data_.visina}, sa te≈æinom: ${data_.tezina}, pol: ${data_.pol}, sa primarnim ciljem ${data_.primcilj} i specifiƒçnim ciljem ${data_.specilj}. Motivacija za promenu ukljuƒçuje ${data_.motiv}, nivo fiziƒçke aktivnosti: 1.2, vrsta fiziƒçke aktivnosti: ${data_.vrstaFiz}, i ishrana: ${data_.selectedIshranaNaziv}. Sa stanjem imuniteta ${stanjeImun}`;
    let holistickiPristupPredpromtNew = `
    Ti si najbolji nutricionista na svetu, specijalizovan za personalizovane savete o zdravlju i
    dobrobiti zasnovane na holistiƒçkom pristupu. Tvoj zadatak je da pi≈°e≈° sekciju izve≈°taja koja
    korisniku jasno obja≈°njava znaƒçaj povezivanja ishrane, fiziƒçke aktivnosti i mentalnog zdravlja za
    postizanje dugoroƒçnih rezultata. Koristi sledeƒáe personalizovane podatke o korisniku:
    ‚óè Ime i prezime: ${data_.name} ${data_.lastName} 
    ‚óè Godine: ${data_.godine}
    ‚óè Visina: ${data_.visina} cm
    ‚óè Te≈æina: ${data_.tezina} kg
    ‚óè Pol: ${data_.pol}
    ‚óè Primarni cilj: ${data_.primcilj}
    ‚óè Specifiƒçan cilj: ${data_.specilj}
    ‚óè Motivacija za promenu: ${data_.motiv}
    ‚óè Nivo fiziƒçke aktivnosti: ${getNivoFizickeAktivnosti(data_.nivoAkt)}
    ‚óè Vrsta fiziƒçke aktivnosti: ${data_.vrstaFiz} 
    ‚óè Stil ishrane: ${data_.selectedIshranaNaziv}
    ‚óè Stanje imuniteta: ${stanjeImun}
    Tvoj zadatak je da pi≈°e≈° sekciju koja:
    1. Obja≈°njava znaƒçaj holistiƒçkog pristupa zdravlju, ukljuƒçujuƒái povezanost fiziƒçkog,
    mentalnog i nutritivnog zdravlja.
    2. Koristi podatke o korisniku da bi objasnila kako personalizovan pristup doprinosi
    postizanju njihovih ciljeva.
    3. Prikazuje 2‚Äì3 jednostavne i praktiƒçne promene koje korisnik mo≈æe odmah primeniti, uz
    obja≈°njenje za≈°to su va≈æne.
    4. Odr≈æava topao i motivi≈°uƒái ton, fokusirajuƒái se na odr≈æivost i dugoroƒçne koristi.
    5. Priprema korisnika za sledeƒáu sekciju izve≈°taja, 'Personalizovani plan ishrane', uz
    tranzicionu frazu poput:
    'Sada, kada razumete va≈ænost holistiƒçkog pristupa, prelazimo na detaljan plan ishrane
    prilagoƒëen va≈°im ciljevima.'
    Pravila:
    ‚óè Nemoj koristiti previ≈°e struƒçne termine ‚Äì obja≈°njenja moraju biti jasna i razumljiva.
    ‚óè Ton treba da bude profesionalan, ali pristupaƒçan i inspirativan.
    ‚óè Nemoj koristiti formalne fraze poput 'Srdaƒçno' ili 'S po≈°tovanjem'.
    ‚óè Fokusiraj se na motivisanje korisnika da zapoƒçne primenu saveta iz ove sekcije.
    `;

    let promptHolistickiPristup = `${prompt.holisticki.text} Neka broj karaktera bude taƒçno: ${prompt.holisticki.brKar}`;
    const holPristupResult = await openai.chat.completions.create({
      model: "gpt-4o-mini-2024-07-18", // proverite verziju modela
      messages: [
        {
          role: "system",
          content: holistickiPristupPredpromtNew,
        },
        {
          //Promeni
          role: "user",
          // content: prompt.holisticki.text,
          content: promptHolistickiPristup,
        },
      ],
      temperature: 0.7,
      //Napravi defoltnu vrednost ako je prazno
      // max_tokens:  Math.floor(Number(prompt.holisticki.brKar) / 4),
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });

    // console.log(
    //   "holisticki tokens => ",
    //   Math.floor(Number(prompt.alergiio.brKar) / 4)
    // );

    // Generisani odgovor
    let odgovor1 = holPristupResult.choices[0].message.content;
    odgovor1 = odgovor1.replace(/[#!&*√º!_?@**]/g, "");

    let mydata = {
      odgovor, //Skup podataka
      odgovor1, //Holisticki pristup
      message, //Dani
    };

    //here pdf
    //alergije je u inputu a ostalo nzm...

    //Za tabelu
    const klijentData_ = {
      "Te≈æina (kg)": {
        value: data_.tezina,
        icon: "public/pdficons/tezina.png",
      },
      "Visina (cm)": {
        value: data_.visina,
        icon: "public/pdficons/visina.png",
      },
      "Primarni cilj": {
        value: data_.primcilj,
        icon: "public/pdficons/primcilj.png",
      },
      // "Specifiƒçan cilj": {
      //   value: data_.specilj,
      //   icon: "public/pdficons/tdee.png",
      // },
      Motivacija: {
        value: data_.motiv,
        icon: "public/pdficons/speccilj.png",
      },
      "Nivo aktivnosti": {
        value: `${getNivoFizickeAktivnosti(data_.nivoAkt)}`,
        icon: "public/pdficons/nivoakt.png",
      },
      "Datum roƒëenja": {
        value: data_.datumRodjenja,
        icon: "public/pdficons/datum.png",
      },
      "Vrsta fiziƒçke aktivnosti": {
        value: data_.vrstaFiz,
        icon: "public/pdficons/man_4.png",
      },
      "Obim struka (cm)": {
        value: data_.struk,
        icon: "public/pdficons/obim.png",
      },
      "Obim kukova (cm)": {
        value: data_.kuk,
        icon: "public/pdficons/hips.png",
      },
      "Krvna grupa": { value: data_.krvGru, icon: "public/pdficons/blood.png" },
      // Dijagnoza: {
      //   value: data_.dijagnoza,
      //   icon: "public/pdficons/tdee.png",
      // },
      Alergije: {
        value: data_.alergije,
        icon: "public/pdficons/airborne.png",
      },
      Ishrana: {
        value: data_.selectedIshranaNaziv,
        icon: "public/pdficons/dish.png",
      },
      "Obroci nedeljno": {
        value: data_.ucestBr,
        icon: "public/pdficons/ish.png",
      },
      Pu≈°enje: { value: data_.pus, icon: "public/pdficons/cigarrete.png" },
      Alkohol: { value: data_.alk, icon: "public/pdficons/beer.png" },
      "Ukupna kalorijska vrednost (kcal)": {
        value: Math.round(data_.ukupnaKalVred),
        icon: "public/pdficons/calories-calculator.png",
      },
      "TDEE (kcal) - Ukupna dnevna potro≈°nja energije": {
        value: Math.round(data_.tdee),
        icon: "public/pdficons/mojb.png",
      },
      "BMR (kcal) - Bazalni metabolizam": {
        value: Math.round(data_.bmrValue),
        icon: "public/pdficons/cleanbmr.png",
      },
      "BMI - Indeks telesne mase": {
        value: Math.round(data_.bmi),
        icon: "public/pdficons/bmi1.png",
      },
    };

    // Dodavanje slike na prvu stranicu
    pdfDoc.image("./public/firstpage2.png", 0, 0, {
      width: 615,
      height: 865,
    }); // A4 dimenzije u pt

    // Dodavanje teksta na prvu stranicu
    const text = `${data_?.name} ${data_?.lastName}`; // Tekst koji se prikazuje
    const textFont = "OpenSans_Condensed-Bold"; // Font koji se koristi za tekst
    const textFontSize = 12; // Veliƒçina fonta
    const textX = 70; // Poƒçetna X koordinata teksta
    const textY = 615; // Poƒçetna Y koordinata teksta

    // Postavi font i veliƒçinu fonta pre raƒçunanja ≈°irine teksta
    pdfDoc.font(textFont).fontSize(textFontSize);

    // Izraƒçunavanje ≈°irine teksta
    const textWidth = pdfDoc.widthOfString(text); // ≈†irina teksta
    const textHeight = textFontSize * 0.7; // Pribli≈æna visina teksta (proporcija fonta)

    // Dodavanje linije koja pokriva ceo tekst
    pdfDoc
      .moveTo(textX, textY - textHeight - 5) // Poƒçetak linije
      .lineTo(textX + textWidth, textY - textHeight - 5) // Kraj linije, ≈°irine celog teksta
      .lineWidth(25) // Debljina linije
      .strokeColor("#81B873") // Boja linije
      .stroke(); // Primena linije

    // Dodavanje teksta na prvu stranicu - ime sa zelenim
    pdfDoc
      .fillColor("black") // Boja teksta
      .text(text, textX, textY, { align: "left" });

    //Datum ispod imena
    const currentDate = new Date();
    const formattedDate = `${currentDate.getFullYear()}-${String(
      currentDate.getMonth() + 1
    ).padStart(2, "0")}-${String(currentDate.getDate()).padStart(2, "0")}`;

    // Dodaj tekst u PDF
    pdfDoc.fontSize(12).text(`${formattedDate}`, textX, textY + 20);

    // Dodavanje druge stranice
    pdfDoc.addPage();

    // Dodavanje slike na drugu stranicu
    pdfDoc.image("./public/secondPage.png", 0, 0, {
      width: 650,
      height: 795,
    }); // A4 dimenzije u pt

    // Dodavanje trece stranice
    pdfDoc.addPage();

    pdfDoc
      .fillColor("black") // Boja teksta
      .text("Podaci za kreiranje ishrane", { align: "center" });

    //Za tabelu
    const col1Width = 270; //Sirina leve kolone
    const col2Width = 280; //Sirina desne kolone
    const iconSize = 15;
    const tableWidth = col1Width + col2Width + 10;
    const startX = 25; //Od leve strane kad pocinje tabela
    let startY = 100;

    pdfDoc
      .moveTo(startX, startY)
      .lineTo(startX + tableWidth, startY)
      .stroke();

    Object.entries(klijentData_).forEach(([key, { value, icon }]) => {
      pdfDoc
        .moveTo(startX, startY)
        .lineTo(startX, startY + 25)
        .stroke();
      pdfDoc
        .moveTo(startX + col1Width + 10, startY)
        .lineTo(startX + col1Width + 10, startY + 25)
        .stroke();
      pdfDoc
        .moveTo(startX + tableWidth, startY)
        .lineTo(startX + tableWidth, startY + 25)
        .stroke();
      pdfDoc
        .moveTo(startX, startY + 25)
        .lineTo(startX + tableWidth, startY + 25)
        .stroke();

      if (icon) {
        pdfDoc.image(icon, startX + 5, startY + 5, {
          width: iconSize,
          height: iconSize,
        });
      }

      pdfDoc.text(key, startX + 25, startY + 7, { width: col1Width - 30 });
      pdfDoc.text(String(value), startX + col1Width + 15, startY + 7, {
        width: col2Width - 10,
      });

      startY += 25;
    });

    // Dodavanje druge stranice
    pdfDoc.addPage();

    // Dodaj metadata
    // pdfDoc
    //   .fontSize(12)
    //   .font("OpenSans_Condensed-Regular")
    //   .text(`${data_?.name || ""} ${data_?.lastName || ""}`, { x: 10, y: 30 })
    //   .text(`TDEE:${Math.round(data_?.tdee) || ""} kcal/dan`, { x: 10, y: 50 })
    //   .text(`BMI:${Math.round(data_?.bmi) || ""} kg/m2`, { x: 10, y: 70 })
    //   .text(
    //     `Ukupna kalorijska vrednost:${
    //       Math.round(data_?.ukupnaKalVred) || ""
    //     } kcal/dan`,
    //     { x: 10, y: 90 }
    //   );
    // .text(`BMR:${data_?.bmrValue || ""} kcal/dan`, { x: 10, y: 90 });

    // Dodaj sliku na desnoj strani
    pdfDoc.image("./public/logoo.png", 500, 50, { width: 50, height: 50 }); // Slika pozicionirana na desnoj strani (x: 500 je pribli≈æno desna ivica)
    pdfDoc.moveDown(1);

    // Dodaj hadkodovani naslov
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Pokreni svoju transformaciju", { align: "center" });
    pdfDoc.moveDown(1);

    // Prvi pasus uvoda - ZA SAD NEMA
    // pdfDoc.fontSize(12).font("OpenSans_Condensed-Regular").text(parsedUvod.data.prviPasus);
    // pdfDoc.moveDown(1);

    //Drugi pasus uvoda
    pdfDoc.fontSize(12).font("OpenSans_Condensed-Regular").text(uvod);
    pdfDoc.addPage();

    //Holisticki Pristup
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Holistiƒçki pristup");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(odgovor1);
    pdfDoc.addPage();

    //Personalnizovani uvod / Personalizovani Plan Ishrane
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Personalizovani Plan Ishrane");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(personalIshrane);
    pdfDoc.moveDown(1);

    mydata.message.days.forEach((day) => {
      // Naslov za dan
      pdfDoc.fontSize(14).font("OpenSans_Condensed-Bold").text(day.dan);
      pdfDoc.moveDown(1);

      // Iteracija kroz obroke za taj dan
      Object.keys(day).forEach((mealType) => {
        if (mealType !== "dan") {
          let meal = day[mealType];

          // Ispis naziva obroka
          pdfDoc
            .fontSize(12)
            .font("OpenSans_Condensed-Bold")
            .text(`  ${mealType.charAt(0).toUpperCase() + mealType.slice(1)}:`); // Indentacija za obrok

          // Detalji o obroku
          pdfDoc.font("OpenSans_Condensed-Regular");

          // Bold-italic samo za "Opis:"
          pdfDoc
            .font("OpenSans_Condensed-BoldItalic")
            .text(`    Opis:`, { continued: true });

          // Regularan font za sadr≈æaj
          pdfDoc.font("OpenSans_Condensed-Regular").text(`    ${meal.opis}`);

          pdfDoc
            .font("OpenSans_Condensed-BoldItalic")
            .text(`    Sastojci:`, { continued: true });
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(`    ${meal.sastojci}`);

          pdfDoc
            .font("OpenSans_Condensed-BoldItalic")
            .text(`    Instrukcije:`, { continued: true });
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(`    ${meal.instrukcije}`);

          pdfDoc
            .font("OpenSans_Condensed-BoldItalic")
            .text(`    Kalorije:`, { continued: true });
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(`    ${meal.kalorije} kcal`);

          pdfDoc
            .font("OpenSans_Condensed-BoldItalic")
            .text(`    Nutritivna vrednost:`, { continued: true });
          pdfDoc
            .font("OpenSans_Condensed-Regular")
            .text(`    ${meal.nutritivna_vrednost}`);

          // pdfDoc
          //   .font("OpenSans_Condensed-BoldItalic")
          //   .text(`    Cena:`, { continued: true });
          // pdfDoc
          //   .font("OpenSans_Condensed-Regular")
          //   .text(`    ~${meal.cena} rsd`);

          //Za sad je izbaceno
          // pdfDoc
          //   .font("OpenSans_Condensed-BoldItalic")
          //   .text(`    Makronutrijenti:`);

          // pdfDoc.font("OpenSans_Condensed-Regular")
          //   .text(`      - Proteini: ${meal.Makronutrijenti.Proteini} %`);
          // pdfDoc.font("OpenSans_Condensed-Regular")
          //   .text(`      - Ugljeni hidrati: ${meal.Makronutrijenti.Ugljeni_hidrati} %`);
          // pdfDoc.font("OpenSans_Condensed-Regular")
          //   .text(`      - Masti: ${meal.Makronutrijenti.Masti} %`);

          pdfDoc.moveDown(1);
        }
      });

      // Dodaj novu stranicu za sledeƒái dan
      // pdfDoc.addPage();  //Da bude svaki dan na novoj stranici
      pdfDoc.moveDown(1); //Dapomeri dole ispod svakog dana
    });

    // Naslov za nutritivnu vrednost
    // pdfDoc.fontSize(14).font("OpenSans_Condensed-Bold").text("Nutritivne informacije");
    // pdfDoc.moveDown(1);

    pdfDoc.addPage();

    //Preporuka za Smernice
    pdfDoc.fontSize(18).font("OpenSans_Condensed-Bold").text("Smernice");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(smernice);
    pdfDoc.addPage();

    //Plan fizicke aktivnosti
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Plan fiziƒçke aktivnosti");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(planFizAkt);
    pdfDoc.addPage();

    //Preporuka za Imunitet
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Preporuka za Imunitet");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(podrzkaImun);
    pdfDoc.addPage();

    //Preporuka za San
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Preporuka za san");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(spavanjeSavet);
    pdfDoc.addPage();

    //Preporuka za unos vode
    pdfDoc
      .fontSize(18)
      .font("OpenSans_Condensed-Bold")
      .text("Preporuka za unos vode");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(prepVoda);
    pdfDoc.addPage();

    // Pusenje
    if (data_.pus === "da") {
      pdfDoc
        .fontSize(18)
        .font("OpenSans_Condensed-Bold")
        .text("Preporuka za konzumiranje duvana");
      pdfDoc
        .moveDown(1)
        .fontSize(12)
        .font("OpenSans_Condensed-Regular")
        .text(pusenje);
      pdfDoc.addPage();
    }

    // Alkohol
    if (data_.pus === "da") {
      pdfDoc
        .fontSize(18)
        .font("OpenSans_Condensed-Bold")
        .text("Konzumiranje alkohola");
      pdfDoc
        .moveDown(1)
        .fontSize(12)
        .font("OpenSans_Condensed-Regular")
        .text(alkohol);
      pdfDoc.addPage();
    }

    // Object.entries(mydata.hol).forEach(([title, content]) => {
    //   if (title !== "fizickoZdravlje") {
    //     pdfDoc.fontSize(18).font("OpenSans_Condensed-Bold").text(title.charAt(0).toUpperCase() + title.slice(1).replace(/([A-Z])/g, ' $1'));
    //     pdfDoc.moveDown(1).fontSize(12).font("OpenSans_Condensed-Regular").text(content);
    //     pdfDoc.addPage();
    //   }
    // });

    // Dodaj zakljuƒçak
    pdfDoc.fontSize(18).font("OpenSans_Condensed-Bold").text("Zakljuƒçak");
    pdfDoc
      .moveDown(1)
      .fontSize(12)
      .font("OpenSans_Condensed-Regular")
      .text(mydata.odgovor.zakljucak);

    // Kreirajte PDF i saƒçuvajte ga
    // const fileName = `Nutricionisticki_Izvestaj_${new Date()}_${Math.floor(Math.random() * 100000000000)}.pdf`;
    //Imaj u vidu da mozda stavis i vreme da bi bilo unikatnije
    const fileName = `Nutricionisticki_Izvestaj_${formatDate(
      new Date()
    )}_${replaceSpacesWithUnderscore(data_.primcilj)}.pdf`; //POPRAVI
    const filePath = path.join(__dirname, "files", fileName);
    const chunks = [];

    pdfDoc.on("data", (chunk) => chunks.push(chunk));
    pdfDoc.on("end", async () => {
      await fs.promises.writeFile(filePath, Buffer.concat(chunks));

      // Snimanje u bazu podataka
      const today = new Date();
      const formattedDate = today.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      }); //Za danasnji dan

      const today1 = new Date();
      today1.setDate(today1.getDate() + 1); // Dodajemo jedan dan
      const formattedDatePlus1 = today1.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });

      const todayKraj = new Date();
      todayKraj.setDate(todayKraj.getDate() + brojDanaInt + 1); // Dodajemo izabrani broj dana
      const formattedDateKraj = todayKraj.toLocaleDateString("sr-Latn", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });

      let klijentData = {
        tez: data_.tezina,
        visina: data_.visina || "",
        primCilj: data_.primcilj || "",
        specCilj: data_.specilj || "",
        motiv: data_.motiv || "",
        nivoAkt: data_.nivoAkt || "",
        datumRodj: data_.datumRodjenja || "",
        tdee: Math.round(data_.tdee) || "",
        vrstaFiz: data_.vrstaFiz || "",
        struk: data_.struk || "",
        kuk: data_.kuk || "",
        vrat: data_.vrat || "",
        krv: data_.krvGru || "",
        dijag: data_.dijagnoza || "",
        alerg: data_.alerg || "",
        ish: data_.selectedIshranaNaziv || "",
        obr: data_.ucestBr || "",
        pus: data_.pus || "",
        alk: data_.alk || "",
        ukupnaKalVred: Math.round(data_.ukupnaKalVred) || "",
        bmi: Math.round(data_.bmi) || "",
        bmrValue: Math.round(data_.bmrValue) || "",
      };

      // console.log('klijentData => ', klijentData);

      try {
        const vreme = getCurrentTime();
        await PdfSchema.create({
          title: data_.primcilj,
          pdf: fileName,
          idKlijenta: data_._id,
          datumKreir: formattedDate,
          datumPoc: formattedDatePlus1,
          datumKraj: formattedDateKraj,
          status: "Aktivan",
          tip: brojDanaInt,
          vreme,
          klijentData,
        });

        // console.log({
        //   title: data_.primcilj,
        //   pdf: fileName,
        //   idKlijenta: data_._id,
        //   datumKreir: formattedDate,
        //   datumPoc: formattedDatePlus1,
        //   datumKraj: formattedDateKraj,
        //   status: "Aktivan",
        //   tip: brojDanaInt,
        //   vreme,
        //   klijentData,
        // });

        // console.log("Dani =>", message);

        //Cuvanje prompta
        await ChatKonverzacija.create({
          primCilj: data_.primcilj,
          datum: formattedDate,
          vreme: vreme,
          name: data_.name,
          lastname: data_.lastName,
          idUser: data_._id,
          poslatiPrompt: {
            // predUvod: uvodPredprompt,
            predUvod: uvodPredpromptNew,
            uvod: promptUvod,

            // predHolistickiPristup: holistickiPristupPredpromt,
            predHolistickiPristup: holistickiPristupPredpromtNew,
            holistickiPristup: promptHolistickiPristup,

            // predPlanIshrane: perosnalPredprompt,
            predPlanIshrane: perosnalPredpromptNew,
            planIshrane: promptPersonal,

            predDani: daniPredprompt_,
            dani: daniPrmpt_,

            predSmernice: smernicePredprompt,
            smernice: promptSmernice,

            predPlanFizickeAktivnosti: fizAktPredprompt,
            planFizickeAktivnosti: fizAktPromt,

            predPodrskaZaImunitet: imunPredprompt,
            podrskaZaImunitet: imunPrompt,

            predSpavanjeSavet: spavanjePredprompt,
            spavanjeSavet: promptSpavanje,

            predUnosVode: vodaPredpromt,
            unosVode: promptVoda,

            predPusenje: pusenjePredprompt,
            pusenje: promptPusenje,

            predAlkohol: alkoholpPredprompt,
            alkohol: promptAlkohol,

            predZakljucak: zakljucakPredprompt,
            zakljucak: promptZakljucak,
          },
          odgovor: {
            uvod: uvod,
            holistickiPristup: odgovor1,
            planIshrane: personalIshrane,
            dani: mydata.message.days,
            smernice: smernice,
            planFizickeAktivnosti: planFizAkt,
            podrskaZaImunitet: podrzkaImun,
            spavanjeSavet: spavanjeSavet,
            unosVode: prepVoda,
            pusenje: pusenje,
            alkohol: alkohol,
            zakljucak: mydata.odgovor.zakljucak,
          },
        });

        let foundUser = await User.findOne({ mail: data_.mail }).exec();

        if (!foundUser) {
          return res.status(401).json({ message: "Korisnik nije nadjen" });
        }

        // const secret = process.env.JWT_SECRET + foundUser.password;
        // const token = jwt.sign(
        //   { id: foundUser._id, email: foundUser.mail },
        //   secret,
        //   {
        //     expiresIn: "5m",
        //   }
        // );

        //Send email
        let link = `https://nutritrans.rs/dash/user/${foundUser._id}`;

        const transporter = nodemailer.createTransport({
          service: "gmail",
          host: "smtp.gmail.email",
          port: 587,
          secure: false,
          auth: {
            user: "office@nutritrans.com",
            pass: "jezq ddqo aynu qucx",
          },
        });

        var mailOptions = {
          from: "office@nutritrans.com",
          to: data_.mail,
          subject: "Generisanje Izve≈°taja",
          // text: link,
          // html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
          //             <h1 style="color: #333;">Uspe≈°no kreirana ishrana!</h1>
          //             <p style="color: #555;">Va≈° izve≈°taj je u obliku PDF-a, kliknite dole da bi ste ga pogledali</p>
          //             <a href="${link}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Idi na aplikaciju</a>
          //             <p style="color: #555; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj mail, Hvala.</p>
          //         </div>`,
          html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 40px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); max-width: 600px; margin: auto;">
                  <img src="https://nutritrans.rs:5000/logoo.png" alt="Nutrition Transformation Logo" style="max-width: 150px; margin-bottom: 20px;">
                  <h1 style="color: #333; font-size: 28px;">üéâ Uspe≈°no kreirana ishrana! üéâ</h1>
                  <p style="color: #555; font-size: 18px;">Va≈° personalizovani plan ishrane je spreman! Mo≈æete preuzeti va≈° izve≈°taj u PDF formatu klikom na dugme ispod.</p>
                  
                  <a href="${link}" style="display: inline-block; background-color: #4CAF50; color: white; padding: 14px 28px; font-size: 18px; text-decoration: none; border-radius: 8px; font-weight: bold; margin-top: 20px;">üìÑ Pogledaj PDF izve≈°taj</a>
                  
                  <p style="color: #777; font-size: 14px; margin-top: 30px;">Ako imate bilo kakvih pitanja, posetite na≈°u <a href="https://nutritrans.rs/help" style="color: #4CAF50; text-decoration: none; font-weight: bold;">stranicu podr≈°ke</a>.</p>
                  
                  <p style="color: #999; font-size: 12px; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj email. Hvala na poverenju! üçΩÔ∏è</p>
              </div>
              `,
        };

        transporter.sendMail(mailOptions, function (error, info) {
          if (error) {
            // console.log(error);
            res.status(400).json({ message: `Nije uspelo slanje na mail` });
          } else {
            res.status(200).json({
              message: `Obavestenje za kreiran pdf poslato na ${mail}`,
            });
            // console.log("Email sent: " + info.response);
          }
        });

        console.log("PDF report saved successfully.");

        //Smanjivanje paketa - samo oduzimanje jer ga ne bi pustio bez paketa
        try {
          const paket = await Paket.findOne({
            idUser: data_._id,
            status: "Aktivan",
          })
            .sort({ datum_kreiranja: -1 })
            .exec();

          if (paket && paket.broj && paket.broj.full) {
            const fullNumber = Number(paket.broj.full);

            if (!isNaN(fullNumber)) {
              paket.broj.full = (fullNumber - 1).toString();
              await paket.save();
              console.log("Paket updated successfully!");
            } else {
              console.log("Invalid value for full field:", paket.broj.full);
            }
          } else {
            console.log("No active paket found for user:", data_.id);
          }
        } catch (error) {
          console.log("Paket error: ", error);
        }

        res.json({
          status: "ok",
          message: "PDF je uspe≈°no generisan i saƒçuvan.",
        });
      } catch (err) {
        console.error("Error saving PDF to database:", err);
        res.status(500).send("Error saving PDF report.");
      }
    });

    pdfDoc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("An error occurred while generating the PDF.");
  }
});

//Mail test
// app.get("/send-report", (req, res) => {
//   const foundUser = { _id: "66e2ed73fdadd6048da0acec" }; // Pronaƒëeni korisnik
//   const data_ = { mail: "vladimir.jovanovic@gbi.rs" }; // Primer maila za slanje

//   let link = `https://nutritrans.rs/dash/user/${foundUser._id}`;

//   const transporter = nodemailer.createTransport({
//     service: "gmail",
//     host: "smtp.gmail.com",
//     port: 587,
//     secure: false,
//     auth: {
//       user: "office@nutritrans.com",
//       pass: "jezq ddqo aynu qucx",
//     },
//   });

//   const mailOptions = {
//     from: "office@nutritrans.com",
//     to: data_.mail,
//     subject: "Generisanje Izve≈°taja",
//     html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
//                 <h1 style="color: #333;">Uspe≈°no kreirana ishrana!</h1>
//                 <p style="color: #555;">Va≈° izve≈°taj je u obliku PDF-a, kliknite dole da biste ga pogledali</p>
//                 <a href="${link}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Idi na aplikaciju</a>
//                 <p style="color: #555; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj mail, Hvala.</p>
//             </div>`,
//   };

//   transporter.sendMail(mailOptions, function (error, info) {
//     if (error) {
//       return res.status(400).json({ message: `Nije uspelo slanje na mail` });
//     } else {
//       return res.status(200).json({
//         message: `Obavestenje za kreiran pdf poslato na ${data_.mail}`,
//       });
//     }
//   });
// });

//Testni - vraca samo celokupni objekat
// app.post("/zod-test", async (req, res) => {
//   const { brojDana, obroci, data_ } = req.body;
//   try {
//     // prompt - uvod
//     const uvodResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         {
//           role: "user",
//           content: `Kreiraj mi kratki uvodni text o ishrani sa primarnim ciljem mr≈°avljenja`,
//         },
//       ],
//       max_tokens: 1000,
//     });
//     let uvod = uvodResult.choices[0]?.message?.content?.trim() || kratki.uvod;
//     uvod = uvod.replace(/[#!&*√º!_?-@**]/g, "");

//     // prompt - zakljucak
//     const zakljucakResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         {
//           role: "user",
//           content: `Kreiraj mi kratki zakljuƒçak text o ishrani sa primarnim ciljem mr≈°avljenja`,
//         },
//       ],
//       max_tokens: 1000,
//     });
//     let zakljucak =
//       zakljucakResult.choices[0]?.message?.content?.trim() || kratki.zakljucak;
//     zakljucak = zakljucak.replace(/[#!&*√º!_?-@**]/g, "");

//     // prompt - plan fizicke aktivnosti
//     const planFizAktResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         {
//           role: "user",
//           content: "Kreiraj mi kratki text o planu fiziƒçke aktivnosti",
//         },
//       ],
//       max_tokens: 1000,
//     });
//     let planFizAkt =
//       planFizAktResult.choices[0]?.message?.content?.trim() || kratki.plan;
//     planFizAkt = planFizAkt.replace(/[#!&*√º!_?-@**]/g, "");
//     // console.log("planFizAkt:", planFizAkt);

//     // prompt - imunolo≈°ka podr≈°ka
//     const podrzkaImunResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         {
//           role: "user",
//           content: "Kreiraj mi kratki tekst o imunolo≈°ku podr≈°ku",
//         },
//       ],
//       max_tokens: 1000,
//     });
//     let podrzkaImun =
//       podrzkaImunResult.choices[0]?.message?.content?.trim() || kratki.podrska;
//     podrzkaImun = podrzkaImun.replace(/[#!&*√º!_?-@**]/g, "");
//     // console.log("podrzkaImun:", podrzkaImun);

//     // prompt - savet za spavanje
//     const spavanjeSavetResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         {
//           role: "user",
//           content: "Kreiraj mi kratki text o pobolj≈°anje spavanja",
//         },
//       ],
//       max_tokens: 1000,
//     });
//     let spavanjeSavet =
//       spavanjeSavetResult.choices[0]?.message?.content?.trim() ||
//       kratki.spavanje;
//     spavanjeSavet = spavanjeSavet.replace(/[#!&*√º!_?-@**]/g, "");
//     console.log("spavanjeSavet:", spavanjeSavet);

//     // prompt - preporuka za unos vode
//     const prepVodaResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06",
//       messages: [
//         { role: "user", content: "Kreiraj mi kratki text o unos vode" },
//       ],
//       max_tokens: 1000,
//     });
//     let prepVoda =
//       prepVodaResult.choices[0]?.message?.content?.trim() || kratki.voda;
//     prepVoda = prepVoda.replace(/[#!&*√º!_?-@**]/g, "");
//     console.log("prepVoda:", prepVoda);

//     // Kreiranje odgovora
//     const odgovor = {
//       voda: prepVoda,
//       spavanje: spavanjeSavet,
//       podrska: podrzkaImun,
//       plan: planFizAkt,
//       uvod,
//       zakljucak,
//     };

//     //Za ostale upite
//     planShema.parse(odgovor);

//     //Za dane
//     if (!brojDana || typeof brojDana !== "number") {
//       return res
//         .status(400)
//         .json({ message: "Molimo unesite validan broj dana." });
//     }

//     const validObroci = ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];
//     const chosenObroci =
//       Array.isArray(obroci) &&
//       obroci.every((obrok) => validObroci.includes(obrok))
//         ? obroci
//         : ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];

//     const obrociPrompt = chosenObroci
//       .map((obrok) => {
//         switch (obrok) {
//           case "doruƒçak":
//             return "doruƒçak";
//           case "u≈æina1":
//             return "u≈æina";
//           case "ruƒçak":
//             return "ruƒçak";
//           case "u≈æina2":
//             return "druga u≈æina";
//           case "veƒçera":
//             return "veƒçera";
//           default:
//             return obrok;
//         }
//       })
//       .join(", ");

//     const DaySchema = generateDaySchema(chosenObroci);
//     const FullWeekSchema = z.object({
//       days: z.array(DaySchema),
//     });

//     const completion = await client.beta.chat.completions.parse({
//       model: "gpt-4o-2024-08-06o-2024-08-06",
//       messages: [
//         {
//           role: "system",
//           content:
//             "Ti si korisni nutricionista. Generi≈°i plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu. Nazivi dana treba da budu 'Dan 1', 'Dan 2', i tako dalje, a ne imena dana u nedelji.",
//         },
//         {
//           role: "user",
//           content: `Napravi plan ishrane za ${brojDana} dana sa sledeƒáim obrocima: ${obrociPrompt}. Nemoj ukljuƒçivati obroke koji nisu navedeni.`,
//         },
//       ],
//       response_format: zodResponseFormat(FullWeekSchema, "mealPlan"),
//     });

//     let message = completion.choices[0]?.message.parsed; //OVDE MOZDA PUKNE! ZBOG KARAKTERA
//     // message = message.replace(/[#!&*√º!_?-@**]/g, "");  //OVDE

//     // FullWeekSchema.parse(hol);

//     //Za holisticki pristup
//     const holPristupResult = await openai.chat.completions.create({
//       model: "gpt-4o-2024-08-06o-2024-08-06",
//       messages: [
//         {
//           role: "system",
//           content:
//             "You are an AI that provides detailed and clearly structured explanations on holistic approaches to health and wellness.",
//         },
//         {
//           role: "user",
//           content: `Molim te da pru≈æi≈° jasan i organizovan opis holistiƒçkog pristupa zdravlju, podeljen u posebne odeljke:
//                     1. Fiziƒçko zdravlje: Kratak opis
//                     2. Zdrave navike: Kratak opis
//                     3. Preventivna nega: Kratak opis
//                     4. Odr≈æavanje bilansa: Kratak opis
//             Neka odgovori budu jasno strukturirani sa taƒçno definisanim odeljcima:
//             '1. Fiziƒçko zdravlje:',
//             '2. Zdrave navike:',
//             '3. Preventivna nega:',
//             '4. Odr≈æavanje bilansa:' sa dvotaƒçkom na kraju svakog naslova.`,
//         },
//       ],
//       temperature: 0.7,
//       max_tokens: 700,
//       top_p: 1,
//       frequency_penalty: 0,
//       presence_penalty: 0,
//     });

//     // Generisani odgovor
//     let odgovor1 = holPristupResult.choices[0].message.content;
//     odgovor1 = odgovor1.replace(/[#!&*√º!_?-@**]/g, "");

//     // Provera da li su svi odeljci prisutni u odgovoru
//     if (
//       !odgovor1.includes("1. Fiziƒçko zdravlje:") ||
//       !odgovor1.includes("2. Zdrave navike:") ||
//       !odgovor1.includes("3. Preventivna nega:") ||
//       !odgovor1.includes("4. Odr≈æavanje bilansa:")
//     ) {
//       return res
//         .status(400)
//         .json({ error: "Odgovor nije u ispravnom formatu." });
//     }

//     //Defoltno ako nema defoltne vrenosti
//     const defaultHol = {
//       fizickoZdravlje:
//         "Fiziƒçko zdravlje se odnosi na dobrobit i funkcionalnost na≈°eg tela. To ukljuƒçuje stanje na≈°ih unutra≈°njih organa, mi≈°iƒáa, kostiju, kao i na≈°u telesnu kondiciju i snagu. Holistiƒçki pristup fiziƒçkom zdravlju prepoznaje da su svi ovi aspekti meƒëusobno povezani i da su svi od su≈°tinskog znaƒçaja za sveukupno zdravlje. To znaƒçi da se fokusiramo ne samo na leƒçenje simptoma, veƒá i na razumijevanje i tretiranje uzroka.",
//       zdraveNavike:
//         "Zdrave navike su pona≈°anja koja ƒçesto praktikujemo i koja pozitivno utiƒçu na na≈°e fiziƒçko, emocionalno i mentalno zdravlje. To mo≈æe ukljuƒçivati redovnu fiziƒçku aktivnost, uravnote≈æenu ishranu, dovoljno sna, hidrataciju, kao i izbegavanje ≈°tetnih navika poput pu≈°enja ili prekomernog konzumiranja alkohola. Holistiƒçki pristup zdravim navikama prepoznaje da su sve ove aktivnosti povezane i da promena jedne navike mo≈æe imati ≈°irok spektar uticaja na na≈°e zdravlje.",
//       preventivnaNega:
//         "Preventivna nega je pristup zdravlju koji se fokusira na spreƒçavanje bolesti i stanja pre nego ≈°to se pojave, umesto da se bave samo njihovim leƒçenjem. To mo≈æe ukljuƒçivati redovne lekarske preglede, vakcinaciju, skrining za odreƒëene bolesti, kao i voƒëenje zdravog ≈æivotnog stila. Holistiƒçki pristup prepoznaje va≈ænost preventivne nege u odr≈æavanju dugoroƒçnog zdravlja i dobrobiti.",
//       odrzavanjeBilansa:
//         "Odr≈æavanje bilansa odnosi se na pronala≈æenje ravnote≈æe izmeƒëu razliƒçitih aspekata na≈°eg ≈æivota, ukljuƒçujuƒái fiziƒçko zdravlje, emocionalno blagostanje, socijalne odnose, duhovnost i rad. Holistiƒçki pristup odr≈æavanju bilansa prepoznaje da su svi ovi aspekti meƒëusobno povezani i da promene u jednom aspektu mogu uticati na druge. To znaƒçi da se te≈æi za ravnote≈æom u svim oblastima ≈æivota, a ne samo u jednoj.",
//     };

//     // Podela odgovora u odgovarajuƒáu strukturu
//     const hol = {
//       fizickoZdravlje:
//         odgovor1
//           .split("1. Fiziƒçko zdravlje:")[1]
//           .split("2. Zdrave navike:")[0]
//           .trim() || defaultHol.fizickoZdravlje,
//       zdraveNavike:
//         odgovor1
//           .split("2. Zdrave navike:")[1]
//           .split("3. Preventivna nega:")[0]
//           .trim() || defaultHol.zdraveNavike,
//       preventivnaNega:
//         odgovor1
//           .split("3. Preventivna nega:")[1]
//           .split("4. Odr≈æavanje bilansa:")[0]
//           .trim() || defaultHol.preventivnaNega,
//       odrzavanjeBilansa:
//         odgovor1.split("4. Odr≈æavanje bilansa:")[1].trim() ||
//         defaultHol.odrzavanjeBilansa,
//     };

//     // Validacija odgovora prema Zod shemi
//     holPristupShema.parse(hol);

//     res.json({
//       odgovor,
//       hol,
//       message,
//     });
//   } catch (error) {
//     console.error("Error:", error);
//     res.status(500).json({ error: "Pojavio se error na serveru." });
//   }
// });

//RADIM NA CONDITION RENDERINGU!
app.post("/prompts1", async (req, res) => {
  try {
    // prompt - uvod
    const uvodResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki uvodni text o ishrani sa primarnim ciljem: mrsavljenje`,
        },
      ],
      max_tokens: 1000,
    });
    let uvod = uvodResult.choices[0]?.message?.content?.trim() || kratki.uvod;
    uvod = uvod.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - zakljucak
    const zakljucakResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki zakljuƒçak text o ishrani sa primarnim ciljem: mrsavljenje`,
        },
      ],
      max_tokens: 1000,
    });
    let zakljucak =
      zakljucakResult.choices[0]?.message?.content?.trim() || kratki.zakljucak;
    zakljucak = zakljucak.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - plan fizicke aktivnosti
    const planFizAktResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o planu fiziƒçke aktivnosti",
        },
      ],
      max_tokens: 1000,
    });
    let planFizAkt =
      planFizAktResult.choices[0]?.message?.content?.trim() || kratki.plan;
    planFizAkt = planFizAkt.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('planFizAkt:', planFizAkt);

    // prompt - imunolo≈°ka podr≈°ka
    const podrzkaImunResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki tekst o imunolo≈°ku podr≈°ku",
        },
      ],
      max_tokens: 1000,
    });
    let podrzkaImun =
      podrzkaImunResult.choices[0]?.message?.content?.trim() || kratki.podrska;
    podrzkaImun = podrzkaImun.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('podrzkaImun:', podrzkaImun);

    // prompt - savet za spavanje
    const spavanjeSavetResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o pobolj≈°anje spavanja",
        },
      ],
      max_tokens: 1000,
    });
    let spavanjeSavet =
      spavanjeSavetResult.choices[0]?.message?.content?.trim() ||
      kratki.spavanje;
    spavanjeSavet = spavanjeSavet.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('spavanjeSavet:', spavanjeSavet);

    // prompt - preporuka za unos vode
    const prepVodaResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        { role: "user", content: "Kreiraj mi kratki text o unos vode" },
      ],
      max_tokens: 1000,
    });
    let prepVoda =
      prepVodaResult.choices[0]?.message?.content?.trim() || kratki.voda;
    prepVoda = prepVoda.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('prepVoda:', prepVoda);

    // // Kreiranje odgovora
    // const odgovor = {
    //   voda: prepVoda,
    //   spavanje: spavanjeSavet,
    //   podrska: podrzkaImun,
    //   plan: planFizAkt,
    //   uvod: uvod,
    //   zakljucak: zakljucak
    // };

    res.json({
      odgovor,
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Pojavio se error na serveru." });
  }
});

app.post("/prompts", async (req, res) => {
  let { brojDana, obroci, data_ } = req.body;

  let brojDanaInt = Number(brojDana);

  try {
    // prompt - uvod
    const uvodResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki uvodni text o ishrani sa primarnim ciljem: ${data_.primcilj}`,
        },
      ],
      max_tokens: 1000,
    });
    let uvod = uvodResult.choices[0]?.message?.content?.trim() || kratki.uvod;
    uvod = uvod.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - zakljucak
    const zakljucakResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: `Kreiraj mi kratki zakljuƒçak text o ishrani sa primarnim ciljem: ${data_.primcilj}`,
        },
      ],
      max_tokens: 1000,
    });
    let zakljucak =
      zakljucakResult.choices[0]?.message?.content?.trim() || kratki.zakljucak;
    zakljucak = zakljucak.replace(/[#!&*√º!_?-@**]/g, "");

    // prompt - plan fizicke aktivnosti
    const planFizAktResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o planu fiziƒçke aktivnosti",
        },
      ],
      max_tokens: 1000,
    });
    let planFizAkt =
      planFizAktResult.choices[0]?.message?.content?.trim() || kratki.plan;
    planFizAkt = planFizAkt.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('planFizAkt:', planFizAkt);

    // prompt - imunolo≈°ka podr≈°ka
    const podrzkaImunResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki tekst o imunolo≈°ku podr≈°ku",
        },
      ],
      max_tokens: 1000,
    });
    let podrzkaImun =
      podrzkaImunResult.choices[0]?.message?.content?.trim() || kratki.podrska;
    podrzkaImun = podrzkaImun.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('podrzkaImun:', podrzkaImun);

    // prompt - savet za spavanje
    const spavanjeSavetResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        {
          role: "user",
          content: "Kreiraj mi kratki text o pobolj≈°anje spavanja",
        },
      ],
      max_tokens: 1000,
    });
    let spavanjeSavet =
      spavanjeSavetResult.choices[0]?.message?.content?.trim() ||
      kratki.spavanje;
    spavanjeSavet = spavanjeSavet.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('spavanjeSavet:', spavanjeSavet);

    // prompt - preporuka za unos vode
    const prepVodaResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06",
      messages: [
        { role: "user", content: "Kreiraj mi kratki text o unos vode" },
      ],
      max_tokens: 1000,
    });
    let prepVoda =
      prepVodaResult.choices[0]?.message?.content?.trim() || kratki.voda;
    prepVoda = prepVoda.replace(/[#!&*√º!_?-@**]/g, "");
    // console.log('prepVoda:', prepVoda);

    // Kreiranje odgovora
    const odgovor = {
      voda: prepVoda,
      spavanje: spavanjeSavet,
      podrska: podrzkaImun,
      plan: planFizAkt,
      uvod: uvod,
      zakljucak: zakljucak,
    };

    //Za ostale upite
    planShema.parse(odgovor);

    //Za dane
    if (!brojDanaInt || typeof brojDanaInt !== "number") {
      return res
        .status(400)
        .json({ message: "Molimo unesite validan broj dana." });
    }

    const validObroci = ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];
    const chosenObroci =
      Array.isArray(obroci) &&
      obroci.every((obrok) => validObroci.includes(obrok))
        ? obroci
        : ["doruƒçak", "u≈æina1", "ruƒçak", "u≈æina2", "veƒçera"];

    const obrociPrompt = chosenObroci
      .map((obrok) => {
        switch (obrok) {
          case "doruƒçak":
            return "doruƒçak";
          case "u≈æina1":
            return "u≈æina";
          case "ruƒçak":
            return "ruƒçak";
          case "u≈æina2":
            return "druga u≈æina";
          case "veƒçera":
            return "veƒçera";
          default:
            return obrok;
        }
      })
      .join(", ");

    const DaySchema = generateDaySchema(chosenObroci);
    const FullWeekSchema = z.object({
      days: z.array(DaySchema),
    });

    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "Ti si korisni nutricionista. Generi≈°i plan ishrane u JSON formatu koristeƒái samo zadatu ≈°emu. Nazivi dana treba da budu 'Dan 1', 'Dan 2', i tako dalje, a ne imena dana u nedelji.",
        },
        {
          role: "user",
          content: `Napravi plan ishrane za ${brojDanaInt} dana sa sledeƒáim obrocima: ${obrociPrompt}. Primarni cilj je ${data_.primcilj}, moja dnevna kalorijska vrednost iznosi ${data_.ukupnaKalVred}, naminice koje preferiram u ishrani: ${data_.voljeneNamirnice}, naminice koje ne preferiram u ishrani: ${data_.neVoljeneNamirnice}. Nemoj ukljuƒçivati obroke koji nisu navedeni.`,
        },
      ],
      response_format: zodResponseFormat(FullWeekSchema, "mealPlan"),
    });

    let message = completion.choices[0]?.message.parsed; //OVDE MOZDA PUKNE! ZBOG KARAKTERA
    // message = message.replace(/[#!&*√º!_?-@**]/g, "");  //OVDE

    // FullWeekSchema.parse(hol);

    //Za holisticki pristup
    const holPristupResult = await openai.chat.completions.create({
      model: "gpt-4o-2024-08-06o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "You are an AI that provides detailed and clearly structured explanations on holistic approaches to health and wellness.",
        },
        {
          role: "user",
          content: `Molim te da pru≈æi≈° jasan i organizovan opis holistiƒçkog pristupa zdravlju, podeljen u posebne odeljke:
                    1. Fiziƒçko zdravlje: Kratak opis
                    2. Zdrave navike: Kratak opis
                    3. Preventivna nega: Kratak opis
                    4. Odr≈æavanje bilansa: Kratak opis
            Neka odgovori budu jasno strukturirani sa taƒçno definisanim odeljcima: 
            '1. Fiziƒçko zdravlje:', 
            '2. Zdrave navike:', 
            '3. Preventivna nega:', 
            '4. Odr≈æavanje bilansa:' sa dvotaƒçkom na kraju svakog naslova.`,
        },
      ],
      temperature: 0.7,
      max_tokens: 700,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });

    // Generisani odgovor
    let odgovor1 = holPristupResult.choices[0].message.content;
    odgovor1 = odgovor1.replace(/[#!&*√º!_?-@**]/g, "");

    // Provera da li su svi odeljci prisutni u odgovoru
    if (
      !odgovor1.includes("1. Fiziƒçko zdravlje:") ||
      !odgovor1.includes("2. Zdrave navike:") ||
      !odgovor1.includes("3. Preventivna nega:") ||
      !odgovor1.includes("4. Odr≈æavanje bilansa:")
    ) {
      return res
        .status(400)
        .json({ error: "Odgovor nije u ispravnom formatu." });
    }

    //Defoltno ako nema defoltne vrenosti
    const defaultHol = {
      fizickoZdravlje:
        "Fiziƒçko zdravlje se odnosi na dobrobit i funkcionalnost na≈°eg tela. To ukljuƒçuje stanje na≈°ih unutra≈°njih organa, mi≈°iƒáa, kostiju, kao i na≈°u telesnu kondiciju i snagu. Holistiƒçki pristup fiziƒçkom zdravlju prepoznaje da su svi ovi aspekti meƒëusobno povezani i da su svi od su≈°tinskog znaƒçaja za sveukupno zdravlje. To znaƒçi da se fokusiramo ne samo na leƒçenje simptoma, veƒá i na razumijevanje i tretiranje uzroka.",
      zdraveNavike:
        "Zdrave navike su pona≈°anja koja ƒçesto praktikujemo i koja pozitivno utiƒçu na na≈°e fiziƒçko, emocionalno i mentalno zdravlje. To mo≈æe ukljuƒçivati redovnu fiziƒçku aktivnost, uravnote≈æenu ishranu, dovoljno sna, hidrataciju, kao i izbegavanje ≈°tetnih navika poput pu≈°enja ili prekomernog konzumiranja alkohola. Holistiƒçki pristup zdravim navikama prepoznaje da su sve ove aktivnosti povezane i da promena jedne navike mo≈æe imati ≈°irok spektar uticaja na na≈°e zdravlje.",
      preventivnaNega:
        "Preventivna nega je pristup zdravlju koji se fokusira na spreƒçavanje bolesti i stanja pre nego ≈°to se pojave, umesto da se bave samo njihovim leƒçenjem. To mo≈æe ukljuƒçivati redovne lekarske preglede, vakcinaciju, skrining za odreƒëene bolesti, kao i voƒëenje zdravog ≈æivotnog stila. Holistiƒçki pristup prepoznaje va≈ænost preventivne nege u odr≈æavanju dugoroƒçnog zdravlja i dobrobiti.",
      odrzavanjeBilansa:
        "Odr≈æavanje bilansa odnosi se na pronala≈æenje ravnote≈æe izmeƒëu razliƒçitih aspekata na≈°eg ≈æivota, ukljuƒçujuƒái fiziƒçko zdravlje, emocionalno blagostanje, socijalne odnose, duhovnost i rad. Holistiƒçki pristup odr≈æavanju bilansa prepoznaje da su svi ovi aspekti meƒëusobno povezani i da promene u jednom aspektu mogu uticati na druge. To znaƒçi da se te≈æi za ravnote≈æom u svim oblastima ≈æivota, a ne samo u jednoj.",
    };

    // Podela odgovora u odgovarajuƒáu strukturu
    const hol = {
      fizickoZdravlje:
        odgovor1
          .split("1. Fiziƒçko zdravlje:")[1]
          .split("2. Zdrave navike:")[0]
          .trim() || defaultHol.fizickoZdravlje,
      zdraveNavike:
        odgovor1
          .split("2. Zdrave navike:")[1]
          .split("3. Preventivna nega:")[0]
          .trim() || defaultHol.zdraveNavike,
      preventivnaNega:
        odgovor1
          .split("3. Preventivna nega:")[1]
          .split("4. Odr≈æavanje bilansa:")[0]
          .trim() || defaultHol.preventivnaNega,
      odrzavanjeBilansa:
        odgovor1.split("4. Odr≈æavanje bilansa:")[1].trim() ||
        defaultHol.odrzavanjeBilansa,
    };

    // Validacija odgovora prema Zod shemi
    holPristupShema.parse(hol);

    res.json({
      odgovor,
      hol,
      message,
    });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Pojavio se error na serveru." });
  }
});

app.get("/zod", async (req, res) => {
  try {
    const Table = z.enum(["orders", "customers", "products"]);
    const Column = z.enum([
      "id",
      "status",
      "expected_delivery_date",
      "delivered_at",
      "shipped_at",
      "ordered_at",
      "canceled_at",
    ]);
    const Operator = z.enum(["=", ">", "<", "<=", ">=", "!="]);
    const OrderBy = z.enum(["asc", "desc"]);

    const DynamicValue = z.object({
      column_name: z.string(),
    });

    const Condition = z.object({
      column: z.string(),
      operator: Operator,
      value: z.union([z.string(), z.number(), DynamicValue]),
    });

    const QueryArgs = z.object({
      table_name: Table,
      columns: z.array(Column),
      conditions: z.array(Condition),
      order_by: OrderBy,
    });

    const client = new OpenAI({
      apiKey: process.env.OPEN_AI_KEY,
    });

    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "You are a helpful assistant. The current date is August 6, 2024. You help users query for the data they are looking for by calling the query function.",
        },
        {
          role: "user",
          content:
            "look up all my orders in may of last year that were fulfilled but not delivered on time",
        },
      ],
      tools: [zodFunction({ name: "query", parameters: QueryArgs })],
    });
    res.json(
      completion.choices[0].message.tool_calls[0].function.parsed_arguments
    );
    // console.log(completion.choices[0].message.tool_calls[0].function.parsed_arguments);
  } catch (error) {
    console.error("Gre≈°ka:", error);
    res.status(500).json({
      status: "error",
      message: "Gre≈°ka.",
    });
  }
});

const Step = z.object({
  explanation: z.string(),
  output: z.string(),
});

const MathResponse = z.object({
  steps: z.array(Step),
  final_answer: z.string(),
});

app.get("/zod1", async (req, res) => {
  const client = new OpenAI({
    apiKey: process.env.OPEN_AI_KEY,
  });

  try {
    const completion = await client.beta.chat.completions.parse({
      model: "gpt-4o-2024-08-06o-2024-08-06",
      messages: [
        {
          role: "system",
          content:
            "You are a helpful math tutor. Only use the schema for math responses.",
        },
        { role: "user", content: "solve 8x + 3 = 21" },
      ],
      response_format: zodResponseFormat(MathResponse, "mathResponse"),
    });

    const message = completion.choices[0]?.message;
    if (message?.parsed) {
      console.log(message.parsed.steps);
      console.log(message.parsed.final_answer);
    } else {
      console.log(message.refusal);
    }
    res.json(message);
  } catch (error) {
    console.error("Gre≈°ka:", error);
    res.status(500).json({
      status: "error",
      message: "Gre≈°ka.",
    });
  }
});

//Smao kad se izabere nova ishrana
app.patch("/updateNaminice", async (req, res) => {
  const { id, namirnice, namirniceDa, selectedIshranaNaziv, selectedIshrana } =
    req.body;

  // console.log("Podaci podlsti: ", req.body);

  try {
    const user = await User.findById(id).exec();

    // console.log("Pre a≈æuriranja korisnika:", user);

    user.namirnice = namirnice;
    user.namirniceDa = namirniceDa;
    user.selectedIshranaNaziv = selectedIshranaNaziv;
    user.selectedIshrana = selectedIshrana;

    // Spremanje korisnika u bazu
    const updatedUser = await user.save();

    // console.log("A≈æurirani korisnik:", updatedUser);

    // Odgovaranje klijentu
    res.json({
      message: `${updatedUser.name} has been updated successfully`,
      updatedUser,
    });
  } catch (error) {
    console.error("Error updating user: ", error);
    res.status(500).json({ message: "Error updating user", error });
  }
});

//Kada se promeni neka naminica - ODRADI
// app.patch("/updateNaminice/jedna", async (req, res) => {
//   const { id, namirnice, namirniceDa, selectedIshranaNaziv, selectedIshrana } =
//     req.body;

//   // console.log("Podaci podlsti: ", req.body);

//   try {
//     const user = await User.findById(id).exec();

//     // console.log("Pre a≈æuriranja korisnika:", user);

//     user.namirnice = namirnice;
//     user.namirniceDa = namirniceDa;
//     user.selectedIshranaNaziv = selectedIshranaNaziv;
//     user.selectedIshrana = selectedIshrana;

//     // Spremanje korisnika u bazu
//     const updatedUser = await user.save();

//     // console.log("A≈æurirani korisnik:", updatedUser);

//     // Odgovaranje klijentu
//     res.json({
//       message: `${updatedUser.name} has been updated successfully`,
//       updatedUser,
//     });
//   } catch (error) {
//     console.error("Error updating user: ", error);
//     res.status(500).json({ message: "Error updating user", error });
//   }
// });

//Za novog korisnika da mu bude default
app.patch("/updateDefaultData", async (req, res) => {
  const { id, primcilj, activityLevel } = req.body;

  // console.log("Podaci podlsti: ", req.body);

  try {
    const user = await User.findById(id).exec();

    console.log("Pre a≈æuriranja korisnika:", user);

    user.primcilj = primcilj;
    user.actlvl = activityLevel;

    // Spremanje korisnika u bazuf
    const updatedUser = await user.save();

    // console.log("A≈æurirani korisnik:", updatedUser);

    // Odgovaranje klijentu
    res.json({
      message: `${updatedUser.name} has been updated successfully`,
      updatedUser,
    });
  } catch (error) {
    console.error("Error updating user: ", error);
    res.status(500).json({ message: "Error updating user", error });
  }
});

app.get("/getUserData/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const user = await User.findById(id).exec();

    if (!user) {
      return res.status(400).json({ message: "Nije nadjen korisnik" });
    }

    const paket = await Paket.findOne({
      idUser: id,
      status: "Aktivan",
    })
      .sort({ datum_kreiranja: -1 })
      .exec();

    res.json({ user, paket: paket || null });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
});

// app.get("/get-pakete/:id", async (req, res) => {
//   const { id } = req.params;

//   try {
//     const pakets = await Paket.find({
//       idUser: id,
//       status: "Aktivan"
//     });
//     res.send({ status: "ok", data: pakets });
//   } catch (error) {
//     console.error(error);
//     res.status(500).send({ status: "error", message: "Error fetching pakets" });
//   }
// });

app.post("/initalUpdate/:id", async (req, res) => {
  const { id, name, lastname, datumRodjenja, pol, tezina, visina, wellcome } =
    req.body;

  try {
    const user = await User.findById(id).exec();

    console.log("Pre a≈æuriranja korisnika:", user);

    user.name = name;
    user.lastname = lastname;
    user.datumRodjenja = datumRodjenja || user.datumRodjenja;
    user.pol = pol || user.pol;
    user.visina = visina || user.visina;
    user.tezina = tezina || user.tezina;
    user.wellcome = wellcome || user.wellcome;

    // Spremanje korisnika u bazu
    const updatedUser = await user.save();

    // console.log("A≈æurirani korisnik:", updatedUser);

    // Odgovaranje klijentu
    res.json({
      message: `${updatedUser.name} has been updated successfully`,
      updatedUser,
    });
  } catch (error) {
    console.error("Error updating user: ", error);
    res.status(500).json({ message: "Error updating user", error });
  }
});

app.get("/verify-email", async (req, res) => {
  const { token } = req.query;

  if (!token) {
    return res.status(400).json({ message: "Token nije pronaƒëen." });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Find the user by userId (decoded from the token)
    const user = await User.findById(decoded.userId);
    console.log("User found for verification => ", user);

    if (!user) {
      return res.render("korisnikNijePronadjen");
    }

    if (user.isVerified) {
      return res.render("vecVerifikovan");
    }

    user.isVerified = true;
    await user.save();

    return res.render("verificationSuccess");
  } catch (err) {
    console.error(err);
    return res.render("verificationFail");
  }
});

app.post("/profilePic/:id", async (req, res) => {
  const img = req.body.myFile; // Assuming the request sends { myFile: "base64string" }
  const id = req.params.id;

  try {
    const user = await User.findById(id).exec();
    if (!user) return res.status(404).json({ message: "User not found" });

    user.myFile = img;
    await user.save();
    res.status(201).json({ msg: "New image uploaded!" });
  } catch (error) {
    res.status(409).json({ message: error.message });
  }
});

// GET endpoint for fetching the profile picture
app.get("/profilePic/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const user = await User.findById(id).exec();
    if (!user || !user.myFile) {
      return res.status(404).json({ message: "No profile picture found" });
    }
    res.status(200).json({ file: user.myFile });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

//Poslenje kreiran public blog
app.get("/blogNew", async (req, res) => {
  try {
    // Pronaƒëi najnoviji blog sa `tip === "false"`, sortiran opadajuƒáe po `date`
    const latestBlog = await Blog.findOne({ tip: "false" }).sort({
      date: -1,
    });

    if (!latestBlog) {
      return res
        .status(404)
        .json({ message: "Nijedan blog sa tipom 'false' nije pronaƒëen" });
    }

    res.json(latestBlog);
  } catch (error) {
    console.error("Error fetching blog:", error);
    res.status(500).json({ message: "Do≈°lo je do gre≈°ke na serveru" });
  }
});

//Poslenje kreiran public blog
app.post("/blogHistory", async (req, res) => {
  try {
    const { id, tip } = req.body;

    if (!id) {
      return res.status(400).json({ message: "Id je obavezan." });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "Nevalidan ID." });
    }

    let query = { _id: id };
    if (tip === "false") {
      query.tip = false;
    }

    const currentBlog = await Blog.findOne(query);

    if (!currentBlog) {
      return res.status(404).json({ message: "Blog nije pronaƒëen." });
    }

    const previousBlog = await Blog.findOne({
      ...(tip === "false" ? { tip: false } : {}),
      _id: { $lt: id },
    }).sort({ _id: -1 });

    const nextBlog = await Blog.findOne({
      ...(tip === "false" ? { tip: false } : {}),
      _id: { $gt: id },
    }).sort({ _id: 1 });

    res.json({
      current: currentBlog,
      previous: previousBlog || null,
      next: nextBlog || null,
    });
  } catch (error) {
    console.error("Error fetching blog history:", error);
    res.status(500).json({ message: "Gre≈°ka na serveru." });
  }
});

app.post("/proveraEmaila", async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ mail: email });

    if (user) {
      return res
        .status(200)
        .json({ message: "Posedujete nalog, mo≈æete se ulogovati!" });
    } else {
      return res
        .status(404)
        .json({ error: "Nemate nalog, mo≈æete ga napraviti" });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ error: "Do≈°lo je do gre≈°ke na serveru!" });
  }
});

app.post("/reTokenizer", async (req, res) => {
  const { mail, id } = req.body;

  try {
    const verificationToken = jwt.sign({ userId: id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    const verificationLink = `https://nutritrans.rs:5000/verify-email?token=${verificationToken}`;
    // const verificationLink = `http://localhost:5000/verify-email?token=${verificationToken}`;

    // const transporter = nodemailer.createTransport({
    //   service: "gmail",
    //   host: "smtp.gmail.com",
    //   port: 465,
    //   secure: true, //Mozda je ovo problem
    //   auth: {
    //     user: "office@nutritrans.com",
    //     pass: "jezq ddqo aynu qucx",
    //   },
    // });
    //stara => jezq ddqo aynu qucx

    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 587,
      secure: false,
      auth: {
        user: "office@nutritrans.com",
        pass: "jezq ddqo aynu qucx",
      },
    });

    const mailOptions = {
      from: "office@nutritrans.com",
      to: mail,
      subject: "Registracija profila",
      // html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 20px;">
      //         <h1 style="color: #333;">Zahtev za aktivaciju profila</h1>
      //         <p style="color: #555;">Dobili smo zahtrev za resetovanje Vase ≈°ifre, kliknite dole da bi ste je resetovali</p>
      //         <a href="${verificationLink}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Resetuj lozinku</a>
      //         <p style="color: #555; margin-top: 20px;">Ako niste poslali zahtev za resetovanje ≈°ifre onda ignori≈°ite ovaj mail.</p>
      //       </div>`,
      html: `<div style="font-family: Arial, sans-serif; text-align: center; padding: 40px; background-color: #f9f9f9; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); max-width: 600px; margin: auto;">
                <img src="https://nutritrans.rs:5000/logoo.png" alt="Nutrition Transformation Logo" style="max-width: 150px; margin-bottom: 20px;">
                <h1 style="color: #333; font-size: 28px;">üîí Zahtev za aktivaciju profila üîí</h1>
                <p style="color: #555; font-size: 18px;">Dobili smo zahtev za resetovanje Va≈°e ≈°ifre. Kliknite na dugme ispod da biste je resetovali.</p>
                
                <a href="${verificationLink}" style="display: inline-block; background-color: #4CAF50; color: white; padding: 14px 28px; font-size: 18px; text-decoration: none; border-radius: 8px; font-weight: bold; margin-top: 20px;">üîë Resetuj lozinku</a>
                
                <p style="color: #777; font-size: 14px; margin-top: 30px;">Ako niste poslali zahtev za resetovanje ≈°ifre, slobodno ignori≈°ite ovaj email.</p>
                
                <p style="color: #999; font-size: 12px; margin-top: 20px;">Molimo Vas da ne odgovarate na ovaj email. Hvala na poverenju! üîê</p>
            </div>
            `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.error("Error sending email:", error); // Detaljan log gre≈°ke
        return res.status(400).json({ message: "Nije uspelo slanje na mail" });
      } else {
        console.log("Email sent:", info);
        return res.status(200).json({ message: "Email uspe≈°no poslat!" });
      }
    });
  } catch (error) {
    console.error("Error fetching blog:", error);
    res.status(500).json({ message: "Do≈°lo je do gre≈°ke na serveru" });
  }
});

//./public/logoo.png
//./public/firstpage.png

// doc.registerFont("OpenSans_Condensed-Regular", "./fonts/OpenSans_Condensed-Regular.ttf");
// doc.registerFont("OpenSans_Condensed-Bold", "./fonts/OpenSans_Condensed-Bold.ttf");
// doc.registerFont("OpenSans_Condensed-BoldItalic", "./fonts/OpenSans_Condensed-BoldItalic.ttf");
// doc.font("OpenSans_Condensed-Regular");

//Ok ali treba da se dodaju stvari!
// app.get('/createpdf', async (req, res) => {
//   try {
//       // Kreiranje PDF dokumenta
//       const doc = new PDFDocument({
//           size: 'A4',
//           margin: 0 // Bez margina kako bi slika popunila celu stranicu
//       });

//       doc.registerFont("OpenSans_Condensed-Regular", "./fonts/OpenSans_Condensed-Regular.ttf");
//       doc.registerFont("OpenSans_Condensed-Bold", "./fonts/OpenSans_Condensed-Bold.ttf");
//       doc.registerFont("OpenSans_Condensed-BoldItalic", "./fonts/OpenSans_Condensed-BoldItalic.ttf");
//       doc.font("OpenSans_Condensed-Regular");

//       // Output fajla - ƒçuvanje u memoriji
//       const pdfBuffers = [];
//       doc.on('data', (chunk) => pdfBuffers.push(chunk));
//       doc.on('end', () => {
//           const pdfData = Buffer.concat(pdfBuffers);
//           res.setHeader('Content-Type', 'application/pdf');
//           res.setHeader('Content-Disposition', 'inline; filename=FirstPage.pdf');
//           res.send(pdfData);
//       });

//       // Dodavanje slike na stranicu
//       doc.image('./public/firstpage.png', 0, 0, { width: 597, height: 841.89 }); // A4 dimenzije u pt

//       // Dodavanje teksta na sliku
//       doc.font('OpenSans_Condensed-Bold') // Font i stil
//           .fontSize(24)          // Veliƒçina fonta
//           .fillColor('black')    // Boja teksta
//           .text('Vladimir Jovanovic', 70, 615, { align: 'left' });

//       // Zatvaranje dokumenta
//       doc.end();
//   } catch (error) {
//       console.error('Error generating PDF:', error);
//       res.status(500).send('Error generating PDF');
//   }
// });

//Samo jedna stranica
// app.get('/createpdf', async (req, res) => {
//   try {
//       // Kreiranje PDF dokumenta
//       const doc = new PDFDocument({
//           size: 'A4',
//           margin: 0 // Bez margina kako bi slika popunila celu stranicu
//       });

//       doc.registerFont("OpenSans_Condensed-Regular", "./fonts/OpenSans_Condensed-Regular.ttf");
//       doc.registerFont("OpenSans_Condensed-Bold", "./fonts/OpenSans_Condensed-Bold.ttf");
//       doc.registerFont("OpenSans_Condensed-BoldItalic", "./fonts/OpenSans_Condensed-BoldItalic.ttf");

//       // Output fajla - ƒçuvanje u memoriji
//       const pdfBuffers = [];
//       doc.on('data', (chunk) => pdfBuffers.push(chunk));
//       doc.on('end', () => {
//           const pdfData = Buffer.concat(pdfBuffers);
//           res.setHeader('Content-Type', 'application/pdf');
//           res.setHeader('Content-Disposition', 'inline; filename=FirstPage.pdf');
//           res.send(pdfData);
//       });

//       // Dodavanje slike na stranicu
//       doc.image('./public/firstpage.png', 0, 0, { width: 597, height: 841.89 }); // A4 dimenzije u pt

//       // Tekst i font
//       const text = 'Veljko Milicevic'; // Tekst koji se prikazuje
//       const textFont = "OpenSans_Condensed-Bold"; // Font koji se koristi za tekst
//       const textFontSize = 24; // Veliƒçina fonta
//       const textX = 70; // Poƒçetna X koordinata teksta
//       const textY = 615; // Poƒçetna Y koordinata teksta

//       // Postavi font i veliƒçinu fonta pre raƒçunanja ≈°irine teksta
//       doc.font(textFont).fontSize(textFontSize);

//       // Izraƒçunavanje ≈°irine teksta
//       const textWidth = doc.widthOfString(text); // ≈†irina teksta
//       const textHeight = textFontSize * 0.7; // Pribli≈æna visina teksta (proporcija fonta)

//       // Dodavanje linije koja pokriva ceo tekst
//       doc
//           .moveTo(textX, textY - textHeight - 5) // Poƒçetak linije
//           .lineTo(textX + textWidth, textY - textHeight - 5) // Kraj linije, ≈°irine celog teksta
//           .lineWidth(20) // Debljina linije
//           .strokeColor('#81B873') // Boja linije
//           .stroke(); // Primena linije

//       // Dodavanje teksta na sliku
//       doc.fillColor('black')           // Boja teksta
//           .text(text, textX, textY, { align: 'left' });

//       // Zatvaranje dokumenta
//       doc.end();
//   } catch (error) {
//       console.error('Error generating PDF:', error);
//       res.status(500).send('Error generating PDF');
//   }
// });

//Dve stranice
app.get("/createpdf", async (req, res) => {
  try {
    // Kreiranje PDF dokumenta
    const doc = new PDFDocument({
      size: "A4",
      margin: 0, // Bez margina kako bi slika popunila celu stranicu
    });

    doc.registerFont(
      "OpenSans_Condensed-Regular",
      "./fonts/OpenSans_Condensed-Regular.ttf"
    );
    doc.registerFont(
      "OpenSans_Condensed-Bold",
      "./fonts/OpenSans_Condensed-Bold.ttf"
    );
    doc.registerFont(
      "OpenSans_Condensed-BoldItalic",
      "./fonts/OpenSans_Condensed-BoldItalic.ttf"
    );

    // Output fajla - ƒçuvanje u memoriji
    const pdfBuffers = [];
    doc.on("data", (chunk) => pdfBuffers.push(chunk));
    doc.on("end", () => {
      const pdfData = Buffer.concat(pdfBuffers);
      res.setHeader("Content-Type", "application/pdf");
      res.setHeader("Content-Disposition", "inline; filename=FirstPage.pdf");
      res.send(pdfData);
    });

    // Dodavanje slike na prvu stranicu
    doc.image("./public/firstpage2.png", 0, 0, { width: 597, height: 841.89 }); // A4 dimenzije u pt

    // Dodavanje teksta na prvu stranicu
    const text = "Nikola Srebric"; // Tekst koji se prikazuje
    const textFont = "OpenSans_Condensed-Bold"; // Font koji se koristi za tekst
    const textFontSize = 24; // Veliƒçina fonta
    const textX = 70; // Poƒçetna X koordinata teksta
    const textY = 615; // Poƒçetna Y koordinata teksta

    // Postavi font i veliƒçinu fonta pre raƒçunanja ≈°irine teksta
    doc.font(textFont).fontSize(textFontSize);

    // Izraƒçunavanje ≈°irine teksta
    const textWidth = doc.widthOfString(text); // ≈†irina teksta
    const textHeight = textFontSize * 0.7; // Pribli≈æna visina teksta (proporcija fonta)

    // Dodavanje linije koja pokriva ceo tekst
    doc
      .moveTo(textX, textY - textHeight - 5) // Poƒçetak linije
      .lineTo(textX + textWidth, textY - textHeight - 5) // Kraj linije, ≈°irine celog teksta
      .lineWidth(25) // Debljina linije
      .strokeColor("#81B873") // Boja linije
      .stroke(); // Primena linije

    // Dodavanje teksta na prvu stranicu
    doc
      .fillColor("black") // Boja teksta
      .text(text, textX, textY, { align: "left" });

    // Dodavanje druge stranice
    doc.addPage();

    // Dodavanje slike na drugu stranicu
    doc.image("./public/secondPage.png", 0, 0, { width: 597, height: 841.89 }); // A4 dimenzije u pt

    // Zatvaranje dokumenta
    doc.end();
  } catch (error) {
    console.error("Error generating PDF:", error);
    res.status(500).send("Error generating PDF");
  }
});

function updateDate(duration) {
  let currentDate = new Date();

  if (duration === "monthly") {
    currentDate.setMonth(currentDate.getMonth() + 1);
  } else if (duration === "yearly") {
    currentDate.setFullYear(currentDate.getFullYear() + 1);
  } else if (duration === "Meseƒçno") {
    currentDate.setFullYear(currentDate.getMonth() + 1);
  } else if (duration === "Godi≈°nje") {
    currentDate.setFullYear(currentDate.getFullYear() + 1);
  }

  return currentDate;
}

//Paymanent's
//Kupovanje paketa
// app.post('/generate-payment-form', (req, res) => {

//   try{
//     const { id, orderId, amount, okUrl, failUrl, paketId, duration } = req.body;
//     console.log("ORDERID => " , orderId, "AMOUNT => ",amount , "OKURL => ", okUrl, "FAILURL => ", failUrl);

//     // if(paketId == 1){ //DA LI DA OMOGUCIM DA SE MOZE MANUELNO PREBACITI NA BESPLATNI ILI DA OSTAVIM KAD MU ISTEKNE DA BUDE KAO BESPLATNI...

//     // }

//     const randomString = Array(20)
//         .fill(null)
//         .map(() => (Math.random() * 36 | 0).toString(36))
//         .join('');

//     const clientId = "13IN003415";              // Merchant ID (dobija se od banke)
//     const oid = orderId || "";                  // ID porud≈æbine
//     const aAmount = amount || "";               // Cena
//     const trantype = "Auth";                    // Transakcioni tip
//     const rnd = randomString;
//     const currency = "941";                     // Valuta
//     const storeKey = "Nutritrans01";            // Kljuƒç prodavnice
//     const storeType = "3d_pay_hosting";         // Tip prodavnice
//     const lang = "en";                          // Jezik
//     const hashAlgorithm = "ver2";               // Algoritam

//     const plainText = [
//         clientId,
//         oid,
//         aAmount,
//         okUrl,
//         failUrl,
//         trantype,
//         "", // UserCode - nije potrebno
//         rnd,
//         "", // CardNumber - nije potrebno
//         "", // Expiry - nije potrebno
//         "", // CVV - nije potrebno
//         currency,
//         storeKey
//     ].join('|');

//     console.log("PLAINTEXT => " , plainText);

//     const hashValue = crypto.createHash('sha512').update(plainText).digest('hex');
//     const hash = Buffer.from(hashValue, 'hex').toString('base64'); // Heksadecimalna vrednost

//     const payURL = "https://testsecurepay.eway2pay.com/fim/est3Dgate"; // Test okru≈æenje

//     // Kreiranje paketa u bazu
//     const noviPaket = new Paket({
//       // orgderId: `${orderId.split('-')[0]}-${orderId.split('-')[1]}`,
//       orgderId: orderId,
//       naziv_paketa: orderId.split('-')[0],
//       cena: amount,
//       valuta: 'RSD',
//       status_placanja: 'Plaƒáeno',
//       status: 'Aktivan',
//       broj: {
//         full: orderId.split('-')[0] === "Standard" ? 1 : 5,
//         base: orderId.split('-')[0] === "Standard" ? 4 : 0
//       },
//       datum_kreiranja: new Date(),
//       datum_placanja: new Date(),
//       datum_isteka: updateDate(duration),
//       tip: duration === "monthly" ? "Meseƒçno" : "Godi≈°nje",
//       idUser: id,
//       transakcioni_id: `${oid}-${Date.now()}`,
//       metoda_placanja: 'Kartica'
//     });

//     // MORAM SAMO DA CUVAM U BAZU ONE USPESNE!!!
//     noviPaket.save()
//       .then((paket) => {
//         console.log('Paket je uspe≈°no saƒçuvan:', paket);
//       })
//       .catch((err) => {
//         console.log('Gre≈°ka pri ƒçuvanju paketa:', err);
//       });

//     // Vraƒáanje podataka za formu
//     res.json({
//         payURL,
//         formData: {
//             currency,
//             trantype,
//             okUrl,
//             failUrl,
//             amount: aAmount,
//             oid,
//             clientid: clientId,
//             storetype: storeType,
//             lang,
//             hashAlgorithm,
//             rnd,
//             encoding: "utf-8",
//             hash
//         }
//     });

//     // res.status(201).json({ msg: "Uspesno kreiran a transakcija" });
//   }catch(error){
//     console.error('Error generating PDF:', error);
//     res.status(500).send('Error generating PDF');
//   }
// });

//ORIGINAL
// app.post("/generate-payment-form", async (req, res) => {
//   try {
//     const { id,email, orderId, amount, okUrl, failUrl, paketId, duration } = req.body;
//     console.log('email => ', email);

//     const transactionId = `${orderId}-${Date.now()}`;

//     const randomString = Array(20)
//       .fill(null)
//       .map(() => ((Math.random() * 36) | 0).toString(36))
//       .join("");

//     const clientId = "13IN003415";
//     const oid = orderId || "";
//     const aAmount = amount || "";
//     const trantype = "Auth";
//     const rnd = randomString;
//     const currency = "941";
//     const storeKey = "Nutritrans01";
//     const storeType = "3d_pay_hosting";
//     const lang = "en";
//     const hashAlgorithm = "ver2";

//     const plainText = [
//       clientId,
//       oid,
//       aAmount,
//       okUrl,
//       failUrl,
//       trantype,
//       "", // UserCode - nije potrebno
//       rnd,
//       "", // CardNumber - nije potrebno
//       "", // Expiry - nije potrebno
//       "", // CVV - nije potrebno
//       currency,
//       storeKey,
//     ].join("|");

//     const hashValue = crypto
//       .createHash("sha512")
//       .update(plainText)
//       .digest("hex");
//     const hash = Buffer.from(hashValue, "hex").toString("base64");

//     const payURL = "https://testsecurepay.eway2pay.com/fim/est3Dgate";

//     // Saƒçuvaj podatke o transakciji u bazu
//     const noviPaket = new Paket({
//       orgderId: orderId,
//       naziv_paketa: orderId.split("-")[0],
//       cena: amount,
//       valuta: "RSD",
//       status: "Neaktivan",
//       broj: {
//         full: orderId.split("-")[0] === "Standard" ? 1 : 5,
//         base: orderId.split("-")[0] === "Standard" ? 4 : 0,
//       },
//       status_placanja: "Pending",
//       datum_kreiranja: new Date(),
//       datum_placanja: null,
//       tip: duration === "monthly" ? "Meseƒçno" : "Godi≈°nje",
//       idUser: id,
//       transakcioni_id: transactionId, // Povezujemo ovo sa bankaSuccess
//       metoda_placanja: "Kartica",
//       userMail: email
//     });

//     await noviPaket.save();

//     res.json({
//       payURL,
//       formData: {
//         currency,
//         trantype,
//         okUrl,
//         failUrl,
//         amount: aAmount,
//         oid,
//         clientid: clientId,
//         storetype: storeType,
//         lang,
//         hashAlgorithm,
//         rnd,
//         encoding: "utf-8",
//         hash,
//       },
//       transactionId,
//     });
//   } catch (error) {
//     console.error("Error generating payment form:", error);
//     res.status(500).send("Error generating payment form");
//   }
// });

//Nece na http://nutritrans.rs a hoce na http://13.50.180.98:5000
// app.post("/bankaSuccess", (req, res) => {
//   res.render("bankaSuccess");
// });

//
// app.post('/bankaSuccess', async (req, res) => {
//   try {
//     console.log("FULL BANK RESPONSE =>", req.body);

//     const { ReturnOid, TransId, 'EXTRA.RECURRINGID': recurringID } = req.body;

//     if (!ReturnOid || !TransId) {
//       return res.status(400).json({
//         message: 'Missing required fields: ReturnOid or TransId'
//       });
//     }

//     const paket = await Paket.findOneAndUpdate(
//       { orgderId: ReturnOid },
//       {
//         status_placanja: 'Plaƒáeno',
//         status: 'Aktivan',
//         datum_placanja: new Date(),
//         datum_isteka: '',
//         TransId: TransId,
//         recurringID: recurringID || null
//       },
//     );

//     if (!paket) {
//       return res.status(404).json({
//         message: 'Transaction not found for the given ReturnOid'
//       });
//     }

//     // res.status(200).json({  //Da mi pokaze gde je sta
//     //   message: 'Transaction successfully processed',
//     //   transactionId: TransId,
//     //   paket
//     // });

//     // console.log('Banka success => ', paket);

//     res.render("bankaSuccess");  //Za kasnije

//   } catch (error) {
//     console.error("Error processing bank response:", error);

//     res.status(500).json({
//       message: 'Internal server error',
//       error: error.message
//     });
//   }
// });

//Sve radi ali ne salje racun na mail i ne prikazuje sve podatke kad zavrsi
// app.post("/bankaSuccess", async (req, res) => {
//   try {
//     console.log("FULL BANK RESPONSE SUCCESS =>", req.body);

//     const { ReturnOid, TransId, "EXTRA.RECURRINGID": recurringID } = req.body;

//     if (!ReturnOid || !TransId) {
//       return res.status(400).json({
//         message: "Missing required fields: ReturnOid or TransId",
//       });
//     }

//     const paket = await Paket.findOne({ orderId: ReturnOid });

//     // Proveri da li je paket pronaƒëen
//     if (!paket) {
//       throw new Error("Paket nije pronaƒëen");
//     }

//     // 2. Postavi datum_isteka u zavisnosti od tipa paketa
//     const datumIsteka =
//       paket.tip === "Meƒçecno"
//         ? new Date(new Date().setMonth(new Date().getMonth() + 1))
//         : updateDate(paket.tip);

//     // 3. A≈æuriraj paket
//     const updatedPaket = await Paket.findOneAndUpdate(
//       { orderId: ReturnOid },
//       {
//         status_placanja: "Plaƒáeno",
//         status: "Aktivan",
//         datum_placanja: new Date(),
//         datum_isteka: datumIsteka,
//         TransId: TransId,
//         recurringID: recurringID || null,
//       },
//       {
//         new: true, // Vraƒáa a≈æurirani objekat
//         runValidators: true, // Poma≈æe u validaciji prilikom a≈æuriranja
//       }
//     );

//     // 4. Proveri rezultat
//     if (!updatedPaket) {
//       console.log("Paket nije a≈æuriran");
//     } else {
//       console.log("A≈æurirani paket:", updatedPaket);
//     }

//     // res.status(200).json({  //Da mi pokaze gde je sta
//     //   message: 'Transaction successfully processed',
//     //   transactionId: TransId,
//     //   paket
//     // });

//     // console.log('Banka success => ', paket);

//     res.render("bankaSuccess"); //Za kasnije
//   } catch (error) {
//     console.error("Error processing bank response:", error);

//     res.status(500).json({
//       message: "Internal server error",
//       error: error.message,
//     });
//   }
// });

//‚ùóüë∑üî® - ORIGINAL
// app.post("/bankaSuccess", async (req, res) => {
//   try {
//     console.log("FULL BANK RESPONSE SUCCESS =>", req.body);

//     const { ReturnOid, TransId, "EXTRA.RECURRINGID": recurringID } = req.body;

//     if (!ReturnOid || !TransId) {
//       return res.status(400).json({
//         message: "Missing required fields: ReturnOid or TransId",
//       });
//     }

//     const paket = await Paket.findOne({ orderId: ReturnOid });

//     // Proveri da li je paket pronaƒëen
//     if (!paket) {
//       throw new Error("Paket nije pronaƒëen");
//     }

//     // 2. Postavi datum_isteka u zavisnosti od tipa paketa
//     const datumIsteka =
//       paket.tip === "Meƒçecno"
//         ? new Date(new Date().setMonth(new Date().getMonth() + 1))
//         : updateDate(paket.tip);

//     // 3. A≈æuriraj paket
//     const updatedPaket = await Paket.findOneAndUpdate(
//       { orderId: ReturnOid },
//       {
//         status_placanja: "Plaƒáeno",
//         status: "Aktivan",
//         datum_placanja: new Date(),
//         datum_isteka: datumIsteka,
//         TransId: TransId,
//         recurringID: recurringID || null,
//       },
//       {
//         new: true, // Vraƒáa a≈æurirani objekat
//         runValidators: true, // Poma≈æe u validaciji prilikom a≈æuriranja
//       }
//     );

//     // 4. Proveri rezultat
//     if (!updatedPaket) {
//       console.log("Paket nije a≈æuriran");
//     } else {
//       // console.log("Paket:", paket);
//       console.log("A≈æurirani paket:", updatedPaket);
//     }

//       //Saljemo paket
//       const transporter = nodemailer.createTransport({
//         service: "gmail",
//         host: "smtp.gmail.email",
//         port: 587,
//         secure: false,
//         auth: {
//           user: "office@nutritrans.com",
//           pass: "jezq ddqo aynu qucx",
//         },
//       });

//       console.log('SLANJE NA => ', paket.userMail); //

//       const mailOptions = {
//         from: "office@nutritrans.com",
//         to: updatedPaket.userMail,
//         subject: "Kupovina paketa",
//         html: `
//               <!DOCTYPE html>
//               <html lang="sr">
//               <head>
//                 <meta charset="UTF-8">
//                 <meta name="viewport" content="width=device-width, initial-scale=1.0">
//                 <title>Detalji o paketu</title>
//                 <style>
//                   body {
//                     font-family: Arial, sans-serif;
//                     background-color: #f4f4f9;
//                     margin: 0;
//                     padding: 0;
//                   }

//                   .container {
//                     width: 80%;
//                     margin: 30px auto;
//                     background-color: white;
//                     padding: 20px;
//                     border-radius: 8px;
//                     box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
//                   }

//                   h1 {
//                     text-align: center;
//                     color: #333;
//                   }

//                   table {
//                     width: 100%;
//                     border-collapse: collapse;
//                     margin-top: 20px;
//                   }

//                   th, td {
//                     padding: 12px 20px;
//                     text-align: left;
//                     border-bottom: 1px solid #ddd;
//                   }

//                   th {
//                     background-color: #f1f1f1;
//                     color: #555;
//                     font-weight: bold;
//                   }

//                   tr:hover {
//                     background-color: #f9f9f9;
//                   }

//                   p {
//                     color: #555;
//                     line-height: 1.6;
//                   }

//                   .footer {
//                     text-align: center;
//                     margin-top: 20px;
//                     color: #888;
//                   }
//                 </style>
//               </head>
//               <body>

//                 <div class="container">
//                   <h1>Detalji o va≈°oj kupovini</h1>
//                   <p>Po≈°tovani,</p>
//                   <p>Hvala ≈°to ste kupili paket <strong>${updatedPaket.naziv_paketa}</strong>!</p>
//                   <p><strong>Detalji o va≈°oj kupovini:</strong></p>

//                   <table>
//                     <tr>
//                       <th>Order ID</th>
//                       <td>${updatedPaket.orgderId}</td>
//                     </tr>
//                     <tr>
//                       <th>Tip paketa</th>
//                       <td>${updatedPaket.tip}</td>
//                     </tr>
//                     <tr>
//                       <th>Cena</th>
//                       <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
//                     </tr>
//                     <tr>
//                       <th>Status plaƒáanja</th>
//                       <td>${updatedPaket.status_placanja}</td>
//                     </tr>
//                     <tr>
//                       <th>Metoda plaƒáanja</th>
//                       <td>${updatedPaket.metoda_placanja}</td>
//                     </tr>
//                     <tr>
//                       <th>Transakcioni ID</th>
//                       <td>${updatedPaket.TransId}</td>
//                     </tr>
//                     <tr>
//                       <th>Datum kreiranja</th>
//                       <td>${new Date(updatedPaket.datum_kreiranja).toLocaleString()}</td>
//                     </tr>
//                     <tr>
//                       <th>Datum plaƒáanja</th>
//                       <td>${new Date(updatedPaket.datum_placanja).toLocaleString()}</td>
//                     </tr>
//                     <tr>
//                       <th>Datum isteka paketa</th>
//                       <td>${new Date(updatedPaket.datum_isteka).toLocaleString()}</td>
//                     </tr>
//                   </table>

//                   <p>Va≈° paket je sada aktivan.</p>
//                   <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>

//                   <p>S po≈°tovanjem,</p>
//                   <p>Tim NutriTrans</p>

//                   <div class="footer">
//                     <p>NutriTrans - Va≈° partner za zdravlja</p>
//                   </div>
//                 </div>

//               </body>
//               </html>
//         `,
//       };

//       // <p>Va≈° paket je sada aktivan i mo≈æe se koristiti do <strong>${new Date(updatedPaket.datum_isteka).toLocaleDateString()}</strong>.</p>

//       transporter.sendMail(mailOptions, function (error, info) {
//         if (error) {
//           return res.status(400).json({ message: "Nije uspelo slanje na mail" });
//         } else {
//           console.log("Email poslat: " + info.response);
//         }
//       });

//     let htmlContent_ = `<!DOCTYPE html>
// <html lang="sr">
// <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Transakcija uspe≈°no obraƒëena</title>
//     <style>
//         body {
//             font-family: Arial, sans-serif;
//             background-color: #f4f4f9;
//             margin: 0;
//             padding: 0;
//         }
//         .container {
//             width: 80%;
//             margin: 30px auto;
//             background-color: white;
//             padding: 20px;
//             border-radius: 8px;
//             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
//         }
//         .center {
//             display: flex;
//             align-items: center;
//             justify-content: center;
//             min-height: 100vh;
//         }
//         .header-icon {
//             width: 80px;
//             height: 80px;
//             background-color: #e6f4e6;
//             border-radius: 50%;
//             display: flex;
//             align-items: center;
//             justify-content: center;
//             margin-bottom: 20px;
//         }
//         .header-icon svg {
//             color: #2d6a4f;
//             width: 40px;
//             height: 40px;
//         }
//         h1 {
//             text-align: center;
//             color: #333;
//             font-size: 24px;
//             font-weight: bold;
//         }
//         p {
//             color: #555;
//             line-height: 1.6;
//         }
//         .button {
//             display: inline-block;
//             padding: 10px 20px;
//             background-color: #2d6a4f;
//             color: white;
//             text-decoration: none;
//             border-radius: 4px;
//             text-align: center;
//             margin-top: 30px;
//         }
//         .button:hover {
//             background-color: #1e5b3d;
//         }
//         table {
//             width: 100%;
//             border-collapse: collapse;
//             margin-top: 20px;
//         }
//         th,
//         td {
//             padding: 12px 20px;
//             text-align: left;
//             border-bottom: 1px solid #ddd;
//         }
//         th {
//             background-color: #f1f1f1;
//             color: #555;
//             font-weight: bold;
//         }
//         tr:hover {
//             background-color: #f9f9f9;
//         }
//         .footer {
//             text-align: center;
//             margin-top: 20px;
//             color: #888;
//         }
//         .checkmark-container {
//             display: flex;
//             justify-content: center;
//             align-items: center;
//             margin-top: 20px;
//         }
//     </style>
// </head>
// <body>
//     <div class="container">
//             <div class="checkmark-container">
//             <div class="header-icon">
//                 <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
//                 </svg>
//             </div>
//         </div>
//         <h1>Transakcija uspe≈°no obraƒëena</h1>
//         <p>Po≈°tovani,</p>
//         <p>Hvala ≈°to ste kupili paket <strong>${updatedPaket.naziv_paketa}</strong>!</p>
//         <p><strong>Detalji o va≈°oj kupovini:</strong></p>
//         <table>
//             <tr>
//                 <th>Order ID</th>
//                 <td>${updatedPaket.orgderId}</td>
//             </tr>
//             <tr>
//                 <th>Tip paketa</th>
//                 <td>${updatedPaket.tip}</td>
//             </tr>
//             <tr>
//                 <th>Cena</th>
//                 <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
//             </tr>
//             <tr>
//                 <th>Status plaƒáanja</th>
//                 <td>${updatedPaket.status_placanja}</td>
//             </tr>
//             <tr>
//                 <th>Metoda plaƒáanja</th>
//                 <td>${updatedPaket.metoda_placanja}</td>
//             </tr>
//             <tr>
//                 <th>Transakcioni ID</th>
//                 <td>${updatedPaket.TransId}</td>
//             </tr>
//             <tr>
//                 <th>Datum kreiranja</th>
//                 <td>${new Date(updatedPaket.datum_kreiranja).toLocaleString()}</td>
//             </tr>
//             <tr>
//                 <th>Datum plaƒáanja</th>
//                 <td>${new Date(updatedPaket.datum_placanja).toLocaleString()}</td>
//             </tr>
//             <tr>
//                 <th>Datum isteka paketa</th>
//                 <td>${new Date(updatedPaket.datum_isteka).toLocaleString()}</td>
//             </tr>
//         </table>
//         <p>Va≈° paket je sada aktivan i mo≈æe se koristiti do <strong>${new Date(updatedPaket.datum_isteka).toLocaleDateString()}</strong>.</p>
//         <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>
//         <p>S po≈°tovanjem,</p>
//         <p>Tim NutriTrans</p>
//         <div class="footer">
//             <a href="https://nutritrans.rs/dash" class="button">Povratak na poƒçetnu stranicu</a>
//         </div>
//     </div>
// </body>
// </html>
// `

//     res.send(htmlContent_);

//   } catch (error) {
//     console.error("Error processing bank response:", error);

//     res.status(500).json({
//       message: "Internal server error",
//       error: error.message,
//     });
//   }
// });

//OVAJ KORISTIM
app.post("/generate-payment-form", async (req, res) => {
  try {
    const { id, email, orderId, amount, okUrl, failUrl, paketId, duration } =
      req.body;
    // console.log("Email => ", email);

    const foundUser = await User.findById(id);

    // console.log('foundUser => ', foundUser.name, foundUser.lastName);

    const transactionId = `${orderId}-${Date.now()}`;

    const randomString = Array(20)
      .fill(null)
      .map(() => ((Math.random() * 36) | 0).toString(36))
      .join("");

    const clientId = "13IN003415";
    const oid = orderId || "";
    const aAmount = amount || "";
    const trantype = "Auth";
    const rnd = randomString;
    const currency = "941";
    const storeKey = "Nutritrans01";
    const storeType = "3d_pay_hosting";
    const lang = "sr";
    const hashAlgorithm = "ver2";

    const plainText = [
      clientId,
      oid,
      aAmount,
      okUrl,
      failUrl,
      trantype,
      "", // UserCode
      rnd,
      "", // CardNumber
      "", // Expiry
      "", // CVV
      currency,
      storeKey,
    ].join("|");

    const hashValue = crypto
      .createHash("sha512")
      .update(plainText, "utf8")
      .digest("hex");
    const hash = Buffer.from(hashValue, "hex").toString("base64");

    const payURL = "https://testsecurepay.eway2pay.com/fim/est3Dgate";

    let noviPaket = null;
    if (foundUser) {
      // Saƒçuvaj podatke o transakciji u bazu
      noviPaket = new Paket({
        orgderId: orderId,
        naziv_paketa: orderId.split("-")[0],
        cena: amount,
        valuta: "RSD",
        status: "Neaktivan",
        broj: {
          full: orderId.split("-")[0] === "Standard" ? 1 : 5,
          base: orderId.split("-")[0] === "Standard" ? 4 : 0,
        },
        status_placanja: "Pending",
        datum_kreiranja: new Date(),
        datum_placanja: null,
        tip: duration === "monthly" ? "Meseƒçno" : "Godi≈°nje",
        idUser: id,
        transakcioni_id: transactionId,
        metoda_placanja: "Kartica",
        userMail: email,
        username: foundUser.name,
        userLastname: foundUser.lastName,
      });

      await noviPaket.save();
    }

    const periodUnit = duration === "monthly" ? "mesec" : "dan";
    const recurringMessage = `Ukupno 99!!! iznosa ƒáe biti naplaƒáeno svakih 1 ${periodUnit}!!!`;

    // console.log("‚úÖ Generisan tekst za prikaz:", recurringMessage);

    res.json({
      payURL,
      formData: {
        currency,
        trantype,
        okUrl,
        failUrl,
        amount: aAmount,
        oid,
        clientid: clientId,
        storetype: storeType,
        lang,
        hashAlgorithm,
        rnd,
        encoding: "utf-8",
        hash,
        recurringMessage,
      },
      transactionId,
    });
  } catch (error) {
    console.error("Error generating payment form:", error);
    res.status(500).send("Error generating payment form");
  }
});

app.post("/bankaSuccess", async (req, res) => {
  try {
    // console.log("FULL BANK RESPONSE SUCCESS =>", req.body);

    const { ReturnOid, TransId, AuthCode, Response, ProcReturnCode, mdStatus } =
      req.body;
    const recurringID = req.body["EXTRA.RECURRINGID"] || null;

    // console.log('TransId => ', TransId)
    // console.log('ReturnOid => ', ReturnOid)

    if (
      !ReturnOid ||
      !TransId ||
      !AuthCode ||
      !Response ||
      !ProcReturnCode ||
      !mdStatus
    ) {
      return res.status(400).json({
        message:
          "Missing required fields: ReturnOid or TransId or AuthCode or Response",
      });
    }

    const paket = await Paket.findOne({ orgderId: ReturnOid });

    if (!paket) {
      return res.status(404).json({ message: "Paket nije pronaƒëen" });
    }

    const datumIsteka =
      paket.tip === "Meseƒçno"
        ? new Date(new Date().setMonth(new Date().getMonth() + 1))
        : new Date(new Date().setFullYear(new Date().getFullYear() + 1));

    const updatedPaket = await Paket.findOneAndUpdate(
      { orgderId: ReturnOid },
      {
        status_placanja: "Plaƒáeno",
        status: "Aktivan",
        datum_placanja: new Date(),
        datum_isteka: datumIsteka,
        TransId,
        recurringID,
      },
      { new: true, runValidators: true }
    );

    if (!updatedPaket) {
      return res.status(500).json({ message: "Gre≈°ka pri a≈æuriranju paketa" });
    }

    console.log("A≈æurirani paket:", updatedPaket);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 587,
      secure: false,
      auth: {
        user: "office@nutritrans.com",
        pass: "jezq ddqo aynu qucx",
      },
    });

    // console.log("Slanje na => ", updatedPaket.userMail);

    const mailOptions = {
      from: "office@nutritrans.com",
      to: updatedPaket.userMail,
      subject: "Kupovina paketa",
      html: `
            <!DOCTYPE html>
            <html lang="sr">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Detalji o paketu</title>
              <style>
                body {
                  font-family: Arial, sans-serif;
                  background-color: #f4f4f9;
                  margin: 0;
                  padding: 0;
                }

                .container {
                  width: 80%;
                  margin: 30px auto;
                  background-color: white;
                  padding: 20px;
                  border-radius: 8px;
                  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }

                h1 {
                  text-align: center;
                  color: #333;
                }

                table {
                  width: 100%;
                  border-collapse: collapse;
                  margin-top: 20px;
                }

                th, td {
                  padding: 12px 20px;
                  text-align: left;
                  border-bottom: 1px solid #ddd;
                }

                th {
                  background-color: #f1f1f1;
                  color: #555;
                  font-weight: bold;
                }

                tr:hover {
                  background-color: #f9f9f9;
                }

                p {
                  color: #555;
                  line-height: 1.6;
                }

                .footer {
                  text-align: center;
                  margin-top: 20px;
                  color: #888;
                }
              </style>
            </head>
            <body>

              <div class="container">
                <h1>Detalji o va≈°oj kupovini</h1>
                
                <p>Po≈°tovani ${updatedPaket.username} ${
        updatedPaket.userLastname
      } uspe≈°no ste kupili ${updatedPaket.naziv_paketa} paket u iznosu od ${
        updatedPaket.cena
      } RSD<strong></strong></p>

                <p><strong>Detalji o va≈°oj kupovini:</strong></p>

                <table>
                  <tr>
                    <th>Order ID</th>
                    <td>${updatedPaket.orgderId}</td>
                  </tr>
                  <tr>
                    <th>Naziv paketa</th>
                    <td>${updatedPaket.naziv_paketa}</td>
                  </tr>
                  <tr>
                    <th>Tip paketa</th>
                    <td>${updatedPaket.tip}</td>
                  </tr>
                  <tr>
                    <th>Cena</th>
                    <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
                  </tr>
                  <tr>
                    <th>Status plaƒáanja</th>
                    <td>${updatedPaket.status_placanja}</td>
                  </tr>
                  <tr>
                    <th>Metoda plaƒáanja</th>
                    <td>${updatedPaket.metoda_placanja}</td>
                  </tr>
                  <tr>
                    <th>Transakcioni ID</th>
                    <td>${updatedPaket.TransId}</td>
                  </tr>
                  <tr>
                    <th>Authorization Code</th>
                    <td>${AuthCode}</td>
                  </tr>
                  <tr>
                    <th>Payment Status</th>
                    <td>${Response}</td>
                  </tr>
                  <tr>
                    <th>Transaction Status Code</th>
                    <td>${ProcReturnCode}</td>
                  </tr>
                   <tr>
                    <th>Status code for the 3D transaction</th>
                    <td>${mdStatus}</td>
                  </tr>
                  <tr>
                    <th>Datum kreiranja</th>
                    <td>${new Date(
                      updatedPaket.datum_kreiranja
                    ).toLocaleString()}</td>
                  </tr>
                  <tr>
                    <th>Datum plaƒáanja</th>
                    <td>${new Date(
                      updatedPaket.datum_placanja
                    ).toLocaleString()}</td>
                  </tr>
                  ${
                    updatedPaket.tip !== "Meseƒçno"
                      ? `
                    <tr>
                      <th>Datum isteka paketa</th>
                      <td>${new Date(
                        updatedPaket.datum_isteka
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                  ${
                    updatedPaket.tip == "Meseƒçno"
                      ? `
                    <tr>
                      <th>Sledeƒáa naplata zakazana za datum</th>
                      <td>${new Date(
                        new Date(updatedPaket.datum_placanja).setMonth(
                          new Date(updatedPaket.datum_placanja).getMonth() + 1
                        )
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }



                </table>

                <p>Va≈° paket je sada aktivan.</p>
                <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>

                <p>S po≈°tovanjem,</p>
                <p>Tim NutriTrans</p>

                <div class="footer">
                  <p>NutriTrans - Va≈° partner za zdravlja</p>
                </div>
              </div>

            </body>
            </html>
      `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.error("Gre≈°ka pri slanju emaila:", error);
        return res.status(400).json({ message: "Nije uspelo slanje na mail" });
      } else {
        console.log("Email poslat: " + info.response);
        // Odgovor se ≈°alje tek kada se email uspe≈°no po≈°alje
        return res.send(
          `<h1>Transakcija uspe≈°na</h1><p>Paket <strong>${updatedPaket.naziv_paketa}</strong> je aktiviran.</p>`
        );
      }
    });

    let htmlContent_ = `<!DOCTYPE html>
    <html lang="sr">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Transakcija uspe≈°no obraƒëena</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f4f9;
                margin: 0;
                padding: 0;
            }
            .container {
                width: 80%;
                margin: 30px auto;
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            .center {
                display: flex;
                align-items: center;
                justify-content: center;
                min-height: 100vh;
            }
            .header-icon {
                width: 80px;
                height: 80px;
                background-color: #e6f4e6;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-bottom: 20px;
            }
            .header-icon svg {
                color: #2d6a4f;
                width: 40px;
                height: 40px;
            }
            h1 {
                text-align: center;
                color: #333;
                font-size: 24px;
                font-weight: bold;
            }
            p {
                color: #555;
                line-height: 1.6;
            }
            .button {
                display: inline-block;
                padding: 10px 20px;
                background-color: #2d6a4f;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                text-align: center;
                margin-top: 30px;
            }
            .button:hover {
                background-color: #1e5b3d;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }
            th,
            td {
                padding: 12px 20px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            th {
                background-color: #f1f1f1;
                color: #555;
                font-weight: bold;
            }
            tr:hover {
                background-color: #f9f9f9;
            }
            .footer {
                text-align: center;
                margin-top: 20px;
                color: #888;
            }
            .checkmark-container {
                display: flex;
                justify-content: center;
                align-items: center;
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="container">
                <div class="checkmark-container">
                <div class="header-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            </div>
            <h1>Transakcija uspe≈°no obraƒëena</h1>
            <p>Po≈°tovani ${updatedPaket.username} ${
      updatedPaket.userLastname
    } uspe≈°no ste kupili ${updatedPaket.naziv_paketa} paket u iznosu od ${
      updatedPaket.cena
    } RSD<strong></strong></p>
            <p><strong>Detalji o va≈°oj kupovini:</strong></p>
                <table>
                  <tr>
                    <th>Order ID</th>
                    <td>${updatedPaket.orgderId}</td>
                  </tr>
                  <tr>
                    <th>Naziv paketa</th>
                    <td>${updatedPaket.naziv_paketa}</td>
                  </tr>
                  <tr>
                    <th>Tip paketa</th>
                    <td>${updatedPaket.tip}</td>
                  </tr>
                  <tr>
                    <th>Cena</th>
                    <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
                  </tr>
                  <tr>
                    <th>Status plaƒáanja</th>
                    <td>${updatedPaket.status_placanja}</td>
                  </tr>
                  <tr>
                    <th>Metoda plaƒáanja</th>
                    <td>${updatedPaket.metoda_placanja}</td>
                  </tr>
                  <tr>
                    <th>Transakcioni ID</th>
                    <td>${updatedPaket.TransId}</td>
                  </tr>
                  <tr>
                    <th>Authorization Code</th>
                    <td>${AuthCode}</td>
                  </tr>
                  <tr>
                    <th>Payment Status</th>
                    <td>${Response}</td>
                  </tr>
                  <tr>
                    <th>Transaction Status Code</th>
                    <td>${ProcReturnCode}</td>
                  </tr>
                   <tr>
                    <th>Status code for the 3D transaction</th>
                    <td>${mdStatus}</td>
                  </tr>
                  <tr>
                    <th>Datum kreiranja</th>
                    <td>${new Date(
                      updatedPaket.datum_kreiranja
                    ).toLocaleString()}</td>
                  </tr>
                  <tr>
                    <th>Datum plaƒáanja</th>
                    <td>${new Date(
                      updatedPaket.datum_placanja
                    ).toLocaleString()}</td>
                  </tr>
                  ${
                    updatedPaket.tip !== "Meseƒçno"
                      ? `
                    <tr>
                      <th>Datum isteka paketa</th>
                      <td>${new Date(
                        updatedPaket.datum_isteka
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                 ${
                   updatedPaket.tip == "Meseƒçno"
                     ? `
                    <tr>
                      <th>Sledeƒáa naplata zakazana za datum</th>
                      <td>${new Date(
                        new Date(updatedPaket.datum_placanja).setMonth(
                          new Date(updatedPaket.datum_placanja).getMonth() + 1
                        )
                      ).toLocaleString()}</td>
                    </tr>
                  `
                     : ""
                 }
                </table>
            <p>Va≈° paket je sada aktivan.</p>
            <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>
            <p>S po≈°tovanjem,</p>
            <p>Tim NutriTrans</p>
            <div class="footer">
                <a href="https://nutritrans.rs/dash" class="button">Povratak na poƒçetnu stranicu</a>
            </div>
        </div>
    </body>
    </html>
    `;

    res.send(htmlContent_);
  } catch (error) {
    console.error("Error processing bank response:", error);
    res
      .status(500)
      .json({ message: "Internal server error", error: error.message });
  }
});

app.post("/bankaFail", async (req, res) => {
  try {
    // console.log("FULL BANK RESPONSE FAIL =>", req.body);

    const { ReturnOid, TransId, AuthCode, Response, ProcReturnCode, mdStatus } =
      req.body;
    const recurringID = req.body["EXTRA.RECURRINGID"] || null;

    // console.log('TransId => ', TransId)  AuthCode
    // console.log('ReturnOid => ', ReturnOid)

    if (!ReturnOid || !TransId || !Response || !ProcReturnCode || !mdStatus) {
      // return res.status(400).json({ message: "Missing required fields: ReturnOid or TransId or AuthCode or Response" });
      return res.status(400).json({ data: req.body });
    }

    const paket = await Paket.findOne({ orgderId: ReturnOid });

    if (!paket) {
      return res.status(404).json({ message: "Paket nije pronaƒëen" });
    }

    const datumIsteka =
      paket.tip === "Meseƒçno"
        ? new Date(new Date().setMonth(new Date().getMonth() + 1))
        : new Date(new Date().setFullYear(new Date().getFullYear() + 1));

    const updatedPaket = await Paket.findOneAndUpdate(
      { orgderId: ReturnOid },
      {
        status_placanja: "Neplaƒáeno",
        status: "Neaktivan",
        datum_placanja: new Date(),
        datum_isteka: datumIsteka,
        TransId,
        recurringID,
      },
      { new: true, runValidators: true }
    );

    if (!updatedPaket) {
      return res.status(500).json({ message: "Gre≈°ka pri a≈æuriranju paketa" });
    }

    // console.log("A≈æurirani paket:", updatedPaket);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 587,
      secure: false,
      auth: {
        user: "office@nutritrans.com",
        pass: "jezq ddqo aynu qucx",
      },
    });

    // console.log("Slanje na => ", updatedPaket.userMail);

    const mailOptions = {
      from: "office@nutritrans.com",
      to: updatedPaket.userMail,
      subject: "Kupovina paketa",
      html: `
            <!DOCTYPE html>
              <html lang="sr">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Detalji o paketu</title>
                <style>
                  body {
                    font-family: Arial, sans-serif;
                    background-color: #f4f4f9;
                    margin: 0;
                    padding: 0;
                  }

                  .container {
                    width: 80%;
                    margin: 30px auto;
                    background-color: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                  }

                  h1 {
                    text-align: center;
                    color: #333;
                  }

                  table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                  }

                  th, td {
                    padding: 12px 20px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                  }

                  th {
                    background-color: #f1f1f1;
                    color: #555;
                    font-weight: bold;
                  }

                  tr:hover {
                    background-color: #f9f9f9;
                  }

                  p {
                    color: #555;
                    line-height: 1.6;
                  }

                  .footer {
                    text-align: center;
                    margin-top: 20px;
                    color: #888;
                  }

                  .alert {
                    background-color: #ffcc00;
                    padding: 10px;
                    margin-top: 20px;
                    text-align: center;
                    color: #555;
                    font-weight: bold;
                  }
                </style>
              </head>
              <body>

                <div class="container">
                  <h1>Detalji o va≈°oj kupovini</h1>
                  <p>Po≈°tovani ${updatedPaket.username} ${
        updatedPaket.userLastname
      } <strong>niste uspe≈°no<strong/> kupili <strong>${
        updatedPaket.naziv_paketa
      } paket<strong/> u iznosu od <strong>${updatedPaket.cena} RSD</strong></p>
                  <p>Detalji o va≈°oj kupovini:</p>

                                  <table>
                  <tr>
                    <th>Order ID</th>
                    <td>${updatedPaket.orgderId}</td>
                  </tr>
                  <tr>
                    <th>Naziv paketa</th>
                    <td>${updatedPaket.naziv_paketa}</td>
                  </tr>
                  <tr>
                    <th>Tip paketa</th>
                    <td>${updatedPaket.tip}</td>
                  </tr>
                  <tr>
                    <th>Cena</th>
                    <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
                  </tr>
                  <tr>
                    <th>Status plaƒáanja</th>
                    <td>${updatedPaket.status_placanja}</td>
                  </tr>
                  <tr>
                    <th>Metoda plaƒáanja</th>
                    <td>${updatedPaket.metoda_placanja}</td>
                  </tr>
                  <tr>
                    <th>Transakcioni ID</th>
                    <td>${updatedPaket.TransId}</td>
                  </tr>
                  <tr>
                    <th>Authorization Code</th>
                    <td>${AuthCode}</td>
                  </tr>
                  <tr>
                    <th>Payment Status</th>
                    <td>${Response}</td>
                  </tr>
                  <tr>
                    <th>Transaction Status Code</th>
                    <td>${ProcReturnCode}</td>
                  </tr>
                   <tr>
                    <th>Status code for the 3D transaction</th>
                    <td>${mdStatus}</td>
                  </tr>
                  <tr>
                    <th>Datum kreiranja</th>
                    <td>${new Date(
                      updatedPaket.datum_kreiranja
                    ).toLocaleString()}</td>
                  </tr>
                  <tr>
                    <th>Datum plaƒáanja</th>
                    <td>${new Date(
                      updatedPaket.datum_placanja
                    ).toLocaleString()}</td>
                  </tr>
                  ${
                    updatedPaket.tip !== "Meseƒçno"
                      ? `
                    <tr>
                      <th>Datum isteka paketa</th>
                      <td>${new Date(
                        updatedPaket.datum_isteka
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                  ${
                    updatedPaket.tip == "Meseƒçno"
                      ? `
                    <tr>
                      <th>Sledeƒáa naplata zakazana za datum</th>
                      <td>${new Date(
                        new Date(updatedPaket.datum_placanja).setMonth(
                          new Date(updatedPaket.datum_placanja).getMonth() + 1
                        )
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                </table>

                  <!-- Obave≈°tenje ako paket nije plaƒáen -->
                  <div class="alert">
                    <p>Va≈° paket nije plaƒáen. Molimo vas da izvr≈°ite uplatu kako biste aktivirali paket.</p>
                  </div>

                  <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>

                  <p>S po≈°tovanjem,</p>
                  <p>Tim NutriTrans</p>

                  <div class="footer">
                    <p>NutriTrans - Va≈° partner za zdravlje</p>
                  </div>
                </div>

              </body>
              </html>

      `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.error("Gre≈°ka pri slanju emaila:", error);
        return res.status(400).json({ message: "Nije uspelo slanje na mail" });
      } else {
        console.log("Email poslat: " + info.response);
        // Odgovor se ≈°alje tek kada se email uspe≈°no po≈°alje
        return res.send(
          `<h1>Transakcija uspe≈°na</h1><p>Paket <strong>${updatedPaket.naziv_paketa}</strong> je aktiviran.</p>`
        );
      }
    });

    let htmlContent_ = `
    <!DOCTYPE html>
<html lang="sr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Obave≈°tenje o neplaƒáenom paketu</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
        }
        .container {
            width: 80%;
            margin: 30px auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .center {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        .header-icon {
            width: 80px;
            height: 80px;
            background-color: #f8d7da;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        .header-icon svg {
            color: #721c24;
            width: 40px;
            height: 40px;
        }
        h1 {
            text-align: center;
            color: #333;
            font-size: 24px;
            font-weight: bold;
        }
        p {
            color: #555;
            line-height: 1.6;
        }
        .button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #721c24;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            text-align: center;
            margin-top: 30px;
        }
        .button:hover {
            background-color: #5c131e;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th,
        td {
            padding: 12px 20px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f1f1f1;
            color: #555;
            font-weight: bold;
        }
        tr:hover {
            background-color: #f9f9f9;
        }
        .footer {
            text-align: center;
            margin-top: 20px;
            color: #888;
        }
        .checkmark-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="checkmark-container">
            <div class="header-icon">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </div>
        </div>
        <h1>Obave≈°tenje o neplaƒáenom paketu</h1>
        <p>Po≈°tovani ${updatedPaket.username} ${
      updatedPaket.userLastname
    } <strong>niste uspe≈°no<strong/> kupili <strong>${
      updatedPaket.naziv_paketa
    } paket<strong/> u iznosu od <strong>${updatedPaket.cena} RSD</strong></p>
        <p><strong>Detalji o va≈°em paketu:</strong></p>
                       <table>
                  <tr>
                    <th>Order ID</th>
                    <td>${updatedPaket.orgderId}</td>
                  </tr>
                  <tr>
                    <th>Naziv paketa</th>
                    <td>${updatedPaket.naziv_paketa}</td>
                  </tr>
                  <tr>
                    <th>Tip paketa</th>
                    <td>${updatedPaket.tip}</td>
                  </tr>
                  <tr>
                    <th>Cena</th>
                    <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
                  </tr>
                  <tr>
                    <th>Status plaƒáanja</th>
                    <td>${updatedPaket.status_placanja}</td>
                  </tr>
                  <tr>
                    <th>Metoda plaƒáanja</th>
                    <td>${updatedPaket.metoda_placanja}</td>
                  </tr>
                  <tr>
                    <th>Transakcioni ID</th>
                    <td>${updatedPaket.TransId}</td>
                  </tr>
                  <tr>
                    <th>Authorization Code</th>
                    <td>${AuthCode}</td>
                  </tr>
                  <tr>
                    <th>Payment Status</th>
                    <td>${Response}</td>
                  </tr>
                  <tr>
                    <th>Transaction Status Code</th>
                    <td>${ProcReturnCode}</td>
                  </tr>
                   <tr>
                    <th>Status code for the 3D transaction</th>
                    <td>${mdStatus}</td>
                  </tr>
                  <tr>
                    <th>Datum kreiranja</th>
                    <td>${new Date(
                      updatedPaket.datum_kreiranja
                    ).toLocaleString()}</td>
                  </tr>
                  <tr>
                    <th>Datum plaƒáanja</th>
                    <td>${new Date(
                      updatedPaket.datum_placanja
                    ).toLocaleString()}</td>
                  </tr>
                  ${
                    updatedPaket.tip !== "Meseƒçno"
                      ? `
                    <tr>
                      <th>Datum isteka paketa</th>
                      <td>${new Date(
                        updatedPaket.datum_isteka
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                  ${
                    updatedPaket.tip == "Meseƒçno"
                      ? `
                    <tr>
                      <th>Sledeƒáa naplata zakazana za datum</th>
                      <td>${new Date(
                        new Date(updatedPaket.datum_placanja).setMonth(
                          new Date(updatedPaket.datum_placanja).getMonth() + 1
                        )
                      ).toLocaleString()}</td>
                    </tr>
                  `
                      : ""
                  }
                </table>
        <p>Molimo vas da izvr≈°ite uplatu ≈°to je pre moguƒáe kako bi va≈° paket bio aktiviran. Za dodatne informacije ili pomoƒá, slobodno nas kontaktirajte.</p>
        <p>S po≈°tovanjem,</p>
        <p>Tim NutriTrans</p>
        <div class="footer">
            <a href="https://nutritrans.rs/dash" class="button">Povratak na poƒçetnu stranicu</a>
        </div>
    </div>
</body>
</html>

`;

    res.send(htmlContent_);
  } catch (error) {
    console.error("Error processing bank response:", error);
    res
      .status(500)
      .json({ message: "Internal server error", error: error.message });
  }
});

// //Odavde uzmi
// app.post("/bankaFail", async (req, res) => {
//   // console.log("FULL BANK RESPONSE FAIL =>", req.body);

//   try {
//     const { ReturnOid, TransId, "EXTRA.RECURRINGID": recurringID } = req.body;

//     if (!ReturnOid || !TransId) {
//       return res.status(400).json({
//         message: "Missing required fields: ReturnOid or TransId",
//       });
//     }

//     const paket = await Paket.findOne({ orderId: ReturnOid });

//     // Proveri da li je paket pronaƒëen
//     if (!paket) {
//       throw new Error("Paket nije pronaƒëen");
//     }

//     // 2. Postavi datum_isteka u zavisnosti od tipa paketa
//     const datumIsteka =
//       paket.tip === "Meƒçecno"
//         ? new Date(new Date().setMonth(new Date().getMonth() + 1))
//         : updateDate(paket.tip);

//     // 3. A≈æuriraj paket
//     const updatedPaket = await Paket.findOneAndUpdate(
//       { orderId: ReturnOid },
//       {
//         status_placanja: "Neplaƒáeno",
//         status: "Neaktivan",
//         datum_placanja: new Date(),
//         datum_isteka: datumIsteka,
//         TransId: TransId,
//         recurringID: recurringID || null,
//       },
//       {
//         new: true, // Vraƒáa a≈æurirani objekat
//         runValidators: true, // Poma≈æe u validaciji prilikom a≈æuriranja
//       }
//     );

//     // 4. Proveri rezultat
//     if (!updatedPaket) {
//       console.log("Paket nije a≈æuriran");
//     } else {
//       console.log("A≈æurirani paket:", updatedPaket);
//     }

//       //Saljemo paket
//       const transporter = nodemailer.createTransport({
//         service: "gmail",
//         host: "smtp.gmail.email",
//         port: 587,
//         secure: false,
//         auth: {
//           user: "office@nutritrans.com",
//           pass: "jezq ddqo aynu qucx",
//         },
//       });

//       const mailOptions = {
//         from: "office@nutritrans.com",
//         to: updatedPaket.userMail,
//         subject: "Kupovina paketa",
//         html: `
//               <!DOCTYPE html>
//                 <html lang="sr">
//                 <head>
//                   <meta charset="UTF-8">
//                   <meta name="viewport" content="width=device-width, initial-scale=1.0">
//                   <title>Detalji o paketu</title>
//                   <style>
//                     body {
//                       font-family: Arial, sans-serif;
//                       background-color: #f4f4f9;
//                       margin: 0;
//                       padding: 0;
//                     }

//                     .container {
//                       width: 80%;
//                       margin: 30px auto;
//                       background-color: white;
//                       padding: 20px;
//                       border-radius: 8px;
//                       box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
//                     }

//                     h1 {
//                       text-align: center;
//                       color: #333;
//                     }

//                     table {
//                       width: 100%;
//                       border-collapse: collapse;
//                       margin-top: 20px;
//                     }

//                     th, td {
//                       padding: 12px 20px;
//                       text-align: left;
//                       border-bottom: 1px solid #ddd;
//                     }

//                     th {
//                       background-color: #f1f1f1;
//                       color: #555;
//                       font-weight: bold;
//                     }

//                     tr:hover {
//                       background-color: #f9f9f9;
//                     }

//                     p {
//                       color: #555;
//                       line-height: 1.6;
//                     }

//                     .footer {
//                       text-align: center;
//                       margin-top: 20px;
//                       color: #888;
//                     }

//                     .alert {
//                       background-color: #ffcc00;
//                       padding: 10px;
//                       margin-top: 20px;
//                       text-align: center;
//                       color: #555;
//                       font-weight: bold;
//                     }
//                   </style>
//                 </head>
//                 <body>

//                   <div class="container">
//                     <h1>Detalji o va≈°oj kupovini</h1>
//                     <p>Po≈°tovani,</p>
//                     <p>Detalji o va≈°oj kupovini:</p>

//                     <table>
//                       <tr>
//                         <th>Order ID</th>
//                         <td>${updatedPaket.orgderId}</td>
//                       </tr>
//                       <tr>
//                         <th>Tip paketa</th>
//                         <td>${updatedPaket.tip}</td>
//                       </tr>
//                       <tr>
//                         <th>Cena</th>
//                         <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
//                       </tr>
//                       <tr>
//                         <th>Status plaƒáanja</th>
//                         <td>${updatedPaket.status_placanja}</td>
//                       </tr>
//                       <tr>
//                         <th>Metoda plaƒáanja</th>
//                         <td>${updatedPaket.metoda_placanja}</td>
//                       </tr>
//                       <tr>
//                         <th>Transakcioni ID</th>
//                         <td>${updatedPaket.TransId}</td>
//                       </tr>
//                       <tr>
//                         <th>Datum kreiranja</th>
//                         <td>${new Date(updatedPaket.datum_kreiranja).toLocaleString()}</td>
//                       </tr>
//                       <tr>
//                         <th>Datum plaƒáanja</th>
//                         <td>${new Date(updatedPaket.datum_placanja).toLocaleString()}</td>
//                       </tr>
//                       <tr>
//                         <th>Datum isteka paketa</th>
//                         <td>${new Date(updatedPaket.datum_isteka).toLocaleString()}</td>
//                       </tr>
//                     </table>

//                     <!-- Obave≈°tenje ako paket nije plaƒáen -->
//                     <div class="alert">
//                       <p>Va≈° paket nije plaƒáen. Molimo vas da izvr≈°ite uplatu kako biste aktivirali paket.</p>
//                     </div>

//                     <p>Ukoliko imate bilo kakvih pitanja ili problema, slobodno nas kontaktirajte.</p>

//                     <p>S po≈°tovanjem,</p>
//                     <p>Tim NutriTrans</p>

//                     <div class="footer">
//                       <p>NutriTrans - Va≈° partner za zdravlje</p>
//                     </div>
//                   </div>

//                 </body>
//                 </html>

//         `,
//       };

//       transporter.sendMail(mailOptions, function (error, info) {
//         if (error) {
//           return res.status(400).json({ message: "Nije uspelo slanje na mail" });
//         } else {
//           console.log("Email poslat: " + info.response);
//         }
//       });

//     let htmlContent_ = `
//     <!DOCTYPE html>
// <html lang="sr">
// <head>
//     <meta charset="UTF-8">
//     <meta name="viewport" content="width=device-width, initial-scale=1.0">
//     <title>Obave≈°tenje o neplaƒáenom paketu</title>
//     <style>
//         body {
//             font-family: Arial, sans-serif;
//             background-color: #f4f4f9;
//             margin: 0;
//             padding: 0;
//         }
//         .container {
//             width: 80%;
//             margin: 30px auto;
//             background-color: white;
//             padding: 20px;
//             border-radius: 8px;
//             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
//         }
//         .center {
//             display: flex;
//             align-items: center;
//             justify-content: center;
//             min-height: 100vh;
//         }
//         .header-icon {
//             width: 80px;
//             height: 80px;
//             background-color: #f8d7da;
//             border-radius: 50%;
//             display: flex;
//             align-items: center;
//             justify-content: center;
//             margin-bottom: 20px;
//         }
//         .header-icon svg {
//             color: #721c24;
//             width: 40px;
//             height: 40px;
//         }
//         h1 {
//             text-align: center;
//             color: #333;
//             font-size: 24px;
//             font-weight: bold;
//         }
//         p {
//             color: #555;
//             line-height: 1.6;
//         }
//         .button {
//             display: inline-block;
//             padding: 10px 20px;
//             background-color: #721c24;
//             color: white;
//             text-decoration: none;
//             border-radius: 4px;
//             text-align: center;
//             margin-top: 30px;
//         }
//         .button:hover {
//             background-color: #5c131e;
//         }
//         table {
//             width: 100%;
//             border-collapse: collapse;
//             margin-top: 20px;
//         }
//         th,
//         td {
//             padding: 12px 20px;
//             text-align: left;
//             border-bottom: 1px solid #ddd;
//         }
//         th {
//             background-color: #f1f1f1;
//             color: #555;
//             font-weight: bold;
//         }
//         tr:hover {
//             background-color: #f9f9f9;
//         }
//         .footer {
//             text-align: center;
//             margin-top: 20px;
//             color: #888;
//         }
//         .checkmark-container {
//             display: flex;
//             justify-content: center;
//             align-items: center;
//             margin-top: 20px;
//         }
//     </style>
// </head>
// <body>
//     <div class="container">
//         <div class="checkmark-container">
//             <div class="header-icon">
//                 <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
//                 </svg>
//             </div>
//         </div>
//         <h1>Obave≈°tenje o neplaƒáenom paketu</h1>
//         <p>Po≈°tovani,</p>
//         <p>≈Ωelimo vas obavestiti da paket <strong>${updatedPaket.naziv_paketa}</strong> jo≈° uvek nije plaƒáen.</p>
//         <p><strong>Detalji o va≈°em paketu:</strong></p>
//         <table>
//             <tr>
//                 <th>Order ID</th>
//                 <td>${updatedPaket.orgderId}</td>
//             </tr>
//             <tr>
//                 <th>Tip paketa</th>
//                 <td>${updatedPaket.tip}</td>
//             </tr>
//             <tr>
//                 <th>Cena</th>
//                 <td>${updatedPaket.cena} ${updatedPaket.valuta}</td>
//             </tr>
//             <tr>
//                 <th>Status plaƒáanja</th>
//                 <td>${updatedPaket.status_placanja}</td>
//             </tr>
//             <tr>
//                 <th>Metoda plaƒáanja</th>
//                 <td>${updatedPaket.metoda_placanja}</td>
//             </tr>
//             <tr>
//                 <th>Transakcioni ID</th>
//                 <td>${updatedPaket.TransId}</td>
//             </tr>
//             <tr>
//                 <th>Datum kreiranja</th>
//                 <td>${new Date(updatedPaket.datum_kreiranja).toLocaleString()}</td>
//             </tr>
//             <tr>
//                 <th>Datum isteka paketa</th>
//                 <td>${new Date(updatedPaket.datum_isteka).toLocaleString()}</td>
//             </tr>
//         </table>
//         <p>Molimo vas da izvr≈°ite uplatu ≈°to je pre moguƒáe kako bi va≈° paket bio aktiviran. Za dodatne informacije ili pomoƒá, slobodno nas kontaktirajte.</p>
//         <p>S po≈°tovanjem,</p>
//         <p>Tim NutriTrans</p>
//         <div class="footer">
//             <a href="https://nutritrans.rs/dash" class="button">Povratak na poƒçetnu stranicu</a>
//         </div>
//     </div>
// </body>
// </html>

// `

//     res.send(htmlContent_);

//   } catch (error) {
//     console.error("Error processing bank response:", error);

//     res.status(500).json({
//       message: "Internal server error",
//       error: error.message,
//     });
//   }

//   // res.render("bankaFail");
// });

//Za ukidanje reccuring placanja! MORAMO DA SALJEMO NA SVOJ SERVER OVDE DA BI ZAOBISLI CORS => SAMO AZURIRAJ BAZU!
//Ovde je drugaciji url
//Original
// app.post("/proxy", async (req, res) => {
//   const url = "https://testsecurepay.eway2pay.com/fim/api";
//   const xmlData = req.body.data;
//   const userid = req.body.user.id;
//   const trans = req.body.user.tranId;
//   const email = req.body.user.email;

//   try {
//     const response = await fetch(url, {
//       method: "POST",
//       headers: {
//         "Content-Type": "application/x-www-form-urlencoded",
//       },
//       body: `data=${encodeURIComponent(xmlData)}`,
//     });

//     // Nadji paket i promeni status
//     const result = await Paket.findOneAndUpdate(
//       { idUser: userid, TransId: trans },
//       { $set: { status: "Neaktivan", datum_otkazivanja: new Date() } },
//       { returnDocument: "after" }
//     );

//     if (result.value) {
//       console.log("Record updated:", result.value);
//     } else {
//       console.log("Record not found.");
//     }

//     if(response.status == 200){

//       const transporter = nodemailer.createTransport({
//         service: "gmail",
//         host: "smtp.gmail.email",
//         port: 587,
//         secure: false,
//         auth: {
//           user: "office@nutritrans.com",
//           pass: "jezq ddqo aynu qucx",
//         },
//       });

//       const mailOptions = {
//         from: "office@nutritrans.com",
//         to: email,
//         subject: "Otkazivanje paketa",
//         html: `
//               <!DOCTYPE html>
//               <html lang="sr">
//               <head>
//                   <meta charset="UTF-8">
//                   <meta name="viewport" content="width=device-width, initial-scale=1.0">
//                   <title>Obave≈°tenje o otkazivanju paketa</title>
//                   <style>
//                       body {
//                           font-family: Arial, sans-serif;
//                           background-color: #f4f4f4;
//                           color: #333;
//                           margin: 0;
//                           padding: 20px;
//                       }
//                       .container {
//                           max-width: 600px;
//                           margin: 0 auto;
//                           background-color: #fff;
//                           padding: 20px;
//                           border-radius: 8px;
//                           box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
//                       }
//                       .header {
//                           text-align: center;
//                           color: #007BFF;
//                       }
//                       .content {
//                           font-size: 16px;
//                           line-height: 1.5;
//                       }
//                       .footer {
//                           text-align: center;
//                           margin-top: 20px;
//                           font-size: 14px;
//                           color: #777;
//                       }
//                       .button {
//                           background-color: #007BFF;
//                           color: white;
//                           padding: 10px 20px;
//                           text-decoration: none;
//                           border-radius: 5px;
//                           display: inline-block;
//                           margin-top: 20px;
//                       }
//                       table {
//                           width: 100%;
//                           margin-top: 20px;
//                           border-collapse: collapse;
//                       }
//                       th, td {
//                           padding: 8px;
//                           border: 1px solid #ddd;
//                           text-align: left;
//                       }
//                       th {
//                           background-color: #f2f2f2;
//                       }
//                   </style>
//               </head>
//               <body>
//                   <div class="container">
//                       <div class="header">
//                           <h1>Obave≈°tenje o otkazivanju paketa</h1>
//                       </div>
//                       <div class="content">
//                           <p>Po≈°tovani,</p>
//                           <p>≈Ωelimo Vas obavestiti da je otkazivanje Va≈°eg paketa uspe≈°no zavr≈°eno. Va≈° zahtev je uspe≈°no procesuiran i paket vi≈°e neƒáe biti aktivan.</p>

//                           <p>Detalji o otkazivanju paketa:</p>
//                           <table>
//                               <tr>
//                                   <th>Order ID</th>
//                                   <td>${aktivan.orgderId}</td>
//                               </tr>
//                               <tr>
//                                   <th>Datum plaƒáanja</th>
//                                   <td>${new Date(aktivan.datum_placanja).toLocaleString()}}</td>
//                               </tr>
//                               <tr>
//                                   <th>Datum otkazivanja paketa</th>
//                                   <td>${new Date().toLocaleString()}}</td>
//                               </tr>
//                           </table>

//                       </div>
//                       <div class="footer">
//                           <p>Hvala ≈°to koristite na≈°e usluge.</p>
//                           <p>Tim Va≈°e Kompanije</p>
//                       </div>
//                   </div>
//               </body>
//               </html>

//         `,
//       };

//       transporter.sendMail(mailOptions, function (error, info) {
//         if (error) {
//           return res.status(400).json({ message: "Nije uspelo slanje na mail" });
//         } else {
//           console.log("Email poslat: " + info.response);
//         }
//       });
// }

// const text = await response.text();
// res.status(response.status).send(text);
//   } catch (error) {
//     res.status(500).send({ error: error.message });
//   }
// });

//Testni - RADI
app.post("/proxy", async (req, res) => {
  const url = "https://testsecurepay.eway2pay.com/fim/api";
  const xmlData = req.body.data;
  const { id: userid, tranId: trans, email } = req.body.user;

  try {
    // Prvo ≈°aljemo zahtev ka API-ju
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: `data=${encodeURIComponent(xmlData)}`,
    });

    // Ako je odgovor API-ja 200, onda a≈æuriramo bazu i ≈°aljemo e-mail - ALI NE SALJEMO DA JE NEUSPESAN PREKID
    if (response.status === 200) {
      console.log(
        "API request successful, proceeding with database update and email sending..."
      );

      // A≈æuriranje baze
      const result = await Paket.findOneAndUpdate(
        { idUser: userid, TransId: trans },
        { $set: { status: "Neaktivan", datum_otkazivanja: new Date() } },
        { new: true }
      );

      if (result) {
        console.log("Record updated:", result);

        // Kreiranje transportera za slanje email-a
        const transporter = nodemailer.createTransport({
          service: "gmail",
          host: "smtp.gmail.com",
          port: 587,
          secure: false,
          auth: {
            user: "office@nutritrans.com",
            pass: "jezq ddqo aynu qucx",
          },
        });

        // Kreiranje email poruke
        const mailOptions = {
          from: "office@nutritrans.com",
          to: email,
          subject: "Otkazivanje paketa",
          html: `
            <!DOCTYPE html>
            <html lang="sr">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Obave≈°tenje o otkazivanju paketa</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        background-color: #f4f4f4;
                        color: #333;
                        margin: 0;
                        padding: 20px;
                    }
                    .container {
                        max-width: 600px;
                        margin: 0 auto;
                        background-color: #fff;
                        padding: 20px;
                        border-radius: 8px;
                        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                    }
                    .header {
                        text-align: center;
                        color: #007BFF;
                    }
                    .content {
                        font-size: 16px;
                        line-height: 1.5;
                    }
                    .footer {
                        text-align: center;
                        margin-top: 20px;
                        font-size: 14px;
                        color: #777;
                    }
                    table {
                        width: 100%;
                        margin-top: 20px;
                        border-collapse: collapse;
                    }
                    th, td {
                        padding: 8px;
                        border: 1px solid #ddd;
                        text-align: left;
                    }
                    th {
                        background-color: #f2f2f2;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>Obave≈°tenje o otkazivanju paketa</h1>
                    </div>
                    <div class="content">
                        <p>Po≈°tovani,</p>
                        <p>≈Ωelimo Vas obavestiti da je otkazivanje Va≈°eg paketa uspe≈°no zavr≈°eno.</p>
                        <p>Va≈° zahtev je uspe≈°no procesuiran i paket vi≈°e neƒáe biti aktivan.</p>
                        
                        <p>Detalji o otkazivanju paketa:</p>
                        <table>
                            <tr>
                                <th>Tarnsakcioni ID</th>
                                <td>${trans}</td>
                            </tr>
                            <tr>
                                <th>Datum plaƒáanja</th>
                                <td>${new Date(
                                  result.datum_placanja
                                ).toLocaleString()}</td>
                            </tr>
                            <tr>
                                <th>Datum otkazivanja</th>
                                <td>${new Date().toLocaleString()}</td>
                            </tr>
                        </table>
                    </div>
                    <div class="footer">
                        <p>Hvala ≈°to koristite na≈°e usluge.</p>
                        <p>Tim Va≈°e Kompanije</p>
                    </div>
                </div>
            </body>
            </html>
          `,
        };

        // Slanje email-a
        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            console.error("Gre≈°ka prilikom slanja emaila:", error);
            return res
              .status(400)
              .json({ message: "Nije uspelo slanje email-a" });
          } else {
            console.log("Email poslat:", info.response);
          }
        });
      } else {
        console.log("Record not found.");
      }
    }

    // U svakom sluƒçaju, vraƒáamo odgovor klijentu
    const text = await response.text();
    res.status(response.status).send(text);
  } catch (error) {
    console.error("Gre≈°ka u API pozivu:", error);
    res.status(500).send({ error: error.message });
  }
});

//Renderuje ejs
app.get("/home", (req, res) => {
  res.render("home");
});

//
// app.get("/env", (req, res) => {
//   res.json({ message: {
//     "DATABASE_URI": process.env.DATABASE_URI,
//     "DATABASE_URI_DOCKER": process.env.DATABASE_URI_DOCKER,
//     "JWT_SECRET": process.env.JWT_SECRET,
//     "ACCESS_TOKEN_SECRET": process.env.ACCESS_TOKEN_SECRET,
//     "REFRESH_TOKEN_SECRET": process.env.REFRESH_TOKEN_SECRET,
//     "SESSION_SECRET": process.env.SESSION_SECRET,
//     "CLIENT_ID": process.env.CLIENT_ID,
//     "CLIENT_SECRET": process.env.CLIENT_SECRET,
//     "OPEN_AI_KEY": process.env.OPEN_AI_KEY,
//     "NODE_ENV": process.env.NODE_ENV,
//     "PORT": process.env.PORT
//     }
//   });
// });

//Izmena specCilja naknadno - PROBAJ PONOVO!
app.patch("/specCilj/reset/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const updatedUser = await User.findByIdAndUpdate(id, { specilj: [] });

    // Check if the user was found and updated
    if (!updatedUser) {
      return res.status(404).json({ message: "User not found" });
    }

    // Return a successful response with the updated user data
    res.status(200).json({
      message: "Cilj je uspe≈°no resetovan",
    });
  } catch (error) {
    // Handle any errors during the database operation
    console.error(error);
    res.status(500).json({ message: "Server error. Please try again later." });
  }
});

//Dodaje specificne ciljeve u profil i menja njegove naminice i cuva
// app.patch("/specCilj/:id", async (req, res) => {
//   const id = req.params.id;
//   const updatedData = req.body;
//   console.log("updatedData => ", updatedData);

//   try {
//     const updatedUser1 = await User.findById(id);

//     // const updatedUser = await User.findByIdAndUpdate(
//     //   id,
//     //   { specilj: updatedData },
//     //   { new: true } // Vraƒáa a≈æurirani dokument
//     // );

//     // if (!updatedUser) {
//     //   return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
//     // }

//     // Uzimamo sve naminice iz baze, samo biramo _id
//     const Namirnices = await Namirnice.find().select("_id").lean();

//     //Prebacujemo da mozemo da koristimo kao obican js, da nema new Object("")
//     const sveNamirnice = Namirnices.map((naminica) => ({
//       ...naminica,
//       _id: naminica._id.toString(),
//     }));

//     // console.log("Namirnices => ", sveNamirnice);

//     //Sve namirnice prebacujemo u obicnu listu da bi mogli raditi sa njom
//     const sveNamirniceId = sveNamirnice.map((obj) => obj._id); //Sve namirnice iz baze

//     //Citanje iz baze svih specificnih ciljeva
//     const specCiljevi = await Ciljevi.find({ tip: "specCilj" }).lean();

//     const specCiljeviId = specCiljevi.map((cilj) => ({
//       ...cilj,
//       _id: cilj._id.toString(),
//       namirnice: cilj.namirnice.map((namirnica) => namirnica.toString()), // Mapira svaku namirnicu na string ID
//     }));

//     // console.log("specCiljevi => ", specCiljeviId);

//     //Filtracija objekata
//     // const odabraniCiljevi = updatedData.map(
//     //   (specilj) => specCiljeviId[specilj]
//     // );

//     //Objekti odabranih specificnih ciljeva sa naminicama

//     //Ako u bazi imamo i neke specificne ciljeve onda ih ubacimo u zajednicku listu
//     if (updatedUser1.specilj.length != 0) {
//       updatedUser1.specilj.forEach((item) => {
//         if (!updatedData.includes(item)) {
//           updatedData.push(item);
//         }
//       });
//     }

//     const odabraniCiljevi = specCiljeviId.filter((obj) =>
//       updatedData.includes(obj._id)
//     );

//     // console.log("odabrani objekti specificnih ciljeva => ", odabraniCiljevi);

//     let novaListaNamirnica = [];

//     // console.log("updatedUser.namirniceDa => ", updatedUser1.namirniceDa);

//     //Filtracija naminica
//     // odabraniCiljevi.forEach((odabraniCilj) => {
//     //   novaListaNamirnica = updatedUser1.namirniceDa.filter(
//     //     (namirnicaId) => !odabraniCilj.namirnice.includes(namirnicaId)
//     //   );
//     // });

//     let prev = updatedUser1.namirniceDa;

//     odabraniCiljevi.forEach((odabraniCilj) => {
//       prev = prev.filter(
//         (namirnicaId) => !odabraniCilj.namirnice.includes(namirnicaId)
//       );
//     });

//     // Vraƒáamo filtriranu listu namirnica
//     // res.json({ novaListaNamirnica: prev });

//     //Namirnice koje ostaju odabrane, treba postaviti u naminiceDa
//     console.log("novaListaNamirnica => ", prev);

//     // console.log("Namirnice id lista => ", sveNamirniceId);

//     //Namirnice koje nisu odabrane
//     let neodabraneNamirnice = sveNamirniceId.filter(
//       (item) => !prev.includes(item)
//     );

//     if (updatedData.length != 0) {
//       updatedUser1.namirnice = neodabraneNamirnice;
//       updatedUser1.namirniceDa = prev;
//       updatedUser1.specilj = updateDate;
//       await updatedUser1.save();
//       res.status(200).json({ message: "Promenjeno", data: prev });
//     } else {
//       res.status(200).json({ message: "Nije promenjeno" }); // Vrati na pocetan skup namirnica a to je od odabrane ishrane
//     }

//     // updatedUser1.namirniceDa = novaListaNamirnica;

//     // res.status(200).json({ message: "Cilj je uspe≈°no a≈æuriran" });
//     // res.status(200).send(novaListaNamirnica);
//   } catch (error) {
//     console.error("Error updating specilj:", error);
//     res
//       .status(500)
//       .json({ message: "Do≈°lo je do gre≈°ke prilikom a≈æuriranja cilja" });
//   }
// });

//Ovde promeni sta treba...
app.patch("/specCilj/:id", async (req, res) => {
  const id = req.params.id;
  const updatedData = req.body; // Lista ID-ova odabranih ciljeva

  if (!Array.isArray(updatedData)) {
    return res.status(400).json({ message: "Nevalidni podaci za a≈æuriranje" });
  }

  try {
    const updatedUser1 = await User.findById(id);
    if (!updatedUser1) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    // Dohvatanje svih ciljeva i priprema podataka
    const specCiljevi = await Ciljevi.find({ tip: "specCilj" }).lean();
    const specCiljeviId = specCiljevi.map((cilj) => ({
      ...cilj,
      _id: cilj._id.toString(),
      namirnice: cilj.namirnice.map((namirnica) => namirnica.toString()),
    }));

    // Filtriranje ciljeva koji su trenutno ƒçekirani (odabrani)
    const cekiraniCiljevi = specCiljeviId.filter((obj) =>
      updatedData.includes(obj._id)
    );

    // Kreiranje liste namirnica koje su povezane sa ƒçekiranim ciljevima
    const cekiraneNamirnice = [
      ...new Set(cekiraniCiljevi.flatMap((cilj) => cilj.namirnice)),
    ];

    // Filtracija namirnica koje ostaju kao neodabrane
    const sveNamirnice = await Namirnice.find().select("_id").lean();
    const sveNamirniceId = sveNamirnice.map((n) => n._id.toString());
    const neodabraneNamirnice = sveNamirniceId.filter(
      (id) => !cekiraneNamirnice.includes(id)
    );

    // A≈æuriranje korisnika u bazi
    updatedUser1.namirniceDa = neodabraneNamirnice; //Obrnuo sam...
    updatedUser1.namirnice = cekiraneNamirnice; //Obrnuo sam...
    updatedUser1.specilj = updatedData;

    await updatedUser1.save();

    res.status(200).json({
      message: "Promenjeno",
      cekiraneNamirnice, // Namirnice povezane sa ƒçekiranim ciljevima
      neodabraneNamirnice, // Namirnice koje nisu povezane sa ƒçekiranim ciljevima
    });
  } catch (error) {
    console.error("Error updating specilj:", error);
    res
      .status(500)
      .json({ message: "Do≈°lo je do gre≈°ke prilikom a≈æuriranja cilja" });
  }
});

//Definisane naminice koje sadrze gluten
const glutenListId = [
  "671f82735997900563cead4c",
  "671f829b5997900563cead5b",
  "671f82b35997900563cead6a",
  "671f82c75997900563cead79",
  "671f82e45997900563cead88",
  "671f83c65997900563ceade7",
  "671f83e85997900563ceadf6",
  "671f840a5997900563ceae05",
  "671f84315997900563ceae14",
  "671f84755997900563ceae32",
  "671f849a5997900563ceae41",
  "671f84b55997900563ceae50",
];

//Definisane naminice koje sadrze laktoza
const laktozaListId = [
  "671f948cd1348708c15baba8",
  "671f957cd1348708c15babe4",
  "671f95c2d1348708c15babf3",
  "671f9634d1348708c15bac1c",
  "671f9605d1348708c15bac02",
  "671f9657d1348708c15bac2b",
  "671f966fd1348708c15bac3a",
  "671f9696d1348708c15bac49",
  "671f96b3d1348708c15bac58",
  "671f96ced1348708c15bac67",
  "671f9df0d1348708c15bb051",
  "671f9e0dd1348708c15bb060",
  "671f9707d1348708c15bac7a",
  "671f971bd1348708c15bac89",
];

//Update stanja intolerancije - gluten, laktoza i sve naminice koje idu...
app.patch("/updateIntolerancija/:id", async (req, res) => {
  const id = req.params.id;
  const intolerancijeList = req.body; // ['gluten', 'laktoza']

  // Definisane liste ID-ova namirnica
  const glutenListId = [
    "671f82735997900563cead4c",
    "671f829b5997900563cead5b",
    "671f82b35997900563cead6a",
    "671f82c75997900563cead79",
    "671f82e45997900563cead88",
    "671f83c65997900563ceade7",
    "671f83e85997900563ceadf6",
    "671f840a5997900563ceae05",
    "671f84315997900563ceae14",
    "671f84755997900563ceae32",
    "671f849a5997900563ceae41",
    "671f84b55997900563ceae50",
  ];

  const laktozaListId = [
    "671f948cd1348708c15baba8",
    "671f957cd1348708c15babe4",
    "671f95c2d1348708c15babf3",
    "671f9634d1348708c15bac1c",
    "671f9605d1348708c15bac02",
    "671f9657d1348708c15bac2b",
    "671f966fd1348708c15bac3a",
    "671f9696d1348708c15bac49",
    "671f96b3d1348708c15bac58",
    "671f96ced1348708c15bac67",
    "671f9df0d1348708c15bb051",
    "671f9e0dd1348708c15bb060",
    "671f9707d1348708c15bac7a",
    "671f971bd1348708c15bac89",
  ];

  try {
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen" });
    }

    // Kombinovanje svih ID-ova intolerancija u jednu listu
    let intoleranceIds = [];
    if (intolerancijeList.includes("gluten")) {
      intoleranceIds = [...intoleranceIds, ...glutenListId];
    }
    if (intolerancijeList.includes("laktoza")) {
      intoleranceIds = [...intoleranceIds, ...laktozaListId];
    }

    // 1. Uklanjanje namirnica iz `namirniceDa` i dodavanje u `namirnice`
    const prebaceneNamirnice = user.namirniceDa.filter((id) =>
      intoleranceIds.includes(id)
    );

    const updatedNamirniceDa = user.namirniceDa.filter(
      (id) => !intoleranceIds.includes(id)
    );

    const updatedNamirnice = [
      ...new Set([...user.namirnice, ...prebaceneNamirnice]),
    ];

    // 2. Ako nema intolerancija, obrnuto - vraƒáanje nazad u `namirniceDa`
    if (intolerancijeList.length === 0) {
      const vraceneNamirniceDa = user.namirnice.filter((id) =>
        intoleranceIds.includes(id)
      );

      user.namirniceDa = [
        ...new Set([...updatedNamirniceDa, ...vraceneNamirniceDa]),
      ];
      user.namirnice = [
        ...new Set(user.namirnice.filter((id) => !intoleranceIds.includes(id))),
      ];
    } else {
      user.namirniceDa = [...new Set(updatedNamirniceDa)];
      user.namirnice = [...new Set(updatedNamirnice)];
    }

    user.intolerancija = [
      ...new Set([...user.intolerancija, ...intolerancijeList]),
    ];
    const updatedUser = await user.save();

    res.status(200).json({
      message: "Intolerancije su uspe≈°no a≈æurirane.",
      updatedUser,
    });
  } catch (error) {
    console.error("Error updating intolerancije:", error);
    res.status(500).json({
      message: "Do≈°lo je do gre≈°ke prilikom a≈æuriranja intolerancije.",
      error,
    });
  }
});

//Update samo komentar
app.post("/updateKomentar", async (req, res) => {
  const { id, komentar } = req.body;

  if (!id || !komentar) {
    return res.status(400).json({ message: "ID i komentar su obavezni!" });
  }

  try {
    const user = await User.findById(id);

    if (!user) {
      return res.status(404).json({ message: "Korisnik nije pronaƒëen!" });
    }

    user.komentar = komentar;

    await user.save();

    // Vratite uspe≈°an odgovor
    res.status(200).json({ message: "Komentar je uspe≈°no saƒçuvan!" });
  } catch (error) {
    console.error("Gre≈°ka u ruti /updateKomentar:", error);
    return res
      .status(500)
      .json({ message: "Do≈°lo je do gre≈°ke prilikom slanja komentara." });
  }
});

app.get("/octopus", async (req, res) => {
  try {
    const response = await fetch("https://sandbox.octopos.rs/api/weborder", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization:
          "Bearer XMSaQ0GSftO+Oe5nMXZPcIWfEDejrdo/LY3DJSJJEXZIWjO+FZlKWITDWAHsizpRQdJvRahMvBvDZm+Gr3J7UecPCYnhI92BeY6Q4I6/SxhHeh39y1l/AeWHpTxn6WzRlJoFEzm1athizbD56M/s7HSeNJeGt+OMBkbhJVj2olEmTLu5sp9MuQA0XoMBcH7b",
      },
      body: JSON.stringify({
        Items: [
          {
            GroupName: "Sokovi",
            ProductCode: "S001",
            ProductName: "Coca Cola 0.33",
            UnitMeasure: "kom",
            TaxLabel: "–ñ",
            Quantity: 2,
            Price: 150.0,
          },
        ],
        ExternalId: "octopos-001",
        Payments: [
          {
            FiscalPaymentTypeId: 4,
            Amount: 300.0,
          },
        ],
        FiscalReceiptData: {
          ReturnTextualRepresentation: true,
          LineWidth: 46,
          Jmbg: "1122334455",
        },
      }),
    });

    if (!response.ok) {
      throw new Error("Error with web order");
    }

    // const data = await response.json();

    console.log("Octopus data => ", response);
    res.send(response);
  } catch (error) {
    console.error("Error:", error);
    res
      .status(500)
      .json({ error: "Something went wrong with the external API request" });
  }
});

app.get("/about", (req, res) => {
  res.json({ message: "Server up!" });
});

//
app.all("*", (req, res) => {
  res.status(404);
  if (req.accepts("html")) {
    res.sendFile(path.join(__dirname, "views", "404.html"));
  } else if (req.accepts("json")) {
    res.json({ message: "404 Not Found" });
  } else {
    res.type("txt").send("404 Not Found");
  }
});

app.use(errorHandler);

//==== TESTS ====
let add = async () => {
  const radnik = {
    jmbg: "0204997710082",
    pozicija: "Konobar",
    sektor: "Banket",
    netopalataIzUgovora: "50.000",
    fixUgovoren: "70.000",
    tipUgovora: "Na odrednjeno",
    kafa: "Da",
    zaRacDnev: "Da",
  };

  try {
    const result = await Organizacije.updateOne(
      { _id: mongoose.Types.ObjectId("66912365d2672debd94a4412") },
      { $push: { zaposleni: radnik } }
    );
    console.log("Update:", result);
  } catch (error) {
    console.error("Error:", error);
  }
};

// const transporter = nodemailer.createTransport({
//   host: "smtp.ethereal.email",
//   port: 587,
//   secure: false, // Use `true` for port 465, `false` for all other ports
//   auth: {
//     user: "maddison53@ethereal.email",
//     pass: "jn7jnAPss4f63QBp6D",
//   },
// });

// app.get("sendemail", (req,res)=>{

// })

//==== TESTS ====

const sslOptions = {
  key: fs.readFileSync("/etc/letsencrypt/live/dev.nutritrans.rs/privkey.pem"), // Path to your private key
  cert: fs.readFileSync(
    "/etc/letsencrypt/live/dev.nutritrans.rs/fullchain.pem"
  ), // Path to your certificate
};

//SA HTTPS
mongoose.connection.once("open", () => {
  console.log("Connected to MongoDB!");
  // Start HTTPS server
  https.createServer(sslOptions, app).listen(PORT, () => {
    console.log(`HTTPS server running on port ${PORT}`);
  });
});

//BEZ HTTPS
// mongoose.connection.once("open", () => {
//   console.log("Connected to MongoDB");
//   app.listen(PORT, () => {
//     console.log(`Server running on port ${PORT}`);
//     // add();
//   });
// });

mongoose.connection.on("error", (err) => {
  console.log(err);
  logEvents(
    `${err.no}: ${err.code}\t${err.syscall}\t${err.hostname}`,
    "mongoErrLog.log"
  );
});
